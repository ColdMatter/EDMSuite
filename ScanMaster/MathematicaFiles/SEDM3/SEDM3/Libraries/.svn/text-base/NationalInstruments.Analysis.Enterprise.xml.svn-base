<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:ni="urn:ni">
  <assembly>
    <name>NationalInstruments.Analysis.Enterprise</name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.Measurements">
      <summary>
            Provides a set of methods for performing  measurements on input data.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.ACDCEstimator(System.Double[],System.Double@,System.Double@)">
      <summary>
            Calculates an estimate of the AC and DC levels of the input signal.
            </summary>
      <param name="signal">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained in the time-domain record for a valid estimate. 
            </param>
      <param name="acEstimate">
            The estimate of the input signal AC level. This value is in volts rms if the input signal is in volts. 
            </param>
      <param name="dcEstimate">
            The estimate of the input signal DC level. This value is in volts if the input signal is in volts. 
            </param>
      <exception cref="T:System.ArgumentNullException">signal (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in signal (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.AmplitudePhaseSpectrum(System.Double[],System.Boolean,System.Double,System.Double[]@,System.Double[]@,System.Double@)">
      <summary> Calculates the single-sided, scaled amplitude spectrum magnitude and amplitude spectrum phase of a 
            real, time-domain signal.
            </summary>
      <param name="signal">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained 
            in the time-domain record for analysis and estimates based on this spectrum to be valid. 
            </param>
      <param name="unWrap">
            The input that decides if the phase is unwrapped. If set to true, it enables phase 
            unwrapping on the output phase, phaseSpectrum (parameter). If set to 
            false, the method does not unwrap the output phase.
            </param>
      <param name="dt">The sample period of the time-domain signal, usually in seconds. dt (parameter) is also  where f_s is the sampling frequency of the time-domain signal. 
            </param>
      <param name="amplitudeSpectrum">
            The single-sided amplitude spectrum magnitude. If the input 
            signal is in volts, this value is in volts rms. 
            </param>
      <param name="phaseSpectrum">The single-sided amplitude spectrum phase in radians. 
            </param>
      <param name="df">The line frequency interval of the power spectrum. If dt (parameter) is in seconds, 
            this value is in hertz. 
            </param>
      <exception cref="T:System.ArgumentNullException">signal (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">	
            		The number of samples in signal (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.AutoPowerSpectrum(System.Double[],System.Double,System.Double@)">
      <summary>Calculates the single-sided, scaled, auto power spectrum of a time-domain signal. 
            </summary>
      <param name="signal">The input, time-domain signal, usually in volts. At least three cycles of the 
            signal must be contained in the time-domain record for analysis and estimates based on this spectrum to be 
            valid. 
            </param>
      <param name="dt">The sample period of the time-domain signal, usually in seconds. dt (parameter) is also  where f_s is the sampling frequency of the time-domain signal. 
            </param>
      <param name="df">The line frequency interval of the power spectrum. If dt (parameter) is in seconds, 
            this value is in hertz. 
            </param>
      <returns>
            The single-sided power spectrum. If the input signal 
            is in volts, this value is in volts rms squared. 
            </returns>
      <exception cref="T:System.ArgumentNullException">signal (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in signal (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.CrossPowerSpectrum(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double@)">
      <summary>
            The single-sided, scaled, cross power spectrum of two real-time signals.
            </summary>
      <param name="signalX">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained in the time-domain record for a valid estimate. 
            </param>
      <param name="signalY">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained in the time-domain record for a valid estimate. 
            </param>
      <param name="dt">The sample period of the time-domain signal, usually in seconds. dt (parameter) is also  where f_s is the sampling frequency of the time-domain signal. 
            </param>
      <param name="magnitudeSxy">
            The single-sided, cross power spectrum between signalX (parameter) and signalY (parameter).  
            If the input signals are in volts, this value is in volts rms squared.  
            </param>
      <param name="phaseSxy">
            The phase spectrum in radians showing the difference between the phases of signalY (parameter) and signalX (parameter). 
            </param>
      <param name="df">The line frequency interval of the power spectrum. If dt (parameter) is in seconds, 
            this value is in hertz. 
            </param>
      <exception cref="T:System.ArgumentException">
            		The number of samples in signalX (parameter) is equal to zero.
            
            -or-
            
            		The number of samples in signalY (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.PowerFrequencyEstimate(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double@,System.Double@)">
      <summary>Calculates the estimated power and frequency around a peak in the power spectrum of a time-domain signal. 
            </summary>
      <param name="autoSpectrum">
            The power spectrum of a time-domain signal.
            </param>
      <param name="searchFrequency">
            The frequency (usually in hertz) of the frequency peak around which to estimate the frequency and power.
            </param>
      <param name="equivalentNoiseBandWidth">
            The equivalent noise bandwidth (ENBW) of the selected window. Use this to divide a sum of individual power spectra of 
            the power spectrum or to compute the power in a given frequency span. The ENBW is usually obtained using the ScaledWindow class.
            </param>
      <param name="coherentGain">
            The inverse of the scaling factor that was applied to the window. The coherent gain is usually obtained using the ScaledWindow class.
            </param>
      <param name="df">
            The line frequency interval of the input spectrum. 
            </param>
      <param name="span">
            The number of frequency lines (bins) around the peak to be included in the peak frequency and power estimation. 
            </param>
      <param name="frequencyPeak">
            The estimated frequency of the peak in the input autoSpectrum (parameter).
            </param>
      <param name="powerPeak">
            The estimated power of the peak in the input autoSpectrum (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">autoSpectrum (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in autoSpectrum (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.SpectrumUnitConversion(System.Double[],NationalInstruments.Analysis.SpectralMeasurements.SpectrumType,NationalInstruments.Analysis.SpectralMeasurements.ScalingMode,NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits,System.Double,System.Double,System.Double,System.Text.StringBuilder)">
      <summary>
            Converts either the power, amplitude, or gain (amplitude ratio) spectrum to alternate formats including 
            Log (decibel and dbm) and spectral density.
            </summary>
      <param name="spectrum">
            The spectrum of a time-domain signal.
            </param>
      <param name="spectrumType">
            The spectrum type; a value from the SpectrumType enumeration.
            </param>
      <param name="scalingMode">
            The type of scaling used; a value from the ScalingMode enumeration.
            </param>
      <param name="displayUnit">
            The output unit for the spectrum (parameter); a value from the DisplayUnits enumeration.
            </param>
      <param name="df">The line frequency interval of the input spectrum (parameter). 
            </param>
      <param name="equivalentNoiseBandWidth">
            The equivalent noise bandwidth (ENBW) of the selected window. Use this to divide a sum of individual power spectra of the power 
            spectrum or to compute the power in a given frequency span. The ENBW is usually obtained using the ScaledWindow class.
            </param>
      <param name="coherentGain">
            The inverse of the scaling factor that was applied to the window. The coherent gain is usually obtained using the ScaledWindow class.
            </param>
      <param name="unit">
            The string that contains, on input, the base unit of the analyzed signal ("V" for for a voltage signal).
            On output, it contains the unit of the output converted spectrum.
            </param>
      <returns>
            The spectrum in the requested format.
            </returns>
      <exception cref="T:System.ArgumentNullException">spectrum (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in spectrum (parameter) is equal to zero.
            
            -or-
            
            		Invalid spectrumType (parameter) specified.
            
            -or-
            
            		Invalid scalingMode (parameter) specified.
            
            -or-
            
            		Invalid displayUnit (parameter) specified.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)">
      <summary>Calculates the fundamental and harmonic components (amplitude and frequency) present in the input auto power spectrum and computes the percent of total harmonic distortion (%THD) and the total harmonic distortion plus noise (%THD + Noise). 
            </summary>
      <param name="autoPowerSpectrum">
            The single-sided, auto power spectrum of the windowed signal. This array can be the output of a frequency-domain averaging process for improved harmonic estimation. 
            </param>
      <param name="frameSize">
            The number of samples in the time-domain signal array before it was passed to the AutoPowerSpectrum.
            This is typically the number of samples in one block of data from a data acquisition operation. If set to zero, the frame size used is set to twice the size of the autoPowerSpectrum (parameter) array. 
            </param>
      <param name="numberOfHarmonics">The number of harmonic components to approximate and use in the THD measurement. 
            </param>
      <param name="windowType">The window selection used for the ScaledWindow. 
            </param>
      <param name="samplingRate">
            The input sampling rate, in hertz.
            </param>
      <param name="fundamentalFrequency">
            An estimate of the fundamental frequency to use in the harmonic search and in the THD computation. If set to zero, 
            the frequency of the largest non-DC component found in autoPowerSpectrum (parameter) is used as the fundamental frequency. 
            </param>
      <param name="harmonicAmplitudes">
            The array of amplitudes of the fundamental component and its harmonics. These values are always positive 
            and are in units of volts rms if the input auto power spectrum values are given in volts rms squared.
            </param>
      <param name="harmonicFrequencies">
            The array of frequencies of the fundamental component and its harmonics. These values are in units of hertz if the input sampling rate is given in hertz. 
            </param>
      <param name="thdNoise">
            Upon return, contains the percent total harmonic distortion plus noise present in autoPowerSpectrum (parameter). 
            </param>
      <returns>
            The percent total harmonic distortion present in autoPowerSpectrum (parameter). 
            </returns>
      <exception cref="T:System.ArgumentNullException">autoPowerSpectrum (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in autoPowerSpectrum (parameter) is equal to zero.
            
            -or-
            samplingRate (parameter) is equal to zero.
            
            -or-
            fundamentalFrequency (parameter) is equal to zero.
            
            -or-
            
            		Invalid windowType (parameter) specified.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal">
      <summary>Generates a uniform noise signal, distributed uniformly between 0.0 and 1.0.  
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.ISignal">
      <summary>
            Represents an interface that must be implemented by classes that are to be used with the 
            SignalGenerator.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ISignal.Reset">
      <summary>
            Sets the SignalGenerator to an initial state. Classes that implement ISignal must override this method. 
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ISignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates the specified waveform. Classes that implement ISignal must override this method. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the desired waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.#ctor">
      <summary>
            Creates a uniform noise signal.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.#ctor(System.Int32)">
      <summary>
            Creates a uniform noise signal with the specified seed.
            </summary>
      <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.Reset">
      <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing a uniform noise waveform. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz. This method ignores this parameter.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the uniform noise waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.Seed">
      <summary>Gets the seed of the resulting uniform noise waveform.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.BalanceMethod">
      <summary>
            Specifies how to balance a matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.NeitherPermutedNorScaled">
      <summary>
            Matrix is neither permuted nor scaled.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.Permuted">
      <summary>
            Matrix is permuted but not scaled.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.Scaled">
      <summary>
            Matrix is scaled but not permuted.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.PermutedAndScaled">
      <summary>
            Matrix is both permuted and scaled.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.ScaledWindowType">
      <summary>
            Specifies the scaled window type to be used by the ScaledWindow class.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Rectangular">
      <summary>
            Applies a rectangular scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Hanning">
      <summary>
            Applies a Hanning scaled window. This is the default value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Hamming">
      <summary>
            Applies a Hamming scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanHarris">
      <summary>
            A Blackman-Harris scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.ExactBlackman">
      <summary>
            An exact Blackman scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Blackman">
      <summary>
            A Blackman scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.FlatTop">
      <summary>
            Applies a flat top window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanHarris4Term">
      <summary>
            A 4-term Blackman-Harris scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanHarris7Term">
      <summary>
            A 7-term Blackman-Harris scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.LowSidelobe">
      <summary>
            Applies a low side lobe scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanNuttall">
      <summary>
            A Blackman-Nuttall scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Triangle">
      <summary>
            Applies a triangle scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Kaiser">
      <summary>
            Applies a Kaiser scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.DolphChebyshev">
      <summary>
            A Dolph-Chebyshev scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Gaussian">
      <summary>
            Applies a Gaussian scaled window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter">
      <summary>
            Implements a windowed FIR highpass filter using the specified window type.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase">
      <summary>Implements the base class for all FIR filters.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.IFilter">
      <summary>
            Defines the set of functionality that a filter must implement.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilter.Reset">
      <summary>
            Clears the filter history in order to start a new data set.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilter.FilterData(System.Double[])">
      <summary>Filters the input data.
            </summary>
      <param name="inputData">
            The data to be filtered.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.   
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in  inputData (parameter) is equal to zero.  
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.#ctor(System.Double,System.Int32)">
      <summary>Creates an instance of FirFilterBase
            using the specified parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired length of the window FIR filter.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.Reset">
      <summary>
            Clears the filter history in order to start a new data set.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.FilterData(System.Double[])">
      <summary>Filters the input data.
            </summary>
      <param name="inputData">
            The data to be filtered.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in  inputData (parameter) is equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.GetCoefficients">
      <summary>Gets the computed output window FIR filter coefficients.
            </summary>
      <returns>
            The computed output window FIR filter coefficients.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.SetCoefficients(System.Double[])">
      <summary>Sets the computed output window FIR filter coefficients.
            </summary>
      <param name="coefficients">
            The computed output window FIR filter coefficients.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.Coefficients">
      <summary>Gets or sets the computed output window FIR filter coefficients.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.SamplingFrequency">
      <summary>
            Gets the sampling frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.NumberOfCoefficients">
      <summary>Gets or sets the desired length of the window FIR filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>Creates a WindowedFirHighpassFilter using the 
            specified filter parameters. Use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>Creates a WindowedFirHighpassFilter using the 
            specified filter parameters. Do not use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not 
            use this method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.WindowType">
      <summary>
            Gets the window type.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.WindowParameter">
      <summary>
            Gets the window parameter when using a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter">
      <summary>
            Implements an inverse Chebyshev bandstop filter.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase">
      <summary>Implements the base class for all IIR filters.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.#ctor(System.Int32,System.Double)">
      <summary>Creates an instance of IirFilterBase using the specified parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Reset">
      <summary>
            Clears the filter history in order to start a new data set.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.FilterData(System.Double[])">
      <summary>Filters the input data.</summary>
      <param name="inputData">
            The data to be filtered.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">input (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in  inputData (parameter) is equal to zero.  
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose">
      <summary>
            Releases all resources used by the derived filter object.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by IIR Filters and
            optionally releases the managed resources associated with this object.
            </summary>
      <param name="disposing">
            If true, releases both managed and unmanaged resources.  If false, only releases
            unmanaged resources.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.FilterOrder">
      <summary>
            Gets or sets the order of the filter.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.SamplingFrequency">
      <summary>
            Gets or sets the sampling frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates an InverseChebyshevBandstopFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex">
      <summary>
            Implements a class that filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.IFilterComplex">
      <summary>
            Defines the set of functionality that a ComplexDouble filter must implement.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilterComplex.Reset">
      <summary>
            Clears the filter history in order to start a new data set.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilterComplex.FilterData(NationalInstruments.ComplexDouble[])">
      <summary>Filters the input data.
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentException">
            The number of samples in  inputData (parameter) is equal to zero.  
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.#ctor(System.Double[])">
      <summary>
            Creates an FirDirectFilter that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients.
            </summary>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.#ctor(System.Double[],NationalInstruments.ComplexDouble[])">
      <summary>
            Creates an FirDirectFilter that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients and by using the specified initial conditions.
            </summary>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialXConditions (parameter) must be at least the size of forwardCoefficients (parameter)- 1.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.GetCurrentFilterConditions">
      <summary>
            Gets a copy of the current filter conditions.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.Reset">
      <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.Reset(System.Double[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients.
            </summary>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.Reset(System.Double[],NationalInstruments.ComplexDouble[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients and a new set of initial conditions.
            </summary>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialXConditions (parameter) is not at least the size of forwardCoefficients (parameter)- 1.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.FilterData(NationalInstruments.ComplexDouble[])">
      <summary>
            Filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter">
      <summary>Implements an Elliptic lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a EllipticLowpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.AnalysisWarningEventArgs">
      <summary>
            Provides data for the Warning event.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisWarningEventArgs.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the AnalysisWarningEventArgs class.
            </summary>
      <param name="errorCode">
            The positive error code of the analysis warning that has occurred.
            </param>
      <param name="message">
            The explanation of the warning that has occurred.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisWarningEventArgs.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.AnalysisWarningEventArgs.Message">
      <summary>
            Gets the explanation for the analysis warning that has occurred.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.AnalysisWarningEventArgs.ErrorCode">
      <summary>
            Gets the positive error code for the analysis warning that has occurred.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.PatternGeneration">
      <summary>
            Provides a set of static methods that are used to fill arrays with specific signal patterns.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Impulse(System.Int32,System.Double,System.Int32)">
      <summary>
            Generates an array containing an impulse pattern.  
            </summary>
      <param name="numberOfElements">
            The number of the elements in the desired impulse pattern.
            </param>
      <param name="amplitude">
            The amplitude of the desired impulse pattern.
            </param>
      <param name="delay">
            The number of elements before the peak of the impulse pattern. For example, if 
            delay (parameter) is 5, then the peak is located in the sixth element of the array. 
            </param>
      <returns>
            The generated impulse pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            
            -or
            
            	Invalid delay (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Pulse(System.Int32,System.Double,System.Int32,System.Int32)">
      <summary>
            Generates an array containing a pulse pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the desired pulse pattern.
            </param>
      <param name="amplitude">
            The amplitude of the pulse to generate.
            </param>
      <param name="delay">
            The number of elements before the pulse pattern begins. For example, if the delay is 5, the pulse pattern begins 
            at the sixth location of the array.
            </param>
      <param name="width">
            The number of elements over which the pulse
            	 amplitude (parameter) remains valid. The width (parameter) must be at least 1.
            </param>
      <returns>
            The desired pulse pattern.
            </returns>
      <exception cref="T:System.ArgumentException">
            		Sum of delay (parameter) and width (parameter) is greater than numberOfElements (parameter).
            
            -or
            numberOfElements (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Ramp(System.Int32,System.Double,System.Double)">
      <summary>Generates an array containing a ramp pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the desired ramp pattern.
            </param>
      <param name="initialValue">
            The base value of the ramp pattern to generate.
            </param>
      <param name="finalValue">
            The final value of the ramp pattern to generate. 
            </param>
      <returns>
            The generated ramp pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than two.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Chirp(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Generates an array containing a chirp pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the resulting chirp waveform.
            </param>
      <param name="amplitude">
            The amplitude of the resulting chirp waveform.
            </param>
      <param name="startFrequency">
            The beginning frequency of the resulting chirp signal, in cycles/sample.
            </param>
      <param name="endFrequency">
            The ending frequency of the resulting chirp signal, in cycles/sample.
            </param>
      <returns>
            The generated chirp pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Sinc(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Generates an array containing a sinc pattern. 
            </summary>
      <param name="numberOfElements">
            The number of elements in the desired sinc pattern.
            </param>
      <param name="amplitude">
            The amplitude of the sinc pattern.
            </param>
      <param name="delay">
            The delay value. delay (parameter) shifts the peak value of the sinc pattern to the index, where index = delay (parameter)/dt (parameter).
            </param>
      <param name="dt">
            The sampling interval.  It is inversely proportional to the width of the main lobe in the sinc pattern.
            </param>
      <returns>
            The generated sinc pattern.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">dt (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.GaussMonopulse(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Generates an array containing a Gaussian monopulse pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the resulting Gaussian monopulse pattern.
            </param>
      <param name="amplitude">
            The amplitude of the resulting Gaussian monopulse pattern.
            </param>
      <param name="delay">
            The number of elements before the peak of the resulting Gaussian monopulse pattern. For example, if 
            delay (parameter) is 5, then the peak is located in the sixth element of the array. 
            </param>
      <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
      <param name="centerFrequency">
            The center frequency of the resulting Gaussian monopulse pattern. This parameter must be positive.
            </param>
      <returns>
            The generated Gaussian monopulse pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            
            -or
            dt (parameter) is less than or equal to zero.
            
            -or
            centerFrequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.GaussModulatedSine(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Generates an array containing a Gaussian modulated sinusoidal pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the resulting Gaussian modulated sinusoidal pattern.
            </param>
      <param name="amplitude">
            The amplitude of the resulting Gaussian modulated sinusoidal pattern.
            </param>
      <param name="delay">
            The number of elements before the peak of the Gaussian modulated sinusoidal pattern. For example, if 
            delay (parameter) is 5, then the peak is located in the sixth element of the array. 
            </param>
      <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
      <param name="centerFrequency">
            The center frequency of the resulting Gaussian modulated sinusoidal pattern. 
            The bandwidth is measured at the given point (-attenuation dB) and the spectrum is 
            bandwidth (parameter)*fc (parameter).
            This parameter must be positive.
            </param>
      <param name="bandwidth">
            The bandwidth of the resulting Gaussian modulated sinusoidal pattern. This parameter must be positive.
            </param>
      <param name="attenuation">
            The attenuation at the given bandwidth (parameter) of the resulting Gaussian modulated sinusoidal pattern, in dB. 
            This parameter must be positive.
            </param>
      <returns>
            The generated Gaussian modulated sinusoidal pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            
            -or
            dt (parameter) is less than or equal to zero.
            
            -or
            centerFrequency (parameter) is less than or equal to zero.
            
            -or
            bandwidth (parameter) is less than or equal to zero.
            
            -or
            attenuation (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.PeriodicSinc(System.Int32,System.Double,System.Double,System.Double,System.Int32)">
      <summary>Generates an array containing a periodic sinc pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the resulting periodic sinc pattern.
            </param>
      <param name="amplitude">
            The amplitude of the resulting periodic sinc pattern.
            </param>
      <param name="delay">
            The number of elements before the peak of the resulting periodic sinc pattern. For example, if 
            delay (parameter) is 5, then the peak is located in the sixth element of the array. 
            </param>
      <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
      <param name="periodicSincCoefficient">
            The periodic sinc pattern coefficient. This parameter is the number of zeros between two adjacent peaks in the resulting periodic sinc pattern. This parameter must be positive.
            </param>
      <returns>
            The generated periodic sinc pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            
            -or
            dt (parameter) is less than or equal to zero.
            
            -or
            periodicSincCoefficient (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.UnsymmetricTriangle(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Generates an array containing an unsymmetric triangle pattern.  
            </summary>
      <param name="numberOfElements">
            The number of elements in the resulting unsymmetric triangle pattern.
            </param>
      <param name="amplitude">
            The amplitude of the resulting unsymmetric triangle pattern.
            </param>
      <param name="delay">
            The number of elements before the peak of the resulting unsymmetric triangle pattern. For example, if 
            delay (parameter) is 5, then the peak is located in the sixth element of the array. 
            </param>
      <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
      <param name="width">
            The width of the resulting unsymmetric triangle pattern. This parameter must be positive.
            </param>
      <param name="asymmetryCoefficient">
            The asymmetry coefficient that indicates the asymmetric character. This parameter must be between zero and one.
            </param>
      <returns>
            The generated unsymmetric triangle pattern.
            </returns>
      <exception cref="T:System.ArgumentException">numberOfElements (parameter) is less than or equal to zero.
            
            -or
            dt (parameter) is less than or equal to zero.
            
            -or
            width (parameter) is less than or equal to zero.
            
            -or
            asymmetryCoefficient (parameter) is either less than zero or greater than one.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Calculus">
      <summary>
            Provides a set of methods for integration. For differentiation, refer to Differentiate</summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Calculus.NumericIntegration(System.Double[],System.Double,NationalInstruments.Analysis.Math.IntegrationMethod)">
      <summary>
            Performs numeric integration on the input data.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="dt">
            The interval size, which represents the sampling step size used in obtaining data in inputData (parameter).
            </param>
      <param name="integrationMethod">
            One of the integration methods specified using IntegrationMethod.  
            </param>
      <returns>
            The result of the integration.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            Size of inputData (parameter) is invalid for the selected integrationMethod (parameter).
            
            -or-
            
            Invalid integrationMethod (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter">
      <summary>
            Implements a Kaiser window FIR lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
      <summary>Creates a KaiserWindowFirLowpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.</param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.Reset(System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.Beta">
      <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter">
      <summary>Implements a Chebyshev highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates a ChebyshevHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The filter cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Conversion.Volume">
      <summary>
            Represents a volume.  Use Volume to convert volumes
            between liters and U.S. gallons.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.FromLiters(System.Double)">
      <summary>
            Returns a Volume that represents the volume specified
            in liters.
            </summary>
      <param name="liters">
            The volume in liters.
            </param>
      <returns>
            A Volume that represents a volume of 
            liters (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.FromUSGallons(System.Double)">
      <summary>
            Returns a Volume that represents the volume specified
            in U.S. gallons.
            </summary>
      <param name="usGallons">
            The volume in U.S. gallons.
            </param>
      <returns>
            A Volume that represents a volume of 
            usGallons (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Plus">
      <summary>
            Returns this instance of Volume.
            </summary>
      <returns>
            This instance of Volume.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Returns the specified instance of Volume (a unary plus).
            </summary>
      <param name="v">
            A Volume.
            </param>
      <returns>v (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Negate">
      <summary>
            Returns a Volume whose value is the negated value of
            this instance.  
            </summary>
      <returns>
            A Volume whose value is the negated value of this
            instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Returns a Volume whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
      <param name="v">
            A Volume.
            </param>
      <returns>
            The negative of v (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Add(NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Adds a Volume to this instance and returns a new 
            Volume representing the sum.
            </summary>
      <param name="v">
            The Volume to add to this instance.
            </param>
      <returns>
            A Volume that represents the value of this instance
            plus the value of v (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Addition(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Adds two Volume instances.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>
            A Volume whose value is the sum of 
            v1 (parameter) and v2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Subtract(NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Subtracts a Volume from this instance and returns a new 
            Volume representing the difference.
            </summary>
      <param name="v">
            The Volume to subtract from this instance.
            </param>
      <returns>
            A Volume that represents the value of this instance
            minus the value of v (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Subtraction(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Subtracts one Volume from another.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>
            A Volume whose value is the result of 
            v1 (parameter) minus v2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Compare(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Compares two Volume values and returns an indication of
            their relative values.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>ValueCondition
            &lt;0
            v1 (parameter) is less than v2 (parameter)
            0
            v1 (parameter) is equal to v2 (parameter)
            &gt;0
            v1 (parameter) is greater than v2 (parameter)</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Equality(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Indicates if two Volume instances are equal.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if the values of v1 (parameter) and v2 (parameter)
            are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Inequality(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Indicates if two Volume instances are not equal.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if the values of v1 (parameter) and v2 (parameter)
            are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.CompareTo(System.Object)">
      <summary>
            Compares this instance with another instance of Volume.
            </summary>
      <param name="obj">
            Object to compare with this instance, or null.
            </param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            

ValueCondition
            Less than zero
            
            The instance is less than obj (parameter).
            
            Zero
            
            The instance is equal to obj (parameter).
            
            Greater than zero
            The instance is greater than obj (parameter).
            				

-or-

obj (parameter) is null.

</returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not a Volume.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Equals(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Returns a value indicating if two specified instances of 
            Volume are equal.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if v1 (parameter) and v2 (parameter) are equal;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Equals(NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Returns a value indicating if this instance is equal to the specified 
            Volume.
            </summary>
      <param name="v">
            A Volume to compare with this instance.
            </param>
      <returns>true if v (parameter) represents the same volume 
            as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this instance.
            </param>
      <returns>true if obj (parameter) is a 
            Volume that represents the same volume as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_LessThan(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Indicates if one Volume is less than another.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if v1 (parameter) is less than 
            v2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_GreaterThan(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Indicates if one Volume is greater than another.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if v1 (parameter) is greater than 
            v2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Indicates if one Volume is less than or 
            equal to another.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if v1 (parameter) is less than or equal to
            v2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
      <summary>
            Indicates if one Volume is greater than or
            equal to another.
            </summary>
      <param name="v1">
            A Volume.
            </param>
      <param name="v2">
            A Volume.
            </param>
      <returns>true if v1 (parameter) is greater than or equal
            to v2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String)">
      <summary>
            Converts the string representation of a volume to a Volume.
            </summary>
      <param name="s">
            A string containing the volume to convert.
            </param>
      <returns>
            A Volume representing the volume specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a volume with a specified culture-specific format to
            a Volume.
            </summary>
      <param name="s">
            A string containing the volume to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Volume representing the volume specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a volume with a specified style to
            a Volume.
            </summary>
      <param name="s">
            A string containing the volume to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <returns>
            A Volume representing the volume specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a volume with a specified style and culture-specific format to
            a Volume.
            </summary>
      <param name="s">
            A string containing the volume to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Volume representing the volume specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Volume@)">
      <summary>
            Converts the string representation of a volume with a specified style and culture-specific format to
            a Volume.
            </summary>
      <param name="s">
            A string containing the volume to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <param name="result">
            Upon return, contains the Volume representing the volume specified in s (parameter).
            If the return value is false, result (parameter) is a volume of 0 Liters.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString(System.String)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Volume.Liters">
      <summary>
            Gets the value of Volume in liters.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Volume.USGallons">
      <summary>
            Gets the value of Volume in U.S. gallons.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Volume.Zero">
      <summary>
            Represents a volume of zero.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.WindowType">
      <summary>
            Specifies the window type to be used.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.None">
      <summary>
            Applies no window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.Hanning">
      <summary>
            Applies a Hanning window. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.Hamming">
      <summary>
            Applies a Hamming window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.BlackmanHarris">
      <summary>
            Applies a Blackman-Harris window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.ExactBlackman">
      <summary>
            Applies an Exact Blackman window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.Blackman">
      <summary>
            Applies a Blackman window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.FlatTop">
      <summary>
            Applies a Flat Top window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.BlackmanHarris4Term">
      <summary>
            Applies a 4-term Blackman-Harris window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.BlackmanHarris7Term">
      <summary>
            Applies a 7-term Blackman-Harris window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Internal.EigenOutput">
      <summary>Specifies the output choice.  Choose to either compute only the eigenvalues or both the eigenvalues and the eigenvectors.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Internal.EigenOutput.EigenValues">
      <summary>
            Calculate eigenvalues only.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Internal.EigenOutput.EigenValuesAndVectors">
      <summary>
            Calculate eigenvalues and eigenvectors.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.EigenMatrixType">
      <summary>
            Specifies the type of input matrix for the EigenValueVector method.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.EigenMatrixType.General">
      <summary>
            Specifies a general input matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.EigenMatrixType.Hermitian">
      <summary>
            Specifies a Hermitian input matrix.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter">
      <summary>
            Implements a windowed FIR bandstop filter using the specified window type.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>Creates a WindowedFirBandstopFilter using the 
            specified filter parameters. Do not use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>Creates a WindowedFirBandstopFilter using the 
            specified filter parameters. Use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use 
            this method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.WindowType">
      <summary>
            Gets the window type.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.WindowParameter">
      <summary>
            Gets the window parameter when using a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter">
      <summary>
            Implements a class that filters the input sequence using the direct form IIR filter specified by the reverse coefficients and forward coefficients.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.#ctor(System.Double[],System.Double[])">
      <summary>
            Creates an IirDirectFilter that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients.
            </summary>
      <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.#ctor(System.Double[],System.Double[],System.Double[],System.Double[])">
      <summary>
            Creates an IirDirectFilter that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients, and using the specified initial conditions.
            </summary>
      <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the reverseCoefficients (parameter) array. 
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialYConditions (parameter) is not at least the size of reverseCoefficients (parameter)- 1.
            
            -or-
            
            The size of initialXConditions (parameter) is not at least the size of forwardCoefficients (parameter)- 1.
            

</exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.GetFilterConditions(System.Double[]@,System.Double[]@)">
      <summary>
            Gets the current filter conditions.
            </summary>
      <param name="finalYConditions">
            Gets the most recent outputs, which are used as the initial Y conditions for the next iteration. 
            </param>
      <param name="finalXConditions">
            Gets the most recent outputs, which are used as the initial X conditions for the next iteration.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.Reset">
      <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.Reset(System.Double[],System.Double[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients and forward coefficients.
            </summary>
      <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of the initial Y conditions when the filter was created is not at least the size of reverseCoefficients (parameter)- 1.
            
            -or-
            
            The size of the initial X conditions when the filter was created is not at least the size of forwardCoefficients (parameter)- 1.
            

</exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.Reset(System.Double[],System.Double[],System.Double[],System.Double[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients and forward coefficients, and a new set of initial conditions.
            </summary>
      <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the reverseCoefficients (parameter) array. 
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialYConditions (parameter) is not at least the size of reverseCoefficients (parameter)- 1.
            
            -or-
            
            The size of initialXConditions (parameter) is not at least the size of forwardCoefficients (parameter)- 1.
            

</exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.FilterData(System.Double[])">
      <summary>
            Filters the input sequence using the direct form IIR filter specified by the reverse coefficients and the forward coefficients.
            </summary>
      <param name="inputData">
            The data to be filtered.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.AnalysisErrorCode">
      <summary>
            Specifies the types of error codes that can be returned from the Analysis library.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.OutOfMemory">
      <summary>
            Specified operation does not have enough memory available.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesNotEqual">
      <summary>
            Specified input sequences are not the same size.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGTZero">
      <summary>
            Specified samples must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEZero">
      <summary>
            Specified samples must be greater than or equal to zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEOne">
      <summary>
            Specified samples must be greater than or equal to one.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGETwo">
      <summary>
            Specified samples must be greater than or equal to two.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEThree">
      <summary>
            Specified samples must be greater than or equal to three.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ArraySizeIncorrect">
      <summary>
            Specified array size is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ArraySizeNotPowerOfTwo">
      <summary>
            Specified array size is not a power of 2.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MaximumTransformSizeExceeded">
      <summary>
            Maximum transform size has been exceeded.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DutyCycleIncorrect">
      <summary>
            Specified duty cycle value is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberOfCyclesIncorrect">
      <summary>
            Number of cycles is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.WidthIncorrect">
      <summary>
            Specified width is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DelayWidthIncorrect">
      <summary>
            Sum of delay and width must be less than number of samples.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DTMustBeGEZero">
      <summary>
            Dt value must be greater than or equal to zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DTMustBeGTZero">
      <summary>
            Dt value must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IndexCannotBeLTSamples">
      <summary>
            Index cannot be less than the number of samples.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IndexLengthIncorrect">
      <summary>
            Index length is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.UpperMustBeGELower">
      <summary>
            Upper value must be greater than or equal to the lower value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NyquistConditionError">
      <summary>
            Specified cutoff frequency must be greater than zero and less than half the sampling rate.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.OrderMustBeGTZero">
      <summary>
            Order must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidDecimatingFactor">
      <summary>
            Specified decimating factor is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidBandSpecification">
      <summary>
            Specified band is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.RippleMustBeGTZero">
      <summary>
            Specified ripple must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.AttenuationMustBeGTZero">
      <summary>
            Specified attenuation must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.WidthMustBeGTZero">
      <summary>
            Specified width must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FinalValueMustBeGTZero">
      <summary>
            Specified final value must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.AttenuationMustBeGTRipple">
      <summary>
            Specified attenuation must be greater than the ripple amplitude.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.StepSizeIncorrect">
      <summary>
            Specified step size is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.LeakageCoefficientIncorrect">
      <summary>
            Specified leakage coefficient is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EquiRippleDesignIncorrect">
      <summary>
            Specified EquiRipple filter design is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FilterRankIncorrect">
      <summary>
            Specified filter rank is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberOfCoefficientMustBeOdd">
      <summary>
            Number of coefficients must be odd.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberOfCoefficientMustBeEven">
      <summary>
            Number of coefficients must be even.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.StandardDeviationMustBeGTZero">
      <summary>
            Specified standard deviation must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MixedSignsInArray">
      <summary>
            Specified matrix contains mixed signs.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SizeMustBeGTOrder">
      <summary>
            Specified array size must be greater than the order.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IntervalsMustBeGTZero">
      <summary>
            The number of intervals must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixMultiplicationFailed">
      <summary>
            Matrix multiplication failed.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NotSquareMatrix">
      <summary>
            Specified matrix is not a square matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixCannotBeSingular">
      <summary>
            Specified matrix cannot be singular. A singular matrix is a matrix that has no 
            inverse.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.LevelsOutOfRange">
      <summary>
            Specified levels are out of range.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FactorOutOfRange">
      <summary>
            Level of factor is outside the allowable range.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ObservationMissingInLevel">
      <summary>
            Specified level has a missing observation.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DataPointsTotalInvalid">
      <summary>
            The total number of data points is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.Overflow">
      <summary>
            Specified operation resulted in an overflow error.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DataUnbalanced">
      <summary>
            Data is unbalanced.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FixedEffectModelRequired">
      <summary>
            Random Effect model was requested when the Fixed Effect model is required.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InputValuesMustBeDistinct">
      <summary>
            The specified input values must be distinct.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.PoleAtRequestedValue">
      <summary>
            Interpolating method has a pole at the requested value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FirstColumnNotAllOnes">
      <summary>
            The first column in the specified matrix cannot be all ones.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidDegreesOfFreedom">
      <summary>
            Specified degrees if freedom is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IncorrectProbability">
      <summary>
            Specified probability must be between 0 and 1.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidProbability">
      <summary>
            Specified probability is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.CategoriesInvalid">
      <summary>
            Specified categories are invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ContingencyTableInvalid">
      <summary>
            Invalid number of categories or samples.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidBetaFunctionParameter">
      <summary>
            The specified beta method parameter is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidDimension">
      <summary>
            Specified dimension is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NegativeNumber">
      <summary>
            Negative number error.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DivideByZero">
      <summary>
             A divide by zero error has occurred.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidSelection">
      <summary>
            Specified selection is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MaxIterationsExceeded">
      <summary>
            Maximum iterations have been exceeded.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidPolynomial">
      <summary>
            Specified polynomial is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InternalMemoryStateInvalid">
      <summary>
            The internal memory state is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ZeroVector">
      <summary>
            Specified vector cannot have all zero elements.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidIirFilterInfo">
      <summary>
            Specified IIR filter information is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FundamentalFrequencyOrSamplingRateInvalid">
      <summary>
            Specified fundamental frequency or sampling rate is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixContainsInvalidDouble">
      <summary>
            The input arguments have at least one element that is either infinity, not a number (NaN), double maximum, or double minimum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEFour">
      <summary>
            The specified samples must be greater than or equal to four.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatricesMustHaveSameSize">
      <summary>
            The matrices must have the same size.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InputNotPositiveDefinite">
      <summary>
            The input to the Cholesky Decomposition was not positive definite.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.CannotComputeMatrixLogarithm">
      <summary>
            The logarithm of the input matrix cannot be computed.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EigenValuesTooClose">
      <summary>
            The eigenvalues cannot be reordered because some eigenvalues are too close.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ReorderingChangedEigenValues">
      <summary>
            Reordering eigenvalues changed some complex eigenvalues.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FilterBufferOverflow">
      <summary>
            The filter buffer has overflowed.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ResamplePointCannotBeCalculated">
      <summary>
            The resample point cannot be calculated with the signal behind that of input.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.BaseMustBeLTTop">
      <summary>
            Base must be less than top.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ShiftRangeInvalid">
      <summary>
            The specified shift range is invalid. The number of shifts must be less than the length of the shifted array.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.OrderMustBeGEZero">
      <summary>
            Order must be greater than or equal to zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberIsNegativeOrZero">
      <summary>
            Curve-fitting error. The number is negative or zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberIsZero">
      <summary>
            Curve-fitting error. The number is zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InternalLibraryError">
      <summary>
            An internal library error has occurred.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixIsRankDeficient">
      <summary>
            Specified matrix rank is deficient. The rank of a matrix is the maximum number of independent rows or columns. 
            A matrix of order n is rank deficient if it has a rank of less than n.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesGTZeroWarning">
      <summary>
            A warning that the number of samples must be greater than zero.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SingularMatrixWarning">
      <summary>
            A warning that the input matrix is singular.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NotSameSizeWarning">
      <summary>
            A warning that the input matrices or vectors do not have the same size.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ReorderNotPerformedWarning">
      <summary>
            A warning that the reorder procedure could not be performed.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InaccurateComputationWarning">
      <summary>
            A warning that the computation result might be inaccurate.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ArraySizeIncorrectWarning">
      <summary>
            A warning that the array size is incorrect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.StandardDeviationInvalidWarning">
      <summary>
            A warning that the input standard deviation is invalid.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EmptyPolynomialWarning">
      <summary>
            A warning that the input polynomial is empty.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits">
      <summary>
            Specifies the display unit for the output spectrum. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRms">
      <summary>
            Uses VoltsRms display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeak">
      <summary>
            Uses VoltsPeak display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsSquared">
      <summary>
            Uses VoltsRmsSquared display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakSquared">
      <summary>
            Uses VoltsPeakSquared display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsPerRootHZ">
      <summary>
            Uses VoltsRmsPerRootHZ display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakPerRootHZ">
      <summary>
            Uses VoltsPeakPerRootHZ display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsSquaredPerHZ">
      <summary>
            Uses VoltsRmsSquaredPerHZ display unit for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakSquaredPerHZ">
      <summary>
            Uses VoltsPeakSquaredPerHZ display unit for the output spectrum.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator">
      <summary>
            Generates a specified waveform composed of one or more component signals.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor">
      <summary>
            Creates a SignalGenerator.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64)">
      <summary>
            Creates a SignalGenerator with the 
            specified sampling rate and number of samples.
            </summary>
      <param name="samplingRate">
            The sampling rate of the signal, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to return on each call to Generate.
            </param>
      <exception cref="T:System.ArgumentException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,System.Double)">
      <summary>
            Creates a SignalGenerator with the 
            specified sampling rate, number of samples, and DC offset.
            </summary>
      <param name="samplingRate">
            The sampling rate of the signal, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to return on each call to Generate.
            </param>
      <param name="dcOffset">
            The DC offset of the signal.
            </param>
      <exception cref="T:System.ArgumentException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>
            Creates a SignalGenerator with the 
            specified sampling rate, number of samples, and signal.
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to return on each call to Generate.
            </param>
      <param name="signal">
            The signal to generate.
            </param>
      <exception cref="T:System.ArgumentException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
      <summary>
            Creates a SignalGenerator with the 
            specified sampling rate, number of samples, and signals.
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to return on each call to Generate.
            </param>
      <param name="signals">
            A collection of component signals from which to compose the generated signal.
            </param>
      <exception cref="T:System.ArgumentException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,System.Double,NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>
            Creates a SignalGenerator with the 
            specified sampling rate, number of samples, DC offset, and signal.
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to return on each call to Generate.
            </param>
      <param name="dcOffset">
            The DC offset of the signal.
            </param>
      <param name="signal">
            The signal to generate.
            </param>
      <exception cref="T:System.ArgumentException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,System.Double,NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
      <summary>
            Creates a SignalGenerator with the 
            specified sampling rate, number of samples, DC offset, and signals.
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to return on each call to Generate.
            </param>
      <param name="dcOffset">
            The DC offset of the signal.
            </param>
      <param name="signals">
            A collection of component signals from which to compose the generated signal. 
            </param>
      <exception cref="T:System.ArgumentException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Reset">
      <summary>
            Resets the phase of the signal to its initial phase.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate">
      <summary>
            Generates the selected signal which must be a type that implements ISignal.
            </summary>
      <returns>
            The generated waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultSamplingRate">
      <summary>
            Gets the default sampling rate of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultNumberOfSamples">
      <summary>
            Gets the default number of samples returned from each call to Generate.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultDCOffset">
      <summary>
            Gets the default DC offset of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.SamplingRate">
      <summary>
            Gets or sets the sampling rate, in hertz.
            </summary>
      <exception cref="T:System.ArgumentException">SamplingRate is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.NumberOfSamples">
      <summary>
            Gets or sets the number of samples in the waveform.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">NumberOfSamples is greater than MaxValue.
            </exception>
      <exception cref="T:System.ArgumentException">NumberOfSamples is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DCOffset">
      <summary>
            Gets or sets the DC offset of the waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals">
      <summary>
            Gets the collection of signals in the signal generator.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Monitoring.PeakDetector">
      <summary>
            Calculates the location, amplitude, and second derivatives of peaks or valleys in the input array.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.#ctor">
      <summary>Initializes a new instance of the PeakDetector class using
            default parameters.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.#ctor(System.Double)">
      <summary>Initializes a new instance of the PeakDetector class using
            the specified parameters.
            </summary>
      <param name="threshold">
            The threshold value that rejects peaks and valleys that are too small.   
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.#ctor(System.Double,System.Int32,NationalInstruments.Analysis.Monitoring.PeakPolarity)">
      <summary>Initializes a new instance of the PeakDetector class using
            the specified parameters.
            </summary>
      <param name="threshold">
            The threshold value that rejects peaks and valleys that are too small.   
            </param>
      <param name="width">
            The number of consecutive data points to be used in the quadratic least-squares fit. This value must be greater than or equal to 3.
            </param>
      <param name="peakPolarity">
            		Whether the method looks for peaks (positive-going bumps) or valleys (negative-going bumps) in the input signal. 
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) is less than three.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified peakPolarity (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Reset(System.Double,System.Int32,NationalInstruments.Analysis.Monitoring.PeakPolarity)">
      <summary>
            Sets the PeakDetector to an initial state ready to 
            receive the first or only block of a set of data.
            </summary>
      <param name="threshold">
            The threshold value that rejects peaks and valleys that are too small.   
            </param>
      <param name="width">
            The number of consecutive data points to be used in the quadratic least-squares fit. This value must be greater than or equal to 3.
            </param>
      <param name="peakPolarity">
            		Whether the method looks for peaks (positive-going bumps) or valleys (negative-going bumps) in the input signal. The settings for this control are 0 (peaks) and 1 (valleys). 
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified peakPolarity (parameter) is invalid.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Detect(System.Double[],System.Boolean,System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the location, amplitude, and second derivatives of peaks or valleys in the input array.
            </summary>
      <param name="signalIn">
            The data to be processed.
            </param>
      <param name="endOfData">
            The Boolean the specifies whether the input array being processed is the last block of data.  Set this input to true 
            if the current input array is the last data block being processed. Otherwise, set this input equal to false.  
            To  process only one block of data, set this input to true.
            </param>
      <param name="amplitudes">
            The array that contains the amplitudes of the peaks/valleys found in the current block of data.
            </param>
      <param name="locations">
            The array which contains the locations of the peaks/valleys found in the current block of data.
            Locations are reported in indices from the beginning of processing (the most recent call to 
            Detect since the last Reset).
            </param>
      <param name="secondDerivatives">
            The array which contains the second derivatives of the peaks/valleys found in the current block of data.
            </param>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            Internal memory state not initialized correctly.
            
            -or-
            
            Maximum number of iterations has been exceeded.
            </exception>
      <exception cref="T:System.ArgumentNullException">signalIn (parameter) is null.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose">
      <summary>
            Releases all resources used by the PeakDetector object.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the PeakDetector object and
            optionally releases the managed resources associated with this object.
            </summary>
      <param name="disposing">
            If true, releases both managed and unmanaged resources.  If false, only releases
            unmanaged resources.
            </param>
    </member>
    <member name="P:NationalInstruments.Analysis.Monitoring.PeakDetector.PeakPolarity">
      <summary>
            Gets a value indicating whether peaks or valleys are detected.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold">
      <summary>
            Gets the minimum amplitude for a peak or maximum amplitude for a valley. 
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width">
      <summary>
            Gets the minimum width used in the least-squares fit for detecting a peak or valley.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Statistics">
      <summary>
            Provides a set of methods that perform statistical operations on data.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Mean(System.Double[])">
      <summary>
            Computes the mean of the values in the input array.
            </summary>
      <param name="inputData">
            The input array. 
            </param>
      <returns>
            The average of the values in inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Moment(System.Double[],System.Int32)">
      <summary>Computes the moment about the mean of the specified order for the input array. 
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="order">
            The order of the moment about the mean to be computed. If this value less than 0, the mean is not computed.
            </param>
      <returns>
            The moment about the mean as specified by the order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            modeBase (parameter) is greater than modeTop (parameter).
            	</exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Median(System.Double[])">
      <summary>
            Calculates the median value of the input array by sorting the values of 
            the input array and selecting the middle element(s) of the sorted array. 
            </summary>
      <param name="inputData">
            The input array. 
            </param>
      <returns>
            The calculated median value of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Mode(System.Double[],System.Double,System.Double,System.Int32)">
      <summary>
            This method is obsolete. Use the overload of this method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Mode(System.Double[],System.Int32)">
      <summary>
            Finds the mode(s) of a list of numbers.
            </summary>
      <param name="inputData">
            The input data set.
            </param>
      <param name="intervals">
            The number of bins of the histogram. If intervals (parameter) &gt; 0, the method uses the 
            histogram algorithm to find the modes; otherwise, the method finds the exact modes of the input set. 
            Any two elements, a and b, from the input data set, are regarded as equal if 
            |a - b| Epsilon*|a|. 
            </param>
      <returns>
            The modes found.
             
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.RootMeanSquared(System.Double[])">
      <summary>Computes the root mean square (rms) of the input array.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <returns>
            The calculated root mean square value of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Histogram(System.Double[],System.Double,System.Double,System.Int32,System.Double[]@)">
      <summary>
            Calculates the histogram of the array. The histogram is the count of the number of elements that fall within a specified set of intervals.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="histogramBase">
            The lower bound of the range over which the histogram is computed.
            </param>
      <param name="histogramTop">
            The upper bound of the range over which the histogram is computed.
            </param>
      <param name="histogramIntervals">
            The number of elements in the histogram and in the  centerValues (parameter) output array.
            </param>
      <param name="centerValues">
            Upon return, contains the mid-point values of the intervals (bins) used to determine the histogram.
            </param>
      <returns>
            The discrete histogram of the input array, inputData (parameter). 
            </returns>
      <exception cref="T:System.ArgumentException">histogramBase (parameter) is greater than histogramTop (parameter).
            	
            -or-
            
            The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            
            The number of histogramIntervals (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.StandardDeviation(System.Double[])">
      <summary>Computes the standard deviation of the values in the input array.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <returns>
            The calculated standard deviation of the values in inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Variance(System.Double[])">
      <summary>Computes the variance of the input array.
            </summary>
      <param name="inputData">
            The input array whose variance is to be calculated.
            </param>
      <returns>
            The variance of the values in inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova1Way(System.Double[],System.Int32[],System.Int32)">
      <summary>Performs a one-way analysis of variance in the fixed-effect model.
            </summary>
      <param name="observations">
            The experimental observations.
            </param>
      <param name="levels">
            The level to which the corresponding observation belongs.
            </param>
      <param name="numberOfLevels">
            The total number of different levels that are assumed by the experimental factor.
            </param>
      <returns>
            The output of the one-way analysis of variance. This is specified using Anova1WayOutput.
            </returns>
      <exception cref="T:System.ArgumentNullException">observations (parameter) is null.
            
            -or-
            levels (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in observations (parameter) is equal to zero.
            	
            -or-
            levels (parameter) has missing observations (parameter).
            	
            -or-
            
            The number of samples in levels (parameter) is less than one or greater 
            than or equal to the number of elements in observations (parameter).
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Level of factor is outside the allowable range.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova2Way(System.Double[],System.Int32[],System.Int32[],System.Int32,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel)">
      <summary>Performs a two-way analysis of variance.
            </summary>
      <param name="observations">
            The experimental observations.
            </param>
      <param name="levelAData">
            The level of factor A to which the corresponding observation belongs.
            </param>
      <param name="levelBData">
            The level of factor B to which the corresponding observation belongs.
            </param>
      <param name="observationsPerCell">
            The number of observations per cell.
            </param>
      <param name="numberOfLevelsInA">
            The number of levels in factor A.
            </param>
      <param name="levelAEffect">
            The anova model used for factor A. This is a value from the AnovaModel enumeration.
            </param>
      <param name="numberOfLevelsInB">
            The number of levels in factor B.
            </param>
      <param name="levelBEffect">
            The anova model used for factor B. This is a value from the AnovaModel enumeration.
            </param>
      <returns>
            The output of the two-way analysis of variance. This is specified using Anova2WayOutput.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The random effect model was requested when the fixed effect model is required.  
            </exception>
      <exception cref="T:System.ArgumentNullException">observations (parameter) is null.
            
            -or-
            levelAData (parameter) is null.
            
            -or-
            levelBData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in levelAData (parameter) is less than or equal to one.
            	
            -or-
            
            		The number of samples in levelBData (parameter) is less than or equal to one.
            	
            -or-
            
            		The number of samples in observations (parameter) is equal to zero.
            	
            -or-
            
            		The input data is unbalanced.
            	
            -or-
            
            Random effect model was requested when the fixed effect model is required.
            	</exception>
      <exception cref="T:System.InvalidOperationException">
            Level of factor is outside the allowable range.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova3Way(System.Double[],System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel)">
      <summary>Performs a three-way analysis of variance.
            </summary>
      <param name="observations">
            The experimental observations.
            </param>
      <param name="levelAData">
            The level of factor A to which the corresponding observation belongs.
            </param>
      <param name="levelBData">
            The level of factor B to which the corresponding observation belongs.
            </param>
      <param name="levelCData">
            The level of factor C to which the corresponding observation belongs.
            </param>
      <param name="observationsPerCell">
            The total number of observations per cell.
            </param>
      <param name="numberOfLevelsInA">
            The number of levels in factor A.
            </param>
      <param name="levelAEffect">
            The anova model used for factor A. This is a value from the AnovaModel enumeration.
            </param>
      <param name="numberOfLevelsInB">
            The number of levels in factor B.
            </param>
      <param name="levelBEffect">
            The anova model used for factor B. This is a value from the AnovaModel enumeration.
            </param>
      <param name="numberOfLevelsInC">
            The number of levels in factor C.
            </param>
      <param name="levelCEffect">
            The anova model used for factor C. This is a value from the AnovaModel enumeration.
            </param>
      <returns>
            The output of the three-way analysis of variance. This is specified using Anova3WayOutput.
            </returns>
      <exception cref="T:System.ArgumentNullException">observations (parameter) is null.
            
            -or-
            levelAData (parameter) is null.
            
            -or-
            levelBData (parameter) is null.
            
            -or-
            levelCData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in levelAData (parameter) is less than or equal to one.
            	
            -or-
            
            		The number of samples in levelBData (parameter) is less than or equal to one.
            	
            -or-
            
            		The number of samples in levelCData (parameter) is less than or equal to one.
            	
            -or-
            
            		The number of samples in observations (parameter) is equal to zero.
            	
            -or-
            
            The total number of data points is invalid.
            	
            -or-
            
            		The input data is unbalanced.
            	</exception>
      <exception cref="T:System.InvalidOperationException">
            Level of factor is outside the allowable range.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput">
      <summary>
            Returns the output of the one-way analysis of variance.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.SumOfSquaresF">
      <summary>
            Gets the sum of squares due to the factor.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.SumOfSquaresRF">
      <summary>
            Gets the sum of squares due to the random fluctuation.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.TotalSumOfSquares">
      <summary>
            Gets the total sum of squares.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.MeanSquareErrorF">
      <summary>
            Gets the mean square error due to the factor.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.MeanSquareErrorRF">
      <summary>
            Gets the mean square error due to the random fluctuation.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.Significance">
      <summary>
            Gets the significance.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.ResultFValue">
      <summary>
            Gets the resulting FValue.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput">
      <summary>
            Returns the output of the two-way analysis of variance.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SignificanceA">
      <summary>
            Gets the level of significance associated with factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SignificanceB">
      <summary>
            Gets the level of significance associated with factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SignificanceAB">
      <summary>
            Gets the level of significance associated with factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresA">
      <summary>
            Gets the sum of squares due to the factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresB">
      <summary>
            Gets the sum of squares due to the factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresAB">
      <summary>
            Gets the sum of squares due to the factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresError">
      <summary>
            Gets the sum of squares error.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomA">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomB">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomAB">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomError">
      <summary>
            Gets the degrees of freedom of the sum of squares error.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareA">
      <summary>
            Gets the mean square due to factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareB">
      <summary>
            Gets the mean square due to factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareAB">
      <summary>
            Gets the mean square due to factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareError">
      <summary>
            Gets the mean square error.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.FValueA">
      <summary>
            Gets the resulting FValue due to factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.FValueB">
      <summary>
            Gets the resulting FValue due to factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.FValueAB">
      <summary>
            Gets the resulting FValue due to factor AB.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput">
      <summary>
            Returns the output of the three-way analysis of variance.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceA">
      <summary>
            Gets the level of significance associated with factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceB">
      <summary>
            Gets the level of significance associated with factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceC">
      <summary>
            Gets the level of significance associated with factor C.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceAB">
      <summary>
            Gets the level of significance associated with factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceAC">
      <summary>
            Gets the level of significance associated with factor AC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceBC">
      <summary>
            Gets the level of significance associated with factor BC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceABC">
      <summary>
            Gets the level of significance associated with factor ABC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresA">
      <summary>
            Gets the sum of squares due to the factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresB">
      <summary>
            Gets the sum of squares due to the factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresC">
      <summary>
            Gets the sum of squares due to the factor C.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresAB">
      <summary>
            Gets the sum of squares due to the factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresAC">
      <summary>
            Gets the sum of squares due to the factor AC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresBC">
      <summary>
            Gets the sum of squares due to the factor BC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresABC">
      <summary>
            Gets the sum of squares due to the factor ABC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresError">
      <summary>
            Gets the sum of squares error.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomA">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomB">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomC">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor C.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomAB">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomAC">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor AC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomBC">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor BC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomABC">
      <summary>
            Gets the degrees of freedom of the sum of squares due to factor ABC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomError">
      <summary>
            Gets the degrees of freedom of the sum of squares error of factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareA">
      <summary>
            Gets the mean square due to factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareB">
      <summary>
            Gets the mean square due to factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareC">
      <summary>
            Gets the mean square due to factor C.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareAB">
      <summary>
            Gets the mean square due to factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareAC">
      <summary>
            Gets the mean square due to factor AC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareBC">
      <summary>
            Gets the mean square due to factor BC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareABC">
      <summary>
            Gets the mean square due to factor ABC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareError">
      <summary>
            Gets the mean square error.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueA">
      <summary>
            Gets the resulting FValue due to factor A.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueB">
      <summary>
            Gets the resulting FValue due to factor B.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueC">
      <summary>
            Gets the resulting FValue due to factor C.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueAB">
      <summary>
            Gets the resulting FValue due to factor AB.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueAC">
      <summary>
            Gets the resulting FValue due to factor AC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueBC">
      <summary>
            Gets the resulting FValue due to factor BC.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueABC">
      <summary>
            Gets the resulting FValue due to factor ABC.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Probability">
      <summary>
            Provides a set of methods that calculate error functions, probability distribution functions 
            and their inverses, and rate contingency tables.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.ContingencyTableAnalysis(System.Int32[0:,0:],System.Double@,System.Double@)">
      <summary>
            Performs a Contingency Table analysis.
            </summary>
      <param name="contingencyTable">
            An S-by-K matrix where S is the number of random samples, and K is the number of categories. 
            </param>
      <param name="x">
            The value at which to interpolate a corresponding y value.
            </param>
      <param name="probability">
            The one-sided probability that the hypothesis described in contingencyTable (parameter) is true. 
            </param>
      <exception cref="T:System.ArgumentNullException">contingencyTable (parameter)  is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in contingencyTable (parameter) is equal to zero.
            
            -or-
            contingencyTable (parameter) has an invalid number of categories or samples.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.ComplementaryErrorFunction(System.Double)">
      <summary>
            Evaluates the complementary error function.
            </summary>
      <param name="x">
            The input value at which the ComplementaryErrorFunction is to be evaluated.
            </param>
      <returns>
            The value of the complementary error function at x (parameter).
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.ErrorFunction(System.Double)">
      <summary>
            Evaluates the error function at the input value.
            </summary>
      <param name="x">
            The input value.
            </param>
      <returns>
            The value of the error function at x (parameter).
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.InverseFDistribution(System.Double,System.Int32,System.Int32)">
      <summary>
            Calculates the value that yields a given probability using an F distribution.
            </summary>
      <param name="probability">
            The input probability value.
            </param>
      <param name="nDegreesOfFreedom">
            The first degrees of freedom for the F distribution.
            </param>
      <param name="mDegreesOfFreedom">
            The second degrees of freedom for the F distribution.
            </param>
      <returns>
            The value that yields the probability (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">probability (parameter) is not between zero and one.
            
            -or-
            ndegreesOfFreedom (parameter) is less than or equal to zero.
            
            -or-
            mdegreesOfFreedom (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.InverseTDistribution(System.Double,System.Int32)">
      <summary>
            Calculates the value that yields a given probability using a T distribution.
            </summary>
      <param name="probability">
            The resultant probability.
            </param>
      <param name="degreesOfFreedom">
            The degrees of freedom of the T distribution.
            </param>
      <returns>
            The value that yields the probability (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">probability (parameter) is not between zero and one.
            
            -or-
            degreesOfFreedom (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.InverseNormalDistribution(System.Double)">
      <summary>
            Calculates the value that yields a given probability using a Normal distribution.
            </summary>
      <param name="probability">
            The input probability value.
            </param>
      <returns>
            The value that yields probability (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">probability (parameter) is not between zero and one.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.InverseChiSquareDistribution(System.Double,System.Int32)">
      <summary>
            Calculates the value that yields a given probability using a chi-square distribution.
            </summary>
      <param name="probability">
            The input probability value.
            </param>
      <param name="degreesOfFreedom">
            The degrees of freedom of the chi-square distribution.
            </param>
      <returns>
            The value that yields probability (parameter).
            </returns>
      <exception cref="T:System.ArgumentException">probability (parameter) is not between zero and one.
            
            -or-
            degreesOfFreedom (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.ChiSquareDistribution(System.Double,System.Int32)">
      <summary>
            Calculates probability using a chi-squared distribution.
            </summary>
      <param name="x">
            The point to which the probability is calculated.
            </param>
      <param name="degreesOfFreedom">
            Degrees of freedom of the distribution.
            </param>
      <returns>
            The computed probability.
            </returns>
      <exception cref="T:System.ArgumentException">degreesOfFreedom (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.FDistribution(System.Double,System.Int32,System.Int32)">
      <summary>
            Calculates probability using an F distribution.
            </summary>
      <param name="x">
            The point to which the probability is calculated.
            </param>
      <param name="nDegreesOfFreedom">
            Degrees of freedom numerator.
            </param>
      <param name="mDegreesOfFreedom">
            Degrees of freedom denominator (or degrees of freedom error).
            </param>
      <returns>
            The computed probability.
            </returns>
      <exception cref="T:System.ArgumentException">ndegreesOfFreedom (parameter) is less than or equal to zero.
            
            -or-
            mdegreesOfFreedom (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.NormalDistribution(System.Double)">
      <summary>
            Calculates probability using a Normal distribution.
            </summary>
      <param name="x">
            The point to which the probability is calculated.
            </param>
      <returns>
            The computed probability.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Probability.TDistribution(System.Double,System.Int32)">
      <summary>
            Calculates probability using a T distribution.
            </summary>
      <param name="x">
            The point to which the probability is calculated.
            </param>
      <param name="degreesOfFreedom">
            Degrees of freedom of the distribution.
            </param>
      <returns>
            The computed probability.
            </returns>
      <exception cref="T:System.ArgumentException">degreesOfFreedom (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Internal.ExceptionBuilder.TranslateAnalysisException(NationalInstruments.Analysis.AnalysisException)">
      <summary>
                Translates an Analysis exception to a standard .NET exception (i.e. 
                InvalidArgumentException), if the translation is appropriate.
            </summary>
      <param name="exp">
                AnalysisException to translate
            </param>
      <returns>
                The AnalysisException exp, or a new standard .NET exception with exp set as the
                inner exception.
            </returns>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter">
      <summary>Implements an inverse Chebyshev bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates an InverseChebyshevBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.AnalysisException">
      <summary>
            Represents an error code received from the internal Analysis library.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor">
      <summary>
            Initializes a new instance of the AnalysisException  class.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the AnalysisException  class using the
            given error message.
            </summary>
      <param name="message">
            Error message associated with this exception.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String,NationalInstruments.Analysis.AnalysisErrorCode)">
      <summary>
            Initializes a new instance of the AnalysisException class with the 
            given error message and Analysis library error code.
            </summary>
      <param name="message">
            Error message associated with this exception.
            </param>
      <param name="errorCode">
            Analysis library error code that caused this exception to be thrown.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the AnalysisException  class using the
            given error message and inner exception.
            </summary>
      <param name="message">
            Error message associated with this exception.
            </param>
      <param name="inner">
            Inner exception that caused this exception to be thrown.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String,System.Exception,NationalInstruments.Analysis.AnalysisErrorCode)">
      <summary>
            Initializes a new instance of the AnalysisException class with the 
            given error message, inner exception, and Analysis library error code.
            </summary>
      <param name="message">
            Error message associated with this exception.
            </param>
      <param name="inner">
            Inner exception that caused this exception to be thrown.
            </param>
      <param name="errorCode">
            Analysis library error code that caused this exception to be thrown.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the AnalysisException object using serialized data.
            </summary>
      <param name="info">
            Object that holds the serialized object data.
            </param>
      <param name="context">
            Contextual information about the source or destination.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.AnalysisException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the SerializationInfo object with information about the exception.
            </summary>
      <param name="info">
            Object that holds the serialized object data.
            </param>
      <param name="context">
            Contextual information about the source or destination.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.AnalysisException.ErrorCode">
      <summary>
            Gets a code that indicates what caused the exception.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation">
      <summary>
            Finds the single tone with the highest amplitude in a signal, or searches 
            a specified frequency range in the signal.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.#ctor(System.Double[],System.Double,System.Double,System.Double)">
      <summary>
            Constructs a new SingleToneInformation  object and computes the single tone
            parameters for the provided signal, searching only within the specified 
            frequency range.
            </summary>
      <param name="signal">A time-domain signal.</param>
      <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal were acquired or generated.</param>
      <param name="approximateFrequency">The center frequency used in the 
            frequency domain search for the single sine tone.</param>
      <param name="searchWidthInPercent">The width, as a percentage of the 
            sampling frequency, for the frequency domain search for the single sine 
            frequency.
            </param>
      <exception cref="T:System.ArgumentNullException">signal (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                   The number of samples in signal (parameter) is less than six.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                      The number of samples in signal (parameter) is less than six.
            
            -or-
            samplingFrequency (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.#ctor(System.Double[],System.Double)">
      <summary>
            Constructs a new SingleToneInformation object and computes the single tone
            parameters of the signal with the highest amplitude in the provided signal.
            </summary>
      <param name="signal">A time-domain signal.</param>
      <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
      <exception cref="T:System.ArgumentNullException">signal (parameter) is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                      The number of samples in signal (parameter) is less than six.
            
            -or-
            samplingFrequency (parameter) is less than or equal to zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetInputSignal">
      <summary>
            Gets a copy of the input signal.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetInputSignalSpectrum">
      <summary>
            Gets a copy of the Hanning-windowed spectrum of the input signal in decibels.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetDetectedSignal">
      <summary>
            Gets a copy of the detected single tone.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetDetectedSignalSpectrum">
      <summary>
            Gets a copy of the Hanning-windowed spectrum of the detected single tone in decibels.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetResidualSignal">
      <summary>
            Gets a copy of the difference between the input signal and detected single sine tone.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetResidualSignalSpectrum">
      <summary>
            Gets a copy of the Hanning-windowed spectrum of the difference between the input signal
            and the detected single sine tone in decibels.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.Amplitude">
      <summary>
            Gets the single tone amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.Frequency">
      <summary>
            Gets the single tone frequency in Hz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.Phase">
      <summary>
            Gets the single tone phase in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.SpectrumFrequencyIncrement">
      <summary>
            Gets the size of the frequency bins in the output Fourier transforms.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.SignalTimeIncrement">
      <summary>
            Gets the time elapsed between points in the time-domain signal in seconds.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.SizeOption">
      <summary>
            Specifies the size option for the SvdFactorization  
            and QRFactorization methods.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.SizeOption.Full">
      <summary>
            The full size option for the SvdFactorization 
            and QRFactorization methods. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.SizeOption.Economy">
      <summary>
            The economy size option for the SvdFactorization, and QRFactorization methods.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.EigenVectorSide">
      <summary>
            Specifies the type of generalized eigenvectors of the matrix pair (A,B).
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.EigenVectorSide.Right">
      <summary>
            The right generalized eigenvectors of matrix pair (A,B).
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.EigenVectorSide.Left">
      <summary>
            The left generalized eigenvectors of matrix pair (A,B).
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.SymmetricWindow">
      <summary>
            Applies a symmetric window to the time-domain signal.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateRectangularWindow">
      <summary>
            Initializes a new instance of a Rectangular symmetric window.
            </summary>
      <returns>
            The Rectangular symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateHanningWindow">
      <summary>
            Initializes a new instance of a Hanning symmetric window.
            </summary>
      <returns>
            The Hanning symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateHammingWindow">
      <summary>
            Initializes a new instance of a Hamming symmetric window.
            </summary>
      <returns>
            The Hamming symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanHarrisWindow">
      <summary>
            Initializes a new instance of a Blackman-Harris symmetric window.
            </summary>
      <returns>
            The Blackman-Harris symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateExactBlackmanWindow">
      <summary>
            Initializes a new instance of an exact Blackman symmetric window.
            </summary>
      <returns>
            The exact Blackman symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanWindow">
      <summary>
            Initializes a new instance of a Blackman symmetric window.
            </summary>
      <returns>
            The Blackman symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateFlatTopWindow">
      <summary>
            Initializes a new instance of a flat top symmetric window.
            </summary>
      <returns>
            The flat top symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanHarris4TermWindow">
      <summary>
            Initializes a new instance of a 4-term Blackman-Harris symmetric window.
            </summary>
      <returns>
            The 4-term Blackman-Harris symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanHarris7TermWindow">
      <summary>
            Initializes a new instance of a 7-term Blackman-Harris symmetric window.
            </summary>
      <returns>
            The 7-term Blackman-Harris symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateLowSideLobeWindow">
      <summary>
            Initializes a new instance of a low side lobe symmetric window.
            </summary>
      <returns>
            The low side lobe symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanNuttallWindow">
      <summary>
            Initializes a new instance of a Blackman-Nuttall symmetric window.
            </summary>
      <returns>
            The Blackman-Nuttall symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateTriangleWindow">
      <summary>
            Initializes a new instance of a triangle symmetric window.
            </summary>
      <returns>
            The triangle symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateKaiserWindow">
      <summary>
            Initializes a new instance of a Kaiser symmetric window using a default value of beta.
            </summary>
      <returns>
            The Kaiser symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateKaiserWindow(System.Double)">
      <summary>
            Initializes a new instance of a Kaiser symmetric window.
            </summary>
      <param name="beta">
            The beta parameter for the Kaiser window. beta (parameter) is proportional to the side lobe attenuation, such that, 
            the larger beta is, the greater the side lobe attenuation. 
            </param>
      <returns>
            The Kaiser symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateDolphChebyshevWindow">
      <summary>
            Initializes a new instance of a Dolph-Chebyshev symmetric window using a default value of the main lobe-to-side lobe ratio.
            </summary>
      <returns>
            The Dolph-Chebyshev symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateDolphChebyshevWindow(System.Double)">
      <summary>
            Initializes a new instance of a Dolph-Chebyshev symmetric window.
            </summary>
      <param name="mainLobeToSideLobeRatio">
            The ratio of the main lobe to the side lobe, in decibels.
            </param>
      <returns>
            The Dolph-Chebyshev symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateGaussianWindow">
      <summary>
            Initializes a new instance of a Gaussian symmetric window using a default value for standard deviation.
            </summary>
      <returns>
            The Gaussian symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateGaussianWindow(System.Double)">
      <summary>
            Initializes a new instance of a Gaussian symmetric window.
            </summary>
      <param name="standardDeviation">
            The standard deviation for the Gaussian window.
            </param>
      <returns>
            The Gaussian symmetric window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.Apply(System.Double[])">
      <summary>
            Applies a symmetric window to the time-domain signal.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.WindowType">
      <summary>
            Gets or sets the type of symmetric window that was created.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.Beta">
      <summary>
            Gets or sets the beta (shape) used by the symmetric CreateKaiserWindow method.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.MainLobeToSideLobeRatio">
      <summary>
            Gets or sets the main lobe-to-side lobe ratio used by the 
            symmetric CreateDolphChebyshevWindow method.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.StandardDeviation">
      <summary>
            Gets or sets the standard deviation used by the symmetric CreateGaussianWindow method.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter">
      <summary>Implements a Chebyshev lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates a ChebyshevLowpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter">
      <summary>Implements a Chebyshev bandstop filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes an instance of the ChebyshevBandstopFilter using the 
            specified input parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency expressed in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency expressed in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency expressed in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple expressed in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Resets the internal filter state information and reallocates a new internal filter structure based on the specified parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.LowerCutoffFrequency">
      <summary>Specifies the lower cutoff frequency expressed in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.UpperCutoffFrequency">
      <summary>Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter">
      <summary>Implements a Bessel lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter.#ctor(System.Int32,System.Double,System.Double)">
      <summary>Creates a BesselLowpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter.Reset(System.Int32,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.BestFitAlgorithm">
      <summary>
            Specifies the algorithm to be used in solving the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Svd">
      <summary>
            Uses the Singular Value Decomposition (SVD) algorithm to solve the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Givens">
      <summary>
            Uses the Givens algorithm to solve the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Givens2">
      <summary>
            Uses the Givens2 algorithm to solve the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Householder">
      <summary>
            Uses the Householder algorithm to solve the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.LUDecomposition">
      <summary>
            Uses LU Decomposition to solve the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Cholesky">
      <summary>
            Uses the Cholesky algorithm to solve the multiple linear 
            regression model.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.ScaledWindow">
      <summary>
            Applies a scaled window to the time-domain signal and outputs window constants for further analysis.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.#ctor">
      <summary>
            This member is obsolete. Use one of the factory methods to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.#ctor(NationalInstruments.Analysis.Dsp.ScaledWindowType)">
      <summary>
            This member is obsolete. Use one of the factory methods to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateRectangularWindow">
      <summary>
            Initializes a new instance of a rectangular window.
            </summary>
      <returns>
            The rectangular scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateHanningWindow">
      <summary>
            Initializes a new instance of a Hanning scaled window.
            </summary>
      <returns>
            The Hanning scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateHammingWindow">
      <summary>
            Initializes a new instance of a Hamming scaled window.
            </summary>
      <returns>
            The Hamming scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanHarrisWindow">
      <summary>
            Initializes a new instance of a Blackman-Harris scaled window.
            </summary>
      <returns>
            The Blackman-Harris scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateExactBlackmanWindow">
      <summary>
            Initializes a new instance of an exact Blackman scaled window.
            </summary>
      <returns>
            The exact Blackman scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanWindow">
      <summary>
            Initializes a new instance of a Blackman scaled window.
            </summary>
      <returns>
            The Blackman scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateFlatTopWindow">
      <summary>
            Initializes a new instance of a flat top scaled window.
            </summary>
      <returns>
            The flat top scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanHarris4TermWindow">
      <summary>
            Initializes a new instance of a 4-term Blackman-Harris scaled window.
            </summary>
      <returns>
            The 4-term Blackman-Harris scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanHarris7TermWindow">
      <summary>
            Initializes a new instance of a 7-term Blackman-Harris scaled window.
            </summary>
      <returns>
            The 7-term Blackman-Harris scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateLowSideLobeWindow">
      <summary>
            Initializes a new instance of a low side lobe scaled window.
            </summary>
      <returns>
            The low side lobe scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanNuttallWindow">
      <summary>
            Initializes a new instance of a Blackman-Nuttall scaled window.
            </summary>
      <returns>
            The Blackman-Nuttall scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateTriangleWindow">
      <summary>
            Initializes a new instance of a triangle scaled window.
            </summary>
      <returns>
            The triangle scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateKaiserWindow">
      <summary>
            Initializes a new instance of a Kaiser scaled window using a default beta value.
            </summary>
      <returns>
            The Kaiser scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateKaiserWindow(System.Double)">
      <summary>
            Initializes a new instance of a Kaiser scaled window.
            </summary>
      <param name="beta">
            The beta parameter for the Kaiser window. beta (parameter) is proportional to the side lobe attenuation, such 
            that, the larger beta is, the greater the side lobe attenuation. 
            </param>
      <returns>
            The Kaiser scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateDolphChebyshevWindow">
      <summary>
            Initializes a new instance of a Dolph-Chebyshev scaled window using a default value of the main lobe-to-side lobe ratio.
            </summary>
      <returns>
            The Dolph-Chebyshev scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateDolphChebyshevWindow(System.Double)">
      <summary>
            Initializes a new instance of a Dolph-Chebyshev scaled window.
            </summary>
      <param name="mainLobeToSideLobeRatio">
            The ratio of the main lobe to the side lobe, in decibels.
            </param>
      <returns>
            The Dolph-Chebyshev scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateGaussianWindow">
      <summary>
            Initializes a new instance of a Gaussian scaled window using a default value for standard deviation.
            </summary>
      <returns>
            The Gaussian scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateGaussianWindow(System.Double)">
      <summary>
            Initializes a new instance of a Gaussian scaled window.
            </summary>
      <param name="standardDeviation">
            The standard deviation for the Gaussian window.
            </param>
      <returns>
            The Gaussian scaled window.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(System.Double[])">
      <summary>
            Applies a scaled window to the time-domain signal.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(System.Double[],System.Double@,System.Double@)">
      <summary>
            Applies a scaled window to the time-domain signal and outputs window constants for further analysis.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <param name="equivalentNoiseBandwidth">
            Upon return, contains the equivalent noise bandwidth (ENBW) of the selected window. Use this value to divide a sum of individual power spectra of the power spectrum or to compute the power in a given frequency span. 
            </param>
      <param name="coherentGain">
            Upon return, contains the inverse of the scaling factor applied to the window. Use this value to normalize peak signal gains to that of the rectangular window.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.WindowType">
      <summary>
            Gets or sets the type of scaled window that was created.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.CoherentGain">
      <summary>
            Gets the coherent gain, which is the inverse of the scaling factor applied to the window. 
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.EquivalentNoiseBandwidth">
      <summary>
            Gets the equivalent noise bandwidth (ENBW) of the selected window. 
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.Beta">
      <summary>
            Gets or sets the beta (shape) used by the scaled CreateKaiserWindow method.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.MainLobeToSideLobeRatio">
      <summary>
            Gets or sets the main lobe-to-side lobe ratio used by the scaled CreateDolphChebyshevWindow method.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.StandardDeviation">
      <summary>
            Gets or sets the standard deviation used by the scaled CreateGaussianWindow method.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex">
      <summary>
            Implements a class that filters the input sequence using the direct form IIR filter specified by the reverse coefficients and forward coefficients.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.#ctor(System.Double[],System.Double[])">
      <summary>
            Creates an IirDirectFilter that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients.
            </summary>
      <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.#ctor(System.Double[],System.Double[],NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
      <summary>
            Creates an IirDirectFilter that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients and by using the specified initial conditions.
            </summary>
      <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the reverseCoefficients (parameter) array. 
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialYConditions (parameter) must be at least the size of reverseCoefficients (parameter)- 1.
            
            -or-
            
            The size of initialXConditions (parameter) must be at least the size of forwardCoefficients (parameter)- 1.
            

</exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.GetFilterConditions(NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[]@)">
      <summary>
            Gets the current filter conditions.
            </summary>
      <param name="finalYConditions">
            Gets the most recent outputs, which are used as the initial Y conditions for the next iteration. 
            </param>
      <param name="finalXConditions">
            Gets the most recent inputs, which are used as the initial X conditions for the next iteration.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.Reset">
      <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.Reset(System.Double[],System.Double[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients and forward coefficients.
            </summary>
      <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of the initial Y conditions when the filter is created must be at least the size of reverseCoefficients (parameter)- 1.
            
            -or-
            
            The size of the initial X conditions when the filter is created must be at least the size of forwardCoefficients (parameter)- 1.
            

</exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.Reset(System.Double[],System.Double[],NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients, the new forward coefficients, and a new set of initial conditions.
            </summary>
      <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the reverseCoefficients (parameter) array. 
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">reverseCoefficients (parameter) is null. 
            
            -or-
            forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialYConditions (parameter) must be at least the size of reverseCoefficients (parameter)- 1.
            
            -or-
            
            The size of initialXConditions (parameter) must be at least the size of forwardCoefficients (parameter)- 1.
            

</exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.FilterData(NationalInstruments.ComplexDouble[])">
      <summary>
            Filters the input sequence using the direct form IIR filter specified by the reverse coefficients and the forward coefficients.
            </summary>
      <param name="inputData">
            The data to be filtered.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter">
      <summary>Implements an EquiRipple bandstop filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates an EquiRippleBandstopFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerPassbandFrequency">
            The lower stopband frequency, in hertz. The lower passband is [0, lowerPassbandFrequency (parameter)].
            </param>
      <param name="lowerStopbandFrequency">
            The upper stopband frequency, in hertz. The stopband is [lowerStopbandFrequency (parameter), upperStopbandFrequency (parameter)].
            </param>
      <param name="upperStopbandFrequency">
            The lower passband frequency, in hertz. The stopband is [lowerStopbandFrequency (parameter), upperStopbandFrequency (parameter)].
            </param>
      <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The upper passband is [upperPassbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerPassbandFrequency (parameter) is greater than lowerStopbandFrequency (parameter).
            
            -or-
            lowerStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerStopbandFrequency (parameter) is greater than than upperStopbandFrequency (parameter).
            
            -or-
            upperStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperStopbandFrequency (parameter) is greater than upperPassbandFrequency (parameter).
            
            -or-
            upperPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperPassbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerPassbandFrequency">
            The lower stopband frequency, in hertz. The lower passband is [0, lowerPassbandFrequency (parameter)].
            </param>
      <param name="lowerStopbandFrequency">
            The upper stopband frequency, in hertz. The stopband is [lowerStopbandFrequency (parameter), upperStopbandFrequency (parameter)].
            </param>
      <param name="upperStopbandFrequency">
            The lower passband frequency, in hertz. The stopband is [lowerStopbandFrequency (parameter), upperStopbandFrequency (parameter)].
            </param>
      <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The upper passband is [upperPassbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerPassbandFrequency (parameter) is greater than lowerStopbandFrequency (parameter).
            
            -or-
            lowerStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerStopbandFrequency (parameter) is greater than than upperStopbandFrequency (parameter).
            
            -or-
            upperStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperStopbandFrequency (parameter) is greater than upperPassbandFrequency (parameter).
            
            -or-
            upperPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperPassbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.LowerPassbandFrequency">
      <summary>
            Gets the lower passband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.LowerStopbandFrequency">
      <summary>
            Gets the lower stopband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.UpperStopbandFrequency">
      <summary>
            Gets the upper stopband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.UpperPassbandFrequency">
      <summary>
            Gets the upper passband frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter">
      <summary>Implements a Butterworth lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter.#ctor(System.Int32,System.Double,System.Double)">
      <summary>Creates a ButterworthLowpassFilter
            using the specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter.Reset(System.Int32,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter">
      <summary>Implements a Butterworth bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates a ButterworthBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Conversion.Angle">
      <summary>
            Represents an angular quantity.  Use Angle to
            convert angular quantities between degrees and radians.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.FromDegrees(System.Double)">
      <summary>
            Returns an Angle that represents the angle specified
            in degrees.
            </summary>
      <param name="degrees">
            The angular quantity in degrees.
            </param>
      <returns>
            An Angle that represents an angle of 
            degrees (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.FromRadians(System.Double)">
      <summary>
            Returns an Angle that represents the angle specified
            in radians.
            </summary>
      <param name="radians">
            The angular quantity in radians.
            </param>
      <returns>
            An Angle that represents an angle of
            radians (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Plus">
      <summary>
            Returns this instance of Angle.
            </summary>
      <returns>
            This instance of Angle.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Returns the specified instance of Angle (a unary plus).
            </summary>
      <param name="a">
            An Angle.
            </param>
      <returns>a (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Negate">
      <summary>
            Returns an Angle whose value is the negated value of
            this instance.  
            </summary>
      <returns>
            An Angle whose value is the negated value of this
            instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Returns an Angle whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
      <param name="a">
            An Angle.
            </param>
      <returns>
            The negative of a (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Add(NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Adds an Angle to this instance and returns a new 
            Angle representing the sum.
            </summary>
      <param name="a">
            The Angle to add to this instance.
            </param>
      <returns>
            An Angle that represents the value of this instance
            plus the value of a (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Addition(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Adds two Angle instances.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>
            An Angle whose value is the sum of 
            a1 (parameter) and a2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Subtract(NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Subtracts an Angle from this instance and returns a new 
            Angle representing the difference.
            </summary>
      <param name="a">
            The Angle to subtract from this instance.
            </param>
      <returns>
            An Angle that represents the value of this instance
            minus the value of a (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Subtraction(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Subtracts one Angle from another.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>
            An Angle whose value is the result of 
            a1 (parameter) minus a2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Compare(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Compares two Angle values and returns an indication of
            their relative values.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>ValueCondition
            &lt;0
            a1 (parameter) is less than a2 (parameter)
            0
            a1 (parameter) is equal to a2 (parameter)
            &gt;0
            a1 (parameter) is greater than a2 (parameter)</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Equality(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Indicates if two Angle instances are equal.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if the values of a1 (parameter) and a2 (parameter)
            are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Inequality(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Indicates if two Angle instances are not equal.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if the values of a1 (parameter) and a2 (parameter)
            are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.CompareTo(System.Object)">
      <summary>
            Compares this instance with another Angle.
            </summary>
      <param name="obj">
            Object to compare with this instance, or null.
            </param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            

ValueCondition
            Less than zero
            
            The instance is less than obj (parameter).
            
            Zero
            
            The instance is equal to obj (parameter).
            
            Greater than zero
            The instance is greater than obj (parameter).
            				

-or-

obj (parameter) is null.

</returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not an Angle.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Equals(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Returns a value indicating if two specified instances of 
            Angle are equal.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if a1 (parameter) and a2 (parameter) are equal;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Equals(NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Returns a value indicating if this instance is equal to the specified 
            Angle.
            </summary>
      <param name="a">
            An Angle to compare with this instance.
            </param>
      <returns>true if a (parameter) represents the same angle 
            as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this instance.
            </param>
      <returns>true if obj (parameter) is an 
            Angle that represents the same angle as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_LessThan(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Indicates if one Angle is less than another.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if a1 (parameter) is less than 
            a2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_GreaterThan(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Indicates if one Angle is greater than another.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if a1 (parameter) is greater than 
            a2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Indicates if one Angle is less than or 
            equal to another.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if a1 (parameter) is less than or equal to
            a2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
      <summary>
            Indicates if one Angle is greater than or
            equal to another.
            </summary>
      <param name="a1">
            An Angle.
            </param>
      <param name="a2">
            An Angle.
            </param>
      <returns>true if a1 (parameter) is greater than or equal
            to a2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String)">
      <summary>
            Converts the string representation of an angle to an Angle.
            </summary>
      <param name="s">
            A string containing the angle to convert.
            </param>
      <returns>
            An Angle representing the angle specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not an angle in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of an angle in a specified culture-specific format to
            an Angle.
            </summary>
      <param name="s">
            A string containing the angle to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            An Angle representing the angle specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not an angle in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of an angle with a specified style to
            an Angle.
            </summary>
      <param name="s">
            A string containing the angle to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <returns>
            An Angle representing the angle specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not an angle in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of an angle with a specified style and culture-specific format to
            an Angle.
            </summary>
      <param name="s">
            A string containing the angle to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            An Angle representing the angle specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not an angle in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Angle@)">
      <summary>
            Converts the string representation of an angle with a specified style and culture-specific format to
            an Angle.
            </summary>
      <param name="s">
            A string containing the angle to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <param name="result">
            Upon return, contains the Angle representing the angle specified in s (parameter).
            If the return value is false, result (parameter) is an angle of 0 radians.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString(System.String)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Angle.Degrees">
      <summary>
            Gets the value of this angle in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Angle.Radians">
      <summary>
            Gets the value of this angle in radians.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Angle.Zero">
      <summary>
            Represents an angle of zero.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.AnalysisWarningEventHandler">
      <summary>
            Represents the method that handles the Warning event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            An AnalysisWarningEventArgs that contains the event data.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode">
      <summary>Specifies the ScalingMode for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.Linear">
      <summary>
            Uses Linear scaling mode for the output spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.DB">
      <summary>
            Uses DB scaling mode for the output spectrum. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.DBM">
      <summary>
            Uses DBM scaling mode for the output spectrum.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter">
      <summary>
            Implements a windowed FIR bandpass filter using the specified window type.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>Creates a WindowedFirBandpassFilter using the 
            specified filter parameters. Do not use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>Creates a WindowedFirBandpassFilter using the 
            specified filter parameters. Use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a Kaiser, 
            Gaussian, or 
            DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.WindowType">
      <summary>
            Gets the window type.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.WindowParameter">
      <summary>
            Gets the window parameter when using a Kaiser, Gaussian, or DolphChebyshev window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter">
      <summary>Implements a Bessel highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter.#ctor(System.Int32,System.Double,System.Double)">
      <summary>
            Creates a BesselHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter.Reset(System.Int32,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.TriangleSignal">
      <summary>Generates a triangle signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor">
      <summary>
            Creates a TriangleSignal.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor(System.Double)">
      <summary>
            Creates a TriangleSignal with the 
            specified frequency.
            </summary>
      <param name="frequency">
            The frequency of the resulting triangle wave signal, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor(System.Double,System.Double)">
      <summary>
            Creates a TriangleSignal with the 
            specified frequency and amplitude.
            </summary>
      <param name="frequency">
            The frequency of the resulting triangle wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting triangle wave signal.
            </param>
      <exception cref="T:System.ArgumentException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Creates a TriangleSignal with the 
            specified frequency, amplitude, and phase.
            </summary>
      <param name="frequency">
            The frequency of the resulting triangle wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting triangle wave signal.
            </param>
      <param name="phase">
            The phase of the resulting triangle wave signal, in degrees.
            </param>
      <exception cref="T:System.ArgumentException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Reset">
      <summary>
            Resets the phase of the signal to its initial value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing a triangle waveform. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the triangle waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultFrequency">
      <summary>
            Gets the DefaultFrequency of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultAmplitude">
      <summary>
            Gets the default amplitude of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultPhase">
      <summary>
            Gets the default phase of the signal, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Frequency">
      <summary>
            Gets or sets the waveform frequency, in hertz.
            </summary>
      <exception cref="T:System.ArgumentException">Frequency is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Amplitude">
      <summary>
            Gets or sets the waveform amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Phase">
      <summary>
            Gets or sets the waveform phase, in degrees.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal">
      <summary>
            Generates a sawtooth signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor">
      <summary>
            Creates a SawtoothSignal.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor(System.Double)">
      <summary>
            Creates a SawtoothSignal with the 
            specified frequency.
            </summary>
      <param name="frequency">
            The frequency of the resulting sawtooth wave signal, in hertz.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor(System.Double,System.Double)">
      <summary>
            Creates a SawtoothSignal with the 
            specified frequency and amplitude.
            </summary>
      <param name="frequency">
            The frequency of the resulting sawtooth wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting sawtooth wave signal.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Creates a SawtoothSignal with the 
            specified frequency, amplitude, and phase.
            </summary>
      <param name="frequency">
            The frequency of the resulting sawtooth wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting sawtooth wave signal.
            </param>
      <param name="phase">
            The initial phase of the resulting Sawtooth Wave signal, in degrees.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Reset">
      <summary>
            Resets the phase of the signal to its initial value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing a sawtooth waveform. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the sawtooth waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultFrequency">
      <summary>
            Gets the DefaultFrequency of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultAmplitude">
      <summary>
            Gets the DefaultAmplitude of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultPhase">
      <summary>
            Gets the DefaultPhase of the signal, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Frequency">
      <summary>
            Gets or sets the waveform Frequency, in hertz.
            </summary>
      <exception cref="T:System.ArgumentException">Frequency is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Amplitude">
      <summary>
            Gets or sets the waveform Amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase">
      <summary>
            Gets or sets the waveform Phase, in degrees.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.MatrixType">
      <summary>
            Specifies the type of the input matrix. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.MatrixType.General">
      <summary>
            Specifies a general input matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.MatrixType.PositiveDefinite">
      <summary>
            Specifies a positive definite input matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.MatrixType.LowerTriangular">
      <summary>
            Specifies a lower triangular input matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.MatrixType.UpperTriangular">
      <summary>
            Specifies an upper triangular input matrix.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.CurveFit">
      <summary>
            Provides a set of methods that fit data to mathematical functions and interpolate unknown points from a known data set.</summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],System.Double@)">
      <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a FitMethod argument
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a FitMethod argument
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square method and using default values 
            for tolerance and weight.  This method returns only fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. This method returns only the fitted 
            data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. This method returns only the fitted 
            data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter),  
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method. This method returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the slope and intercept iteratively. If the relative 
            difference of residue in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting slope and intercept. If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
      <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
      <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the slope (parameter) and intercept (parameter) iteratively. If the relative 
            difference of residue (parameter) in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting slope (parameter) and intercept (parameter). If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
      <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
      <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],System.Double@)">
      <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a FitMethod argument
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a FitMethod argument
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square method while using a default value for tolerance and weight. Only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <returns>
            The y values calculated using the fitted exponential model. </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance and weight. Only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <returns>
            The y values calculated using the fitted exponential model. </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method using a default value for tolerance. Only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <returns>
            The y values calculated using the fitted exponential model. </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter) and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method. Only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and damping iteratively. If the relative difference of residue in two successive iterations is less than tolerance, the method returns the resulting amplitude and damping. If tolerance is less than or equal to 0, the method sets tolerance to 0.0001.
            </param>
      <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter) and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method using a default value for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
      <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
      <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
      <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
      <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter) and damping (parameter) iteratively. If the relative difference of residue (parameter) in two successive iterations is less than tolerance (parameter), the method returns the resulting amplitude (parameter) and damping (parameter). If tolerance (parameter) is less than or equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
      <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
      <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)">
      <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a 
            PolynomialFitAlgorithm argument to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@)">
      <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a 
            PolynomialFitAlgorithm argument to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. The method returns 
            only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            A PolynomialFitAlgorithm value representing the polynomial fit algorithm to use.
            </param>
      <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. 
            </summary>
      <param name="inputXData">
            The x value of data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            A PolynomialFitAlgorithm value representing the polynomial fit algorithm to use.
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method and specified coefficient constraints. 
            </summary>
      <param name="inputXData">
            The x value of data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            A PolynomialFitAlgorithm value representing the polynomial fit algorithm to use.
            </param>
      <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
      <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the PolynomialFitAlgorithm enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in xData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. The method performs 
            this operation in place.
            </summary>
      <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the PolynomialFitAlgorithm enumeration.
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in xData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method and specified 
            coefficient constraints. The method performs this operation in place.
            </summary>
      <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the PolynomialFitAlgorithm enumeration.
            </param>
      <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
      <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in xData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. The method returns 
            only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            A PolynomialFitAlgorithm value representing the polynomial fit algorithm to use.
            </param>
      <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. 
            </summary>
      <param name="inputXData">
            The x value of data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the PolynomialFitAlgorithm enumeration.
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights and coefficient constraints. 
            </summary>
      <param name="inputXData">
            The x value of data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the PolynomialFitAlgorithm enumeration.
            </param>
      <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
      <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the PolynomialFitAlgorithm enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in xData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. The method performs 
            this operation in place.
            </summary>
      <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            A PolynomialFitAlgorithm value representing the polynomial fit algorithm to use.
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in xData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
      <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights and 
            coefficient constraints. The method performs this operation in place.
            </summary>
      <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
      <param name="inputYData">
            The y value of data set (x, y). 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="order">
            The order of the polynomial to which to fit the data set. order (parameter) must be greater than or equal to 0. 
            </param>
      <param name="fitAlgorithm">
            A PolynomialFitAlgorithm value representing the polynomial fit algorithm to use.
            </param>
      <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
      <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
      <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
      <param name="mse">
            Upon return, contains the mean square error.
            </param>
      <exception cref="T:System.ArgumentNullException">xData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in xData (parameter) and inputYData (parameter) 
            is not the same.
            
            -or-
            order (parameter) is less than or equal to 0.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitAlgorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)">
      <summary>
            Calculates the k-dimension linear curve values and the set of k-dimension linear fit coefficients, 
            which describe the k-dimension linear curve that best represents the input data set using the least-squares solution. 
            Use this method if the standard deviation is unknown or if all the standard deviations are equal, and if the matrix of covariances is not required. 
            </summary>
      <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {X,Y}. The number of rows 
            in hMatrix (parameter) must be greater than or equal to the number of columns.
            </param>
      <param name="inputYData">
            The array whose elements contain the y coordinates of the (x,y) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in hMatrix (parameter).
            </param>
      <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using BestFitAlgorithm.
            </param>
      <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
      <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
      <returns>
            The best fitted curve.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">hMatrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">hMatrix (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in hMatrix (parameter) is equal to zero.
            
            -or-
            
            The number of rows in hMatrix (parameter) is not the same size as inputYData (parameter).
            
            -or-
            
            Array size is less than the order (inputYData (parameter) size is less than number of columns in hMatrix (parameter)).
            
            -or-
            
                    Order is less than or equal to zero.
            
            -or-
            
                    Order is greater than 90.
            
            -or-
            
            Invalid algorithm (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double[0:,0:]@,System.Double@)">
      <summary>
            Calculates the k-dimension linear curve values and the set of k-dimension linear fit coefficients, 
            which describe the k-dimension linear curve that best represents the input data set using the least-squares solution. 
            Use this method if the standard deviation is unknown or if all the standard deviations are equal.
            </summary>
      <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {X,Y}. The number of rows 
            in hMatrix (parameter) must be greater than or equal to the number of columns.
            </param>
      <param name="inputYData">
            The array whose elements contain the y coordinates of the (x,y) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in hMatrix (parameter).
            </param>
      <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using BestFitAlgorithm.
            </param>
      <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
      <param name="covariance">
            Upon return, contains the matrix of covariances C with k-by-k elements, where k is the number of columns. 
            C_jk is the covariance between a_j and a_k. 
                C_jj is the variance of a_j,
            where  a represents coefficients (parameter).
            </param>
      <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
      <returns>
            The best fitted curve.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">hMatrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">hMatrix (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in hMatrix (parameter) is equal to zero.
            
            -or-
            
            The number of rows in hMatrix (parameter) is not the same size as inputYData (parameter).
            
            -or-
            
            Array size is less than the order (inputYData (parameter) size is less than number of columns in hMatrix (parameter)).
            
            -or-
            
                    Order is less than or equal to zero.
            
            -or-
            
                    Order is greater than 90.
            
            -or-
            
            Invalid algorithm (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)">
      <summary>
            Calculates the k-dimension linear curve values and the set of k-dimension linear fit coefficients, 
            which describe the k-dimension linear curve that best represents the input data set using the least-squares solution.
            Use this method if the matrix of covariances is not required. 
            </summary>
      <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {X,Y}. The number of rows 
            in hMatrix (parameter) must be greater than or equal to the number of columns.
            </param>
      <param name="inputYData">
            The array whose elements contain the y coordinates of the (x,y) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in hMatrix (parameter).
            </param>
      <param name="standardDeviation">
            The array of standard deviations for each input data set. The number of elements in this array must be equal to the number of rows in hMatrix (parameter).
            </param>
      <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using BestFitAlgorithm.
            </param>
      <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
      <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
      <returns>
            The best fitted curve.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">hMatrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">hMatrix (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in hMatrix (parameter) is equal to zero.
            
            -or-
            
            The number of rows in hMatrix (parameter) is not the same size as inputYData (parameter).
            
            -or-
            
            Array size is less than the order (inputYData (parameter) size is less than number of columns in hMatrix (parameter)).
            
            -or-
            
                    Order is less than or equal to zero.
            
            -or-
            
                    Order is greater than 90.
            
            -or-
            
            Invalid algorithm (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double[0:,0:]@,System.Double@)">
      <summary>
            Calculates the k-dimension linear curve values and the set of k-dimension linear fit coefficients, 
            which describe the k-dimension linear curve that best represents the input data set using the least-squares solution.
            </summary>
      <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {X,Y}. The number of rows 
            in hMatrix (parameter) must be greater than or equal to the number of columns.
            </param>
      <param name="inputYData">
            The array whose elements contain the y coordinates of the (x,y) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in hMatrix (parameter).
            </param>
      <param name="standardDeviation">
            The array of standard deviations for each input data set. The number of elements in this array must be equal to the number of rows in hMatrix (parameter).
            </param>
      <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using BestFitAlgorithm.
            </param>
      <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
      <param name="covariance">
            Upon return, contains the matrix of covariances C with k-by-k elements, where k is the number of columns. C_jk is the covariance between a_j and a_k. 
                C_jj is the variance of a_j,
            where  a represents coefficients (parameter).
            </param>
      <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
      <returns>
            The best fitted curve.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">hMatrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">hMatrix (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in hMatrix (parameter) is equal to zero.
            
            -or-
            
            The number of rows in hMatrix (parameter) is not the same size as inputYData (parameter).
            
            -or-
            
            Array size is less than the order (inputYData (parameter) size is less than number of columns in hMatrix (parameter)).
            
            -or-
            
                    Order is less than or equal to zero.
            
            -or-
            
                    Order is greater than 90.
            
            -or-
            
            Invalid algorithm (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GoodnessOfFit(System.Double[],System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Describes how well a fitted model matches the original data set and calculates three parameters, including  
            summation of square, rSquare, and the root mean square error. This method uses the default value 
            for the degrees of freedom.
            </summary>
      <param name="inputObservations">
            The input observations.
            </param>
      <param name="fittedData">
            The calculated value of the best fit. 
            </param>
      <param name="weight">
            The weight of the input observations.
            </param>
      <param name="sse">
            Upon return, contains the summation of square error. The smaller the sse (parameter), the better the fit.
            </param>
      <param name="rSquare">
            Upon return, contains the normalized parameter to measure the goodness of fit. The closer that rSquare (parameter) is to 1, the better the fit.
            </param>
      <param name="rmsError">
            Upon return, contains the root mean square error. The smaller the rmsError (parameter), the better the fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputObservations (parameter) is null.
            
            -or-
            

fittedData (parameter) is null.
            


            -or-
            

weight (parameter) is null.
            


            -or-
            fittedData (parameter) is null.
            
            -or-
            weight (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputObservations (parameter), fittedData (parameter), and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GoodnessOfFit(System.Double[],System.Double[],System.Double[],System.Int32,System.Double@,System.Double@,System.Double@)">
      <summary>
            Describes how well a fitted model matches the original data set and calculates three parameters, including 
            summation of square, rSquare, and root mean square error.
            </summary>
      <param name="inputObservations">
            The input observations.
            </param>
      <param name="fittedData">
            The calculated value of the best fit. 
            </param>
      <param name="weight">
            The weight of the input observations.
            </param>
      <param name="degreeOfFreedom">
            The degree of freedom, which is defined as number of elements in the inputObservations (parameter) 
            minus the number of coefficients in the fitted model. If degreeOfFreedom (parameter) is negative 
            or zero, the method sets degreeOfFreedom (parameter) to number of elements - 2.
            </param>
      <param name="sse">
            Upon return, contains the summation of square error. The smaller the sse (parameter), the better the fit.
            </param>
      <param name="rSquare">
            Upon return, contains the normalized parameter to measure the goodness of fit. The closer that rSquare (parameter) is to 1, the better the fit.
            </param>
      <param name="rmsError">
            Upon return, contains the root mean square error. The smaller the rmsError (parameter), the better the fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputObservations (parameter) is null.
            
            -or-
            

fittedData (parameter) is null.
            


            -or-
            

weight (parameter) is null.
            


            -or-
            fittedData (parameter) is null.
            
            -or-
            weight (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputObservations (parameter), fittedData (parameter), and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFit(System.Double[],System.Double[],System.Double)">
      <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights and smoothness assumed to be 1.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). inputXData (parameter) must be in ascending order.
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
      <returns>
            The fitted data using the cubic spline fitting model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFit(System.Double[],System.Double[],System.Double,System.Double[])">
      <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights assumed to be 1.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). inputXData (parameter) must be in ascending order.
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
      <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
      <returns>
            The fitted data using the cubic spline fitting model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFit(System.Double[],System.Double[],System.Double,System.Double[],System.Double[])">
      <summary>
            Uses the cubic spline fitting model to fit the data set (x,y).
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). inputXData (parameter) must be in ascending order.
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
      <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <returns>
            The fitted data using the cubic spline fitting model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter) and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFitInPlace(System.Double[],System.Double[],System.Double)">
      <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights and smoothness assumed to be 1.
            The fitted data is computed in place.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). inputXData (parameter) must be in ascending order.
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data using the cubic spline fitting model.
            </param>
      <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFitInPlace(System.Double[],System.Double[],System.Double,System.Double[])">
      <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights assumed to be 1. The fitted data is computed in place.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). inputXData (parameter) must be in ascending order.
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data using the cubic spline fitting model.
            </param>
      <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
      <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFitInPlace(System.Double[],System.Double[],System.Double,System.Double[],System.Double[])">
      <summary>
            Uses the cubic spline fitting model to fit the data set (x,y). The fitted data is computed in place.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). inputXData (parameter) must be in ascending order.
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data using the cubic spline fitting model.
            </param>
      <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
      <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square method and using a default value for tolerance and weight. This operation is performed in place and only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance and weight. This operation is performed in place and only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance. This operation is performed in place and only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method. This operation is performed in place and only the fitted data is returned.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and damping iteratively. 
            If the relative difference of residue in two successive iterations is less than tolerance (parameter), 
            the method returns the resulting amplitude and damping. If tolerance (parameter) is less 
            than or equal to 0, the method sets the tolerance (parameter) to 0.0001.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance and weight. This operation is performed in place.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
      <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance. This operation is performed in place.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
      <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method. This operation is performed in place.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. The method adjusts the amplitude (parameter) and damping (parameter) 
            iteratively. If the relative difference of residue in two successive iterations is less than 
            tolerance (parameter), the method returns the resulting amplitude (parameter) and 
            damping (parameter). If tolerance (parameter) is less than or equal to 0, the 
            method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
      <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square method and using default values for 
            tolerance and weight. This method returns only the fitted data and calculates the initial estimates 
            for amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method and using default values for 
            tolerance and weight. This method returns only the fitted data and calculates the initial estimates for amplitude,
            center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. 
            This method uses a default value for tolerance and returns only the fitted data. The method calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or 
            Bisquare method. This method returns only the fitted data and calculates the initial estimates for 
            amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude, center, and standard deviation iteratively. 
            If the relative difference of residue in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude, center, and standard deviation. 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, 
            or Bisquare method. This method calculates the initial estimate for the amplitude, center, and 
            standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter), center (parameter), and standardDeviation (parameter) iteratively. 
            If the relative difference of residue (parameter) in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude (parameter), center (parameter), and standardDeviation (parameter). 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter),  
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using default values for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
      <param name="initialCenter">
            The initial estimate of center.
            </param>
      <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using default values for weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x,y).
            </param>
      <param name="inputYData">
            The y value of data set (x,y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter), center (parameter), and standardDeviation (parameter) iteratively. 
            If the relative difference of residue (parameter) in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude (parameter), center (parameter), and standardDeviation (parameter). 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
      <param name="initialCenter">
            The initial estimate of center.
            </param>
      <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter), center (parameter), and standardDeviation (parameter) iteratively. 
            If the relative difference of residue (parameter) in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude (parameter), center (parameter), and standardDeviation (parameter). 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
      <param name="initialCenter">
            The initial estimate of center.
            </param>
      <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <returns>
            The fitted data using the Gaussian model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square method. The operation is 
            performed in place and only the fitted data is returned. The method uses default values for tolerance 
            and weight, and calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The operation is performed in place and only the fitted data is returned. The 
            method uses default values for tolerance and weight, and calculates the initial estimates for 
            amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place using the default value for tolerance and only the fitted data is returned.
            The method calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place and only the fitted data is returned.
            The method calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude, center, and standard deviation iteratively. 
            If the relative difference of residue in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude, center, and standard deviation. 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The operation is performed in place, and this method calculates the initial estimate 
            for the amplitude, center, and standard deviation.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter), center (parameter), and standardDeviation (parameter) iteratively. 
            If the relative difference of residue (parameter) in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude (parameter), center (parameter), and standardDeviation (parameter). 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place using default values for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
      <param name="initialCenter">
            The initial estimate of center.
            </param>
      <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter), center (parameter), and standardDeviation (parameter) iteratively. 
            If the relative difference of residue (parameter) in two successive iterations is less 
            than tolerance (parameter), the method returns the resulting amplitude (parameter), center (parameter), and standardDeviation (parameter). 
            If tolerance (parameter) is less than or equal to 0, the method sets 
            tolerance (parameter) to 0.0001.
            </param>
      <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
      <param name="initialCenter">
            The initial estimate of center.
            </param>
      <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place and uses a default value for tolerance.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
      <param name="initialCenter">
            The initial estimate of center.
            </param>
      <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
      <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
      <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square method and using default values for tolerance and weight. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the slope and intercept iteratively. If the relative 
            difference of residue in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting slope and intercept. If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
      <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
      <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the slope (parameter) and intercept (parameter) iteratively. If the relative 
            difference of residue (parameter) in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting slope (parameter) and intercept (parameter). If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
      <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square method and using the 
            natural logarithm and default values for tolerance and weight. This method returns only the fitted 
            data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using the natural logarithm and default values for tolerance and weight. 
            This method returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using default values for tolerance and weight. This method returns only 
            the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[])">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using a default value for tolerance. This method returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method. This method returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and scale iteratively. If the relative 
            difference of residue in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude and scale. If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using the natural logarithm and a default value for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using a default value for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. A value from the LogarithmType enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using a default value for tolerance.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter) and scale (parameter) iteratively. If the relative 
            difference of residue (parameter) in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude (parameter) and scale (parameter). If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square method and using the 
            natural logarithm and default values for tolerance and weight. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using the natural logarithm and default values for tolerance and weight. 
            The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[])">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and scale iteratively. If the relative 
            difference of residue in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude and scale. If tolerance (parameter) is less than 
            or equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using the natural logarithm and a default value for tolerance and weight. 
            The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance and weight. The method performs this 
            operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="logBase">The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter) and scale (parameter) iteratively. If the relative 
            difference of residue (parameter) in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude (parameter) and scale (parameter). If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
      <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square method and using default values 
            for tolerance and weight. The method returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method using default values for tolerance and weight. The method returns only the fitted 
            data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method returns only the fitted data.</summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and power iteratively. If the relative 
            difference of residue in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude and power. If tolerance (parameter) is less than 
            or equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
      <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
      <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="inputYData">
            The y value of data set (x, y).
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter) and power (parameter) iteratively. If the relative 
            difference of residue (parameter) in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude (parameter) and power (parameter). If tolerance (parameter) is less than or 
            equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
      <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
      <returns>
            The fitted data calculated using the fitted power model.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[])">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square method and using default values 
            for tolerance and weight. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place and returns only the fitted data.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and power iteratively. If the relative 
            difference of residue in two successive iterations is less than tolerance (parameter), the 
            method returns the resulting amplitude and power. If tolerance (parameter) is less than 
            or equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this 
            operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
      <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and yData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
      <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place.
            </summary>
      <param name="inputXData">
            The x value of data set (x, y).
            </param>
      <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
      <param name="fitMethod">
            The fitting method. This is a value from the FitMethod enumeration.
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="tolerance">
            The stop criteria. This method adjusts the amplitude (parameter) and power (parameter) 
            iteratively. If the relative difference of residue (parameter) in two successive iterations is less than tolerance (parameter), 
            the method returns the resulting amplitude (parameter) and power (parameter). If 
            tolerance (parameter) is less than or equal to 0, the method sets tolerance (parameter) to 0.0001.
            </param>
      <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
      <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
      <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

yData (parameter) is null.
            


            -or-
            yData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), yData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified fitMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best exponential fitting method using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
      <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaDamping">
            Upon return, contains the uncertainty radius of damping (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best exponential fitting method. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The  weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
      <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaDamping">
            Upon return, contains the uncertainty radius of damping (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter)  is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
      <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
      <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best Gaussian-fitting method using a default value for 
            weight.
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual function lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaCenter">
            Upon return, contains the uncertainty radius of center (parameter). 
            </param>
      <param name="deltaStandardDeviation">
            Upon return, contains the uncertainty radius of standardDeviation (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best Gaussian-fitting method. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The  weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual function lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaCenter">
            Upon return, contains the uncertainty radius of center (parameter). 
            </param>
      <param name="deltaStandardDeviation">
            Upon return, contains the uncertainty radius of standardDeviation (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and  inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best linear-fitting method using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="slope">
            The slope of the fitted linear model using the Least Square method. 
            </param>
      <param name="intercept">
            The intercept of the fitted linear model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaSlope">
            Upon return, contains the uncertainty radius of slope (parameter). 
            </param>
      <param name="deltaIntercept">
            Upon return, contains the uncertainty radius of intercept (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best linear-fitting method. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The  weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="slope">
            The slope of the fitted linear model using the Least Square method. 
            </param>
      <param name="intercept">
            The intercept of the fitted linear model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaSlope">
            Upon return, contains the uncertainty radius of slope (parameter). 
            </param>
      <param name="deltaIntercept">
            Upon return, contains the uncertainty radius of intercept (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="slope">
            The slope of the fitted linear model using the Least Square method.
            </param>
      <param name="intercept">
            The intercept of the fitted linear model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x, y).
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="slope">
            The amplitude of the fitted linear model using the Least Square method.
            </param>
      <param name="intercept">
            The intercept of the fitted linear model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitConfidenceInterval(System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best logarithm-fitting method using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="logBase">
            The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method. 
            </param>
      <param name="scale">
            The scale of the fitted logarithm model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaScale">
            Upon return, contains the uncertainty radius of scale (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitConfidenceInterval(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best logarithm-fitting method. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The  weight of each data point.
            </param>
      <param name="logBase">
            The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method. 
            </param>
      <param name="scale">
            The scale of the fitted logarithm model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaScale">
            Upon return, contains the uncertainty radius of scale (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitPredictionInterval(System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x, y).
            </param>
      <param name="logBase">
            The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method.
            </param>
      <param name="scale">
            The scale of the fitted logarithm model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitPredictionInterval(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x, y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x, y).
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="logBase">
            The base of the logarithm. This is a value from the LogarithmType enumeration.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method.
            </param>
      <param name="scale">
            The scale of the fitted logarithm model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best power-fitting function using a default value for 
            weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method. 
            </param>
      <param name="power">
            The power of the fitted power model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaPower">
            Upon return, contains the uncertainty radius of power (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
      <summary>
            Calculates the confidence interval for the best power-fitting function. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The  weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the confidence interval. confidenceLevel (parameter) specifies the probability that the actual method lies 
            within the confidence interval. confidenceLevel (parameter) must be between 0 and 1.
            </param>
      <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method. 
            </param>
      <param name="power">
            The power of the fitted power model using the Least Square method. 
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
      <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of amplitude (parameter). 
            </param>
      <param name="deltaPower">
            Upon return, contains the uncertainty radius of power (parameter). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method.
            </param>
      <param name="power">
            The power of the fitted power model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the prediction interval for the observations. 
            </summary>
      <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
      <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
      <param name="weight">
            The weight of each data point.
            </param>
      <param name="confidenceLevel">
            The level of certainty for the prediction interval. confidenceLevel (parameter) specifies the probability that the 
            inputYData (parameter) values lie within the prediction interval in repeated measurements. confidenceLevel (parameter) must be between 0 and 1. 
            </param>
      <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method.
            </param>
      <param name="power">
            The power of the fitted power model using the Least Square method.
            </param>
      <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
      <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingIndex(System.Double[],System.Double[],System.Int32[],System.Double[]@,System.Double[]@)">
      <summary>
            Removes the outliers specified by the indices. The method does not use the array 
            of weights for the observations.
            </summary>
      <param name="inputXData">
            The array of independent values (X).
            </param>
      <param name="inputYData">
            The array of the dependent values (Y).
            </param>
      <param name="indicesOfOutliers">
            The indices of the known outliers.
            </param>
      <param name="xDataWithoutOutliers">
            Upon return, contains the value of inputXData (parameter) with outliers removed.
            </param>
      <param name="yDataWithoutOutliers">
            Upon return, contains the value of inputYData (parameter) with outliers removed.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            

indicesOfOutliers (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            
            -or-
            indicesOfOutliers (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingIndex(System.Double[],System.Double[],System.Double[],System.Int32[],System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>
            Removes the outliers specified by the indices.
            </summary>
      <param name="inputXData">
            The array of independent values (X).
            </param>
      <param name="inputYData">
            The array of the dependent values (Y).
            </param>
      <param name="weight">
            The array of weights for the observations (X,Y).
            </param>
      <param name="indicesOfOutliers">
            The indices of the known outliers.
            </param>
      <param name="xDataWithoutOutliers">
            Upon return, contains the value of inputXData (parameter) with outliers removed.
            </param>
      <param name="yDataWithoutOutliers">
            Upon return, contains the value of inputYData (parameter) with outliers removed.
            </param>
      <param name="weightWithoutOutliers">
            Upon return, contains the value of weight (parameter) with outliers removed.
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            

indicesOfOutliers (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            
            -or-
            indicesOfOutliers (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@)">
      <summary>
            Removes data points that fall outside the specified range. The method does not use the array of 
            weights for the observations.
            </summary>
      <param name="inputXData">
            The array of independent values (X).
            </param>
      <param name="inputYData">
            The array of the dependent values (Y).
            </param>
      <param name="rangeType">
            The value specifying the axis to which the bounds in range (parameter) apply. This is a value from the RangeType enumeration.
            </param>
      <param name="range">
            The upper and lower bounds of the range. 
            </param>
      <param name="xDataWithoutOutliers">
            Upon return, contains the value of inputXData (parameter) with outliers removed.
            </param>
      <param name="yDataWithoutOutliers">
            Upon return, contains the value of inputYData (parameter) with outliers removed.
            </param>
      <returns>
            The array containing the indices of the outliers that were removed.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            

range (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            
            -or-
            range (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) and inputYData (parameter) 
            is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified rangeType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>
            Removes data points that fall outside the specified range.
            </summary>
      <param name="inputXData">
            The array of independent values (X).
            </param>
      <param name="inputYData">
            The array of the dependent values (Y).
            </param>
      <param name="weight">
            The array of weights for the observations (X,Y).
            </param>
      <param name="rangeType">
            The value specifying the axis to which the bounds in range (parameter) apply. This is a value from the RangeType enumeration.
            </param>
      <param name="range">
            The upper and lower bounds of the range. 
            </param>
      <param name="xDataWithoutOutliers">
            Upon return, contains the value of inputXData (parameter) with outliers removed.
            </param>
      <param name="yDataWithoutOutliers">
            Upon return, contains the value of inputYData (parameter) with outliers removed.
            </param>
      <param name="weightWithoutOutliers">
            Upon return, contains the value of weight (parameter) with outliers removed.
            </param>
      <returns>
            The array containing the indices of the outliers that were removed.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            

inputYData (parameter) is null.
            


            -or-
            

range (parameter) is null.
            


            -or-
            inputYData (parameter) is null.
            
            -or-
            range (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter), inputYData (parameter), 
            and weight (parameter) is not the same.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified rangeType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialInterpolation(System.Double[],System.Double[],System.Double,System.Double@)">
      <summary>
            Performs polynomial interpolation.
            </summary>
      <param name="inputXData">
            The known x-values for the planar function.
            </param>
      <param name="inputYData">
            The known y-values for the planar function.
            </param>
      <param name="xValue">
            The x-value at which the tabulated function is to be interpolated.
            </param>
      <param name="errorEstimate">
            Upon return, contains an estimate of the error in interpolation.
            </param>
      <returns>
            An estimate of the y-value corresponding to the given xValue (parameter) for the tabulated function.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            Internal computation results in a singular matrix.
            </exception>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputXData (parameter) is equal to zero. 
            
            -or-
            
            The number of samples in inputYData (parameter) is equal to zero.
            
            -or-
            
            The number of samples in inputXData (parameter) is not equal to the number of samples in inputYData (parameter).
            
            -or-
            
            There is a pole at the requested xValue (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.RationalInterpolation(System.Double[],System.Double[],System.Double,System.Double@)">
      <summary>
            Interpolates f at x using a rational function. 
            </summary>
      <param name="inputXData">
            The known x-values for the planar function.
            </param>
      <param name="inputYData">
            The known y-values for the planar function.
            </param>
      <param name="xValue">
            The value at which the tabulated function is to be interpolated.
            </param>
      <param name="errorEstimate">
            Upon return, contains the estimate of error in the interpolation.
            </param>
      <returns>
            Returns the estimate of the y-value corresponding to the given xValue (parameter) for the tabulated function.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            Interpolating function has a pole at the requested value.
            </exception>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputXData (parameter) is equal to zero. 
            
            -or-
            
            The number of samples in inputYData (parameter) is equal to zero.
            
            -or-
            
            The number of samples in inputXData (parameter) is not equal to the number of samples in inputYData (parameter).
            
            -or-
            
            There is a pole at the requested xValue (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolation(System.Double[],System.Double[],System.Double[],System.Double)">
      <summary>
            Calculates the interpolated y-value at the given x-value for the unique polynomial passing through the 
            set of points (inputXData, inputYData) using a cubic spline interpolation.
            </summary>
      <param name="inputXData">
            The known x-values for the planar function.
            </param>
      <param name="inputYData">
            The known y-values for the planar function.
            </param>
      <param name="secondDerivatives">
            The array of second derivatives which specify the interpolant. This array should be generated by the 
            SplineInterpolant method.
            </param>
      <param name="xValue">
            The x-value at which the tabulated function is to be interpolated.
            </param>
      <returns>
            An estimate of the y-value corresponding to the given xValue (parameter) for the tabulated function.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputXData (parameter) is equal to zero. 
            
            -or-
            
            The number of samples in inputYData (parameter) is equal to zero.
            
            -or-
            
            The number of samples in inputXData (parameter) is not equal to the number of samples in inputYData (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolant(System.Double[],System.Double[],System.Double,System.Double)">
      <summary>
            Calculates the second derivatives used by the cubic SplineInterpolation.
            </summary>
      <param name="inputXData">
            The known x-values for the planar function.
            </param>
      <param name="inputYData">
            The known y-values for the planar function.
            </param>
      <param name="initialBoundary">
            The first derivative of the interpolant at the first element of inputXData (parameter).
            </param>
      <param name="finalBoundary">
            The first derivative of the interpolant at the last element of inputXData (parameter).
            </param>
      <returns>
            The second derivatives to be used in a cubic spline interpolation. This array can be 
            used with the method SplineInterpolation to calculate an interpolation value.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputXData (parameter) is equal to zero. 
            
            -or-
            
            The number of samples in inputYData (parameter) is equal to zero.
            
            -or-
            
            The number of samples in inputXData (parameter) is not equal to the number of samples in inputYData (parameter).
            
            -or-
            inputXData (parameter) samples are not distinct.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)">
      <summary>
            Determines the least squares set of coefficients that best fit the set of input data points (X, Y) as 
            expressed by a nonlinear function y = f(x, a) where a is the set of coefficients, using the Levenberg-Marquardt algorithm.
            </summary>
      <param name="inputXData">
            The array whose elements contain the x coordinates of the (x, y) data sets to be fitted.
            </param>
      <param name="inputYData">
            The array whose elements contain the y coordinates of the (x, y) data sets to be fitted.
            </param>
      <param name="callback">
            The delegate that specifies the ModelFunctionCallback used in the nonlinear-fitting algorithm.
            </param>
      <param name="coefficients">
            On input, contains the initial guess of the nonlinear fit coefficients. On return, contains the fitted coefficients that best describe 
            the nonlinear curve fitting given the user-supplied model function.
            </param>
      <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
      <returns>
            The array of fitted values, yfit_i = f(x_i, a), where f is the user-supplied nonlinear model function, and a is the set of best-fit coefficients.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputXData (parameter) is equal to zero. 
            
            -or-
            
            The number of samples in inputYData (parameter) is equal to zero.
            
            -or-
            
            The number of samples in inputXData (parameter) is not equal to the number of samples in inputYData (parameter).
            
            -or-
            
            The number of samples in inputXData (parameter) is less than the order (the number of elements in coefficients (parameter)).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@,System.Int32)">
      <summary>
            Determines the least squares set of coefficients that best fit the set of input data points (X, Y) as 
            expressed by a nonlinear function y = f(x, a) where a is the set of coefficients, using the Levenberg-Marquardt algorithm. Use this method to specify
            the maximum number of iterations allowed.
            </summary>
      <param name="inputXData">
            The array whose elements contain the x coordinates of the (x, y) data sets to be fitted.
            </param>
      <param name="inputYData">
            The array whose elements contain the y coordinates of the (x, y) data sets to be fitted.
            </param>
      <param name="callback">
            The delegate that specifies the ModelFunctionCallback used in the nonlinear-fitting algorithm.
            </param>
      <param name="coefficients">
            On input, contains the initial guess of the nonlinear fit coefficients. On return, contains the fitted coefficients that best describe 
            the nonlinear curve fitting given the user-supplied model function.
            </param>
      <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
      <param name="maximumIterations">
            The maximum number of iterations allowed. If the method reaches maximum iteration without reaching a solution, then it throws an exception.
            </param>
      <returns>
            The array of fitted values, yfit_i = f(x_i, a), where f is the user-supplied nonlinear model function, and a is the set of best-fit coefficients.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputXData (parameter) is equal to zero. 
            
            -or-
            
            The number of samples in inputYData (parameter) is equal to zero.
            
            -or-
            
            The number of samples in inputXData (parameter) is not equal to the number of samples in inputYData (parameter).
            
            -or-
            
            The number of samples in inputXData (parameter) is less than the order (the number of elements in coefficients (parameter)).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.LogarithmType">
      <summary>
            The base of the logarithm used by the LogarithmFit 
            and LogarithmFitInPlace curve-fitting methods.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.LogarithmType.Natural">
      <summary>
            The specified LogarithmFit and 
            LogarithmFitInPlace curve-fitting method 
            uses the natural logarithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.LogarithmType.Base2">
      <summary>
            The specified LogarithmFit and 
            LogarithmFitInPlace curve-fitting method uses 
            the base 2 logarithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.LogarithmType.Base10">
      <summary>
            The specified LogarithmFit and 
            LogarithmFitInPlace curve-fitting method 
            uses the base 10 logarithm.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter">
      <summary>Implements an EquiRipple lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates an EquiRippleHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="highestPassbandFrequency">
            The highest passband frequency, in hertz. The passband is [0, highestPassbandFrequency (parameter)].
            </param>
      <param name="lowestStopbandFrequency">
            The lowest stopband frequency, in hertz. The stopband is [lowestStopbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero. 
            
            -or-
            highestPassbandFrequency (parameter) is less than or equal zero. 
            
            -or-
            highestPassbandFrequency (parameter) is greater than lowestStopbandFrequency (parameter).
            
            -or-
            lowestStopbandFrequency (parameter) is less than or equal zero. 
            
            -or-
            lowestStopbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="highestPassbandFrequency">
            The highest passband frequency, in hertz. The passband is [0, highestPassbandFrequency (parameter)].
            </param>
      <param name="lowestStopbandFrequency">
            The lowest stopband frequency, in hertz. The stopband is [lowestStopbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero. 
            
            -or-
            highestPassbandFrequency (parameter) is less than or equal zero. 
            
            -or-
            highestPassbandFrequency (parameter) is greater than lowestStopbandFrequency (parameter).
            
            -or-
            lowestStopbandFrequency (parameter) is less than or equal zero. 
            
            -or-
            lowestStopbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.LowestStopbandFrequency">
      <summary>
            Gets the lowest stopband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.HighestPassbandFrequency">
      <summary>
            Gets the highest passband frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter">
      <summary>Implements an EquiRipple bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates a EquiRippleBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerStopbandFrequency">
            The lower stopband frequency, in hertz. The lower stopband is [0, lowerStopbandFrequency (parameter)].
            </param>
      <param name="lowerPassbandFrequency">
            The lower passband frequency, in hertz. The passband is [lowerPassbandFrequency (parameter), upperPassbandFrequency (parameter)].
            </param>
      <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The passband is [lowerPassbandFrequency (parameter), upperPassbandFrequency (parameter)].
            </param>
      <param name="upperStopbandFrequency">
            The upper stopband frequency, in hertz. The upper stopband is [upperStopbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerStopbandFrequency (parameter) is greater than lowerPassbandFrequency (parameter).
            
            -or-
            lowerPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerPassbandFrequency (parameter) is greater than upperPassbandFrequency (parameter).
            
            -or-
            upperPassbandFrequency (parameter) is less than or equal to zero. 
            
            -or-
            upperPassbandFrequency (parameter) is greater than upperStopbandFrequency (parameter).
            
            -or-
            upperStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperStopbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerStopbandFrequency">
            The lower stopband frequency, in hertz. The lower stopband is [0, lowerStopbandFrequency (parameter)].
            </param>
      <param name="lowerPassbandFrequency">
            The lower passband frequency, in hertz. The passband is [lowerPassbandFrequency (parameter), upperPassbandFrequency (parameter)].
            </param>
      <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The passband is [lowerPassbandFrequency (parameter), upperPassbandFrequency (parameter)].
            </param>
      <param name="upperStopbandFrequency">
            The upper stopband frequency, in hertz. The upper stopband is [upperStopbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerStopbandFrequency (parameter) is greater than lowerPassbandFrequency (parameter).
            
            -or-
            lowerPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerPassbandFrequency (parameter) is greater than upperPassbandFrequency (parameter).
            
            -or-
            upperPassbandFrequency (parameter) is less than or equal to zero. 
            
            -or-
            upperPassbandFrequency (parameter) is greater than upperStopbandFrequency (parameter).
            
            -or-
            upperStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperStopbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.LowerStopbandFrequency">
      <summary>
            Gets the lower stopband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.LowerPassbandFrequency">
      <summary>
            Gets the lower passband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.UpperPassbandFrequency">
      <summary>
            Gets the upper passband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.UpperStopbandFrequency">
      <summary>
            Gets the upper stopband frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter">
      <summary>Implements a Chebyshev bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a ChebyshevBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction">
      <summary>
            Provides a method that calculates the single-sided TransferFunction (frequency response) 
            of a network under test.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction.Compute(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double@)">
      <summary>Calculates the single-sided TransferFunction.
            </summary>
      <param name="stimulus">
            The time-domain signal, usually the network stimulus.
            </param>
      <param name="response">
            The time-domain signal, usually the network response.
            </param>
      <param name="dt">
            The sample period of the time-domain signals, usually in seconds. dt (parameter) = , where f_s is the sampling frequency of the time-domain signals.
            </param>
      <param name="magnitudeTransfer">
            The magnitude of the averaged single-sided transfer function between the stimulus (parameter) and response (parameter) signals.
            </param>
      <param name="phaseTransfer">
            The phase, in radians, of the averaged single-sided transfer function between the stimulus (parameter) and response (parameter) signals.
            </param>
      <param name="df">
            The frequency interval. If dt (parameter) is in seconds, this value is in hertz.
            </param>
      <exception cref="T:System.ArgumentNullException">stimulus (parameter) is null.
            
            -or-
            response (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            	The number of samples in stimulus (parameter) is equal to zero.
            
            -or-
            
            	The number of samples in response (parameter) is equal to zero.
            
            -or-
            
            	The number of samples in stimulus (parameter) is not equal to the number of samples in response (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.FitMethod">
      <summary>
            The fit method used by the curve-fitting methods.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare">
      <summary>
            The curve-fitting method uses the least-square fit method.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual">
      <summary>
            The curve-fitting method uses the least absolute residual fit method. This is a robust-fitting method, 
            which is insensitive to the outliers.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare">
      <summary>
            The curve-fitting method uses the bisquare fit method. This is a robust-fitting method, which is 
            insensitive to the outliers.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter">
      <summary>
            Implements a Kaiser window FIR highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
      <summary>Creates a KaiserWindowFirHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.</param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.Reset(System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.Beta">
      <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Internal.FilterType">
      <summary>
            Specifies the type of filter to be created.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Internal.FilterType.LowPass">
      <summary>
            Creates a lowpass filter.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Internal.FilterType.HighPass">
      <summary>
            Creates a highpass filter.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Internal.FilterType.BandPass">
      <summary>
            Creates a bandpass filter.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Internal.FilterType.BandStop">
      <summary>
            Creates a bandstop filter.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter">
      <summary>Implements an Elliptic highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a EllipticHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.QRAlgorithm">
      <summary>
            Specifies the algorithm to be used for QR factorization.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.QRAlgorithm.Householder">
      <summary>
            Uses the Householder algorithm for QR factorization.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.QRAlgorithm.Givens">
      <summary>
            Uses the Givens algorithm for QR factorization.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.QRAlgorithm.FastGivens">
      <summary>
            Uses the Fast Givens algorithm for QR factorization.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.ModelFunctionCallback">
      <summary>
            Specifies the callback function to be used in NonLinearFit.
            </summary>
      <param name="x">
            The value at which to compute the function.
            </param>
      <param name="coefficients">
            The coefficients to use in computing the function.
            </param>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.SymmetricWindowType">
      <summary>
            Specifies the symmetric window type to be used by the SymmetricWindow class.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Rectangular">
      <summary>
            Applies a rectangular symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Hanning">
      <summary>
            Applies a Hanning symmetric window. This is the default value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Hamming">
      <summary>
            Applies a Hamming symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanHarris">
      <summary>
            Applies a Blackman-Harris symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.ExactBlackman">
      <summary>
            Applies an exact Blackman symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Blackman">
      <summary>
            Applies a Blackman symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.FlatTop">
      <summary>
            Applies a flat top symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanHarris4Term">
      <summary>
            Applies a 4-term Blackman-Harris symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanHarris7Term">
      <summary>
            Applies a 7-term Blackman-Harris symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.LowSidelobe">
      <summary>
            Applies a low side lobe symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanNuttall">
      <summary>
            Applies a Blackman-Nuttall symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Triangle">
      <summary>
            Applies a triangle symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Kaiser">
      <summary>
            Applies a Kaiser symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.DolphChebyshev">
      <summary>
            Applies a Dolph-Chebyshev symmetric window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Gaussian">
      <summary>
            Applies a Gaussian symmetric window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay">
      <summary>
            Implements a Savitzky-Golay smoothing FIR filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(System.Double[],System.Int32,System.Int32)">
      <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence. 
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(System.Double[],System.Int32,System.Int32,System.Double[])">
      <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence using weights. 
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <param name="weight">
            A weighting vector with length (2 * sidePoints (parameter) + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            -or-
            		The size of weight (parameter) is not equal to (2 * sidePoints (parameter) + 1). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
      <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence of ComplexDouble. 
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[])">
      <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence of ComplexDouble using weights. 
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <param name="weight">
            A weighting vector with length (2 * sidePoints (parameter) + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            -or-
            		The size of weight (parameter) is not equal to (2 * sidePoints (parameter) + 1). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@)">
      <summary>
            Gets the filter coefficients to design a Savitzky-Golay smoothing FIR filter.
            </summary>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size  1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size  1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[],System.Double[0:,0:]@)">
      <summary>
            Gets the filter coefficients to design a Savitzky-Golay smoothing FIR filter with weights.
            </summary>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <param name="weight">
            A weighting vector with length (2 * sidePoints (parameter) + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
      <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size  1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size  1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            -or-
            		The size of weight (parameter) is not equal to (2 * sidePoints (parameter) + 1). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Gets the filter coefficients and differentiation coefficients to design a Savitzky-Golay smoothing FIR filter.
            </summary>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size  1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size  1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
      <param name="differentiationCoefficients">
            The differentiation coefficients, with size (polynomialOrder (parameter)+1)-by-frame size. The p-th row is for the p-th order derivative.
            </param>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[],System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Gets the filter coefficients and differentiation coefficients to design a Savitzky-Golay smoothing FIR filter with weights.
            </summary>
      <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
      <param name="sidePoints">
            (2* sidePoints (parameter) + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than polynomialOrder (parameter).
            </param>
      <param name="weight">
            A weighting vector with length (2 * sidePoints (parameter) + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
      <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size 1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size  1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
      <param name="differentiationCoefficients">
            The differentiation coefficients, with size (polynomialOrder (parameter)+1)-by-frame size. The p-th row is for the p-th order derivative.
            </param>
      <exception cref="T:System.ArgumentException">
            (2 * sidePoints (parameter) + 1) is less than or equal to polynomialOrder (parameter).
            	-or-polynomialOrder (parameter) is less than one. 
            -or-
            		The size of weight (parameter) is not equal to (2 * sidePoints (parameter) + 1). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter">
      <summary>Implements a Bessel bandstop filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates a BesselBandstopFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal">
      <summary>Generates a square signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor">
      <summary>
            Creates a SquareSignal.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double)">
      <summary>
            Creates a SquareSignal with the 
            specified frequency.
            </summary>
      <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double,System.Double)">
      <summary>
            Creates a SquareSignal with the 
            specified frequency and amplitude.
            </summary>
      <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting square signal.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Creates a SquareSignal with the 
            specified frequency, amplitude, and phase.
            </summary>
      <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting square signal.
            </param>
      <param name="phase">
            The initial phase of the resulting square waveform, in degrees.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a SquareSignal with the 
            specified frequency, amplitude, phase, and duty cycle.
            </summary>
      <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting square signal.
            </param>
      <param name="phase">
            The initial phase of the resulting square waveform, in degrees.
            </param>
      <param name="dutyCycle">
            The duty cycle, in percent, of the generated square wave signal.  This parameter must
            be in the range 0.0 to 100.0, inclusive.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            dutyCycle (parameter) is not between 0.0 and 100.0.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Reset">
      <summary>
            Resets the phase of the signal to its initial value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing a square waveform. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the square waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultFrequency">
      <summary>
            Gets the DefaultFrequency of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultAmplitude">
      <summary>
            Gets the default amplitude of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultPhase">
      <summary>
            Gets the default phase of the signal, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultDutyCycle">
      <summary>
            Gets the default duty cycle of the signal, in percent.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Frequency">
      <summary>
            Gets or sets the waveform frequency, in hertz.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Frequency is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Amplitude">
      <summary>
            Gets or sets the waveform amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Phase">
      <summary>
            Gets or sets the waveform phase, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DutyCycle">
      <summary>
            Gets or sets the waveform duty cycle, in percent.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">DutyCycle must be between 0.0 and 100.0.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection">
      <summary>
            Creates a strongly typed collection of ISignal objects.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.#ctor">
      <summary>Initializes a new instance of SignalCollection.</summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.#ctor(NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
      <summary>
            Initializes a new instance of SignalCollection from an existing collection.
            </summary>
      <param name="item">The existing collection to copy.</param>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.#ctor(NationalInstruments.Analysis.SignalGeneration.ISignal[])">
      <summary>
            Initializes a new instance of SignalCollection from an array of items.
            </summary>
      <param name="item">The array to copy.</param>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.ToString">
      <summary>Overrides ToString.</summary>
      <returns>A string representation of the object.</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Add(NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>Adds an item to the end of the collection.</summary>
      <param name="item">Item to add to the collection.</param>
      <returns>The array index of the added item.</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.AddRange(NationalInstruments.Analysis.SignalGeneration.ISignal[])">
      <summary>Adds an array of elements to the end of the collection.</summary>
      <param name="item">Array of elements to add to the collection.</param>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.AddRange(NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
      <summary>Adds a collection of elements to the end of the collection.</summary>
      <param name="item">Collection of elements to add to the collection.</param>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Contains(NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>Returns if the specified element is in the collection.</summary>
      <param name="item">Item to locate in the collection.</param>
      <returns>true if the collection contains item (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.CopyTo(NationalInstruments.Analysis.SignalGeneration.ISignal[],System.Int32)">
      <summary>Copies the collection to an array or a portion of an array.</summary>
      <param name="array">Destination array for the collection.</param>
      <param name="index">Index in the target array at which you want to begin copying the collection to.</param>
      <exception cref="T:System.ArgumentException">array (parameter) is multidimensional.
            
            		-or-
            	index (parameter) is greater than or equal to the array length.
            
            	-or-
            	
            The number of elements in the collection is greater than the available space between
            index (parameter) and the end of array (parameter).
            </exception>
      <exception cref="T:System.ArgumentNullException">array (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is less than zero.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.IndexOf(NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
      <param name="item">Item to search for.</param>
      <returns>Index of the item. If the item is not found, returns -1.</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Insert(System.Int32,NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>Inserts an item into the collection at the specified index.</summary>
      <param name="index">Index to insert the item at.</param>
      <param name="item">Item to insert into the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is not a valid index in the IList.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.GetEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
      <returns>Enumerator for the collection.</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Remove(NationalInstruments.Analysis.SignalGeneration.ISignal)">
      <summary>Removes the first occurrence of the specified item from the collection.</summary>
      <param name="item">Item to remove from the collection.</param>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">Zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is not a valid index in the IList.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>Calls if the state of SignalCollection changes.</summary>
      <param name="e">
            Information about how the list changed and which indexes were affected.
            </param>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Item(System.Int32)">
      <summary>Gets or sets the ISignal at the specified index. In Visual C#, this property is the indexer.</summary>
      <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">index (parameter) is outside the valid range of indexes for the collection.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Count">
      <summary>
            Gets the number of elements in the collection.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.InterpolationType">
      <summary>
            Specifies the interpolation types that are available for the ArbitrarySignal class.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SignalGeneration.InterpolationType.None">
      <summary>
            Uses no interpolation.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SignalGeneration.InterpolationType.Linear">
      <summary>
            Uses Linear interpolation.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal">
      <summary>Generates an arbitrary signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[])">
      <summary>Creates an ArbitrarySignal with 
            the specified wavetable.
            </summary>
      <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
      <exception cref="T:System.ArgumentException">
                The number of samples in waveTable (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double)">
      <summary>Creates an ArbitrarySignal with 
            the specified wavetable and frequency.
            </summary>
      <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
      <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">
                The number of samples in waveTable (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double,System.Double)">
      <summary>Creates an ArbitrarySignal with 
            the specified wavetable, frequency, and amplitude.
            </summary>
      <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
      <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the desired arbitrary wave signal. The values in the wave table are multiplied by this amount when forming the signal.
            </param>
      <exception cref="T:System.ArgumentException">
                The number of samples in waveTable (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double,System.Double,System.Double)">
      <summary>Creates an ArbitrarySignal with 
            the specified wavetable, frequency, amplitude, and phase.
            </summary>
      <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
      <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the desired arbitrary wave signal.
            </param>
      <param name="phase">
            The phase of the desired arbitrary wave signal, in degrees.
            </param>
      <exception cref="T:System.ArgumentException">
                The number of samples in waveTable (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SignalGeneration.InterpolationType)">
      <summary>Creates an ArbitrarySignal with 
            the specified wavetable, frequency, amplitude, phase, and interpolation.
            </summary>
      <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
      <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the desired arbitrary wave signal. The values in the wave table are multiplied by this amount when forming the signal.
            </param>
      <param name="phase">
            The phase of the desired arbitrary wave signal, in degrees.
            </param>
      <param name="interpolation">
            The type of interpolation used in generating the arbitrary wave signal from the wave table samples. This is specified using
            InterpolationType.
            </param>
      <exception cref="T:System.ArgumentException">
                The number of samples in waveTable (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or
            
                    Invalid interpolation (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Reset">
      <summary>
            Resets the phase of the signal to its initial value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing an arbitrary wave. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the arbitrary waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.GetWaveTable">
      <summary>
            Gets an array of values that specify the samples, at equal intervals, of one cycle of the arbitrary 
            waveform signal.
            </summary>
      <returns>
            An array of values that specify the samples of one cycle of the arbitrary waveform signal.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.SetWaveTable(System.Double[])">
      <summary>
            Sets an array of values that specify the samples, at equal intervals, of one cycle of the arbitrary 
            waveform signal.
            </summary>
      <param name="waveTable">
            An array of values that specify the samples of one cycle of the arbitrary waveform signal.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultFrequency">
      <summary>
            Gets the DefaultFrequency of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultAmplitude">
      <summary>
            Gets the DefaultAmplitude of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultPhase">
      <summary>
            Gets the DefaultPhase of the signal, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultInterpolationType">
      <summary>
            Gets the DefaultInterpolationType of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Frequency">
      <summary>
            Gets or sets the waveform Frequency, in hertz.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Frequency is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Amplitude">
      <summary>
            Gets or sets the waveform amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Phase">
      <summary>
            Gets or sets the waveform Phase, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.InterpolationType">
      <summary>
            Gets or sets the type of interpolation used to generate the waveform.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Invalid InterpolationType specified.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Monitoring.PeakPolarity">
      <summary>Specifies the polarity types for the PeakDetector class to use.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Monitoring.PeakPolarity.Peaks">
      <summary>
            Searches for positive-going bumps.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Monitoring.PeakPolarity.Valleys">
      <summary>Searches for negative-going bumps.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.AnovaModel">
      <summary>
            Specifies whether a fixed or random effect is to be used in the analysis of variance.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.AnovaModel.FixedEffect">
      <summary> 
            Uses fixed effect.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.AnovaModel.RandomEffect">
      <summary>
            Uses random effect.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter">
      <summary>
            Implements a class that filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.#ctor(System.Double[])">
      <summary>
            Creates an FirDirectFilter that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients.
            </summary>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.#ctor(System.Double[],System.Double[])">
      <summary>
            Creates an FirDirectFilter that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients and by using the specified initial conditions.
            </summary>
      <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialXConditions (parameter) must be at least the size of forwardCoefficients (parameter)- 1.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.GetCurrentFilterConditions">
      <summary>
            Gets a copy of the current filter conditions.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.Reset">
      <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.Reset(System.Double[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients.
            </summary>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.Reset(System.Double[],System.Double[])">
      <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients and a new set of initial conditions.
            </summary>
      <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
      <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the forwardCoefficients (parameter) array. 
            </param>
      <exception cref="T:System.ArgumentNullException">forwardCoefficients (parameter) is null. 
            </exception>
      <exception cref="T:System.ArgumentException">
            The size of initialXConditions (parameter) is not at least the size of forwardCoefficients (parameter)- 1.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.FilterData(System.Double[])">
      <summary>
            Filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
      <param name="inputData">
            The data to filter.
            </param>
      <returns>
            The filtered data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.SpecialFunctions">
      <summary>Provides a set of methods that implement special functions.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Bessel1st(System.Double,System.Double)">
      <summary>
            Computes the Bessel function J(r,x) of the first kind of fractional order r.
            </summary>
      <param name="order">
            The order of the function.
            </param>
      <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
      <returns>
            The value of the Bessel function evaluated at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Bessel2nd(System.Double,System.Double)">
      <summary>
            Computes the Bessel function Y(r,x) of the second kind of fractional order r, also known as the Neumann function.
            </summary>
      <param name="order">
            The order of the function.
            </param>
      <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
      <returns>
            The value of the Bessel function evaluated at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.SphericalBessel1st(System.Int32,System.Double)">
      <summary>
            Computes the spherical Bessel function of the first kind of order n.
            </summary>
      <param name="order">
            The order of the function.
            </param>
      <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
      <returns>
            The value of the Bessel function evaluated at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.SphericalBessel2nd(System.Int32,System.Double)">
      <summary>
            Computes the spherical Bessel function of the second kind of order n.
            </summary>
      <param name="order">
            The order of the function.
            </param>
      <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
      <returns>
            The value of the Bessel function evaluated at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ModifiedBessel1st(System.Double,System.Double)">
      <summary>
            Computes the modified Bessel function of the first kind of order r.
            </summary>
      <param name="order">
            The order of the function.
            </param>
      <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
      <returns>
            The value of the Bessel function evaluated at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ModifiedBessel2nd(System.Int32,System.Double)">
      <summary>
            Computes the modified Bessel function of the second kind of integer order n.
            </summary>
      <param name="order">
            The order of the function.
            </param>
      <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
      <returns>
            The evaluated Bessel function value at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Beta(System.Double,System.Double)">
      <summary>
            Computes the beta function.
            </summary>
      <param name="input">
            The first input parameter of the beta function.
            </param>
      <param name="inputY">
            The second input parameter of the beta function.
            </param>
      <returns>
            The evaluated beta function value.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteBeta(System.Double,System.Double,System.Double)">
      <summary>
            Computes the incomplete beta function.
            </summary>
      <param name="inputX">
            The first input parameter of the incomplete beta function.
            </param>
      <param name="inputY">
            The second input parameter of the incomplete beta function.
            </param>
      <param name="upperLimit">
            The upper limit of the incomplete beta function.
            </param>
      <returns>
            The evaluated beta function value.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Factorial(System.Int32)">
      <summary>
            Computes the factorial of n.
            </summary>
      <param name="n">
            The input parameter.
            </param>
      <returns>
            The factorial of n (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Gamma(System.Double)">
      <summary>
            Evaluates the gamma function.
            </summary>
      <param name="input">
            The point at which the gamma function is evaluated.
            </param>
      <returns>
            The value of the evaluated gamma function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteGamma(System.Double,System.Double)">
      <summary>
            Evaluates the incomplete gamma function.
            </summary>
      <param name="input">
            The point at which the gamma function is evaluated.
            </param>
      <param name="upperLimit">
            The upper limit of the incomplete gamma function.
            </param>
      <returns>
            The value of the incomplete gamma function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ComplementaryIncompleteGamma(System.Double,System.Double)">
      <summary>
            Computes the complementary incomplete gamma function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <param name="upperLimit">
            The upper limit of the incomplete gamma function.
            </param>
      <returns>
            The value of the evaluated complementary incomplete gamma function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.LogarithmOfFactorial(System.Int32)">
      <summary>
            Computes the natural logarithm of n!.
            </summary>
      <param name="n">
            The input argument.
            </param>
      <returns>
            The logarithm of n!.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.LogarithmOfCompleteGamma(System.Double)">
      <summary>
            Computes the natural logarithm of the complete gamma function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <returns>
            The natural logarithm of the gamma function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Psi(System.Double)">
      <summary>
            Computes the digamma (Psi) function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <returns>
            The value of the Psi function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Stirling(System.Double)">
      <summary>
            Computes the Stirling approximation to the gamma function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <returns>
            The value of the Stirling function at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.GaussHyperGeometric(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Computes the Gauss hypergeometric function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <param name="a">
            The first parameter of the Gauss hypergeometric function.
            </param>
      <param name="b">
            The second parameter of the Gauss hypergeometric function.
            </param>
      <param name="c">
            The third parameter of the Gauss hypergeometric function.
            </param>
      <returns>
            The value of the Gauss hypergeometric function at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Kummer(System.Double,System.Double,System.Double)">
      <summary>
            Computes the Kummer function, also known as the confluent hypergeometric M function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <param name="a">
            The numerator parameter.
            </param>
      <param name="b">
            The denominator parameter.
            </param>
      <returns>
            The value of the Kummer function at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Tricomi(System.Double,System.Double,System.Double)">
      <summary>
            Computes the Tricomi function, which is also known as the associated confluent hypergeometric U function.
            </summary>
      <param name="input">
            The point at which the function is evaluated.
            </param>
      <param name="a">
            The first parameter of the Tricomi function.
            </param>
      <param name="b">
            The second parameter of the Tricomi function.
            </param>
      <returns>
            The value of the Tricomi function evaluated at input (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Elliptic1st(System.Double)">
      <summary>
            Computes the elliptic integral of the first kind.
            </summary>
      <param name="modulus">
            The parameter related to modular angle.
            </param>
      <returns>
            The value of the elliptic integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteElliptic1st(System.Double,System.Double)">
      <summary>
            Computes the incomplete elliptic integral of the first kind.
            </summary>
      <param name="modulus">
            The parameter related to modular angle.
            </param>
      <param name="amplitude">
            The range of integration for the incomplete elliptic integral.
            </param>
      <returns>
            The value of the incomplete elliptic integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Elliptic2nd(System.Double)">
      <summary>
            Computes the elliptic integral of the second kind.
            </summary>
      <param name="modulus">
            The parameter related to modular angle.
            </param>
      <returns>
            The value of the elliptic integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteElliptic2nd(System.Double,System.Double)">
      <summary>
            Computes the incomplete elliptic integral of the second kind.
            </summary>
      <param name="modulus">
            The argument related to modular angle.
            </param>
      <param name="amplitude">
            The range of integration for the incomplete elliptic integral.
            </param>
      <returns>
            The value of the incomplete elliptic integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.DawsonsIntegral(System.Double)">
      <summary>
            Computes Dawson's integral.
            </summary>
      <param name="input">
            The range of Dawson's integral.
            </param>
      <returns>
            The value of Dawson's integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ExponentialIntegral(System.Double,System.Int32)">
      <summary>
            Computes the exponential integral.
            </summary>
      <param name="input">
            The input to the exponential integral.
            </param>
      <param name="exponent">
            The exponent value.
            </param>
      <returns>
            The value of the exponential integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.CosineIntegral(System.Double)">
      <summary>
            Computes the cosine integral.
            </summary>
      <param name="input">
            Any real nonnegative number.
            </param>
      <returns>
            The value of the cosine integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.SineIntegral(System.Double)">
      <summary>
            Computes the sine integral.
            </summary>
      <param name="input">
            The parameter of the sine integral.
            </param>
      <returns>
            The value of the sine integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.HyperbolicCosineIntegral(System.Double)">
      <summary>
            Computes the hyperbolic cosine integral.
            </summary>
      <param name="input">
            The input parameter of the hyperbolic cosine integral.
            </param>
      <returns>
            The value of the hyperbolic cosine integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.HyperbolicSineIntegral(System.Double)">
      <summary>
            Computes the hyperbolic sine integral.
            </summary>
      <param name="input">
            The input parameter of the hyperbolic sine integral.
            </param>
      <returns>
            The value of the hyperbolic sine integral.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Dilogarithm(System.Double)">
      <summary>
            Computes the dilogarithm function, also known as Spence's Integral.
            </summary>
      <param name="input">
            The input parameter that specifies the integral range.
            </param>
      <returns>
            The value of the dilogarithm function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ParabolicCylinder(System.Double,System.Double)">
      <summary>
            Computes the parabolic cylinder function, Dv(x).
            </summary>
      <param name="input">
            The input parameter.
            </param>
      <param name="order">
            The order of the parabolic cylinder function.
            </param>
      <returns>
            The value of parabolic cylinder function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Struve(System.Double,System.Double)">
      <summary>
            Computes the Struve function.
            </summary>
      <param name="input">
            The input parameter.
            </param>
      <param name="index">
            The index parameter.
            </param>
      <returns>
            The value of the Struve function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Zeta(System.Double)">
      <summary>
            Computes the Riemann Zeta function.
            </summary>
      <param name="input">
            The point at which the Zeta function is evaluated.
            </param>
      <returns>
            The value of Zeta function.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Airy(System.Double,System.Double@,System.Double@)">
      <summary>
            Computes the Airy functions.
            </summary>
      <param name="input">
            The input parameter of the Airy function.
            </param>
      <param name="ai">
            Upon return, contains the value of the Airy function Ai.
            </param>
      <param name="bi">
            Upon return, contains the value of the Airy function Bi.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.FresnelIntegrals(System.Double,System.Double@,System.Double@)">
      <summary>
            Computes the Fresnel sine and cosine integrals.
            </summary>
      <param name="input">
            The range of the Fresnel integrals.
            </param>
      <param name="fresnelSineIntegral">
            Upon return, contains the Fresnel sine integral value.
            </param>
      <param name="fresnelCosineIntegral">
            Upon return, contains the Fresnel cosine integral value.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.JacobianEllipticFunctions(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Determines the Jacobian elliptic functions.
            </summary>
      <param name="input">
            The input parameter.
            </param>
      <param name="integrand">
            The integrand parameter.
            </param>
      <param name="cn">
            Upon return, contains the value of the Jacobi elliptic function cn.
            </param>
      <param name="sn">
            Upon return, contains the value of the Jacobi elliptic function sn.
            </param>
      <param name="dn">
            Upon return, contains the value of the Jacobi elliptic function dn.
            </param>
      <param name="phi">
            Upon return, contains the upper limit of the integral that defines the function.
            </param>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Kelvin1st(System.Double,System.Int32)">
      <summary>
            Computes the complex Kelvin function of the first kind.
            </summary>
      <param name="input">
            The input parameter.
            </param>
      <param name="order">
            The order of the Kelvin function.
            </param>
      <returns>
            The complex value of the Kelvin function of the first kind.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Kelvin2nd(System.Double,System.Int32)">
      <summary>
            Computes the complex Kelvin function of the second kind.
            </summary>
      <param name="input">
            The input parameter.
            </param>
      <param name="order">
            The order of the Kelvin function.
            </param>
      <returns>
            The complex value of the Kelvin function of the second kind.
            </returns>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.Roots">
      <summary>
            Provides a set of methods that find the zeroes of mathematical functions.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Roots.FindComplexPolynomialRoots(System.Double[])">
      <summary>
            This method is obsolete. Use the FindPolynomialRoots
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Roots.FindPolynomialRoots(System.Double[])">
      <summary>
            Calculates the roots of a real polynomial with high precision.
            </summary>
      <param name="polynomialCoefficients">
            The coefficients of the polynomial in ascending order of power. 
            </param>
      <returns>
            The roots of the polynomial. 
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.Roots.FindPolynomialRoots(NationalInstruments.ComplexDouble[])">
      <summary>
            Calculates the roots of a complex polynomial with high precision.
            </summary>
      <param name="polynomialCoefficients">
            The coefficients of the polynomial in ascending order of power. 
            </param>
      <returns>
            The roots of the polynomial. 
            </returns>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.NormType">
      <summary>
            Specifies the type of norm used to calculate the norm of the input matrix. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.NormType.TwoNorm">
      <summary>
            Uses the Two Norm to calculate the norm of the given matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.NormType.OneNorm">
      <summary>
            Uses the One Norm to calculate the norm of the given matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.NormType.FrobeniusNorm">
      <summary>
            Uses the Frobenius Norm, or F-norm, to calculate the norm of the given matrix.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.NormType.InfiniteNorm">
      <summary>
            Uses the Infinite Norm, or I-norm, to calculate the norm of the given matrix.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter">
      <summary>
            Implements a Kaiser window FIR bandstop filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double)">
      <summary>Creates a KaiserWindowFirBandstopFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.</param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.Beta">
      <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter">
      <summary>Implements an EquiRipple highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates an EquiRippleHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="highestStopbandFrequency">
            The highest stopband frequency, in hertz. The stopband is [0, highestStopbandFrequency (parameter)].
            </param>
      <param name="lowestPassbandFrequency">
            The lowest passband frequency, in hertz. The passband is [lowestPassbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal to zero.
            
            -or-
            highestStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            highestStopbandFrequency (parameter) is greater than lowestPassbandFrequency (parameter).
            
            -or-
            lowestPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowestPassbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="highestStopbandFrequency">
            The highest stopband frequency, in hertz. The stopband is [0, highestStopbandFrequency (parameter)].
            </param>
      <param name="lowestPassbandFrequency">
            The lowest passband frequency, in hertz. The passband is [lowestPassbandFrequency (parameter), samplingFrequency (parameter)/2].
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal to zero.
            
            -or-
            highestStopbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            highestStopbandFrequency (parameter) is greater than lowestPassbandFrequency (parameter).
            
            -or-
            lowestPassbandFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowestPassbandFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.HighestStopbandFrequency">
      <summary>
            Gets the highest stopband frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.LowestPassbandFrequency">
      <summary>
            Gets the lowest passband frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter">
      <summary>Implements an EquiRipple general filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.#ctor(NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType,System.Int32,System.Double[],System.Double[],System.Double,System.Double[],System.Int32)">
      <summary>Creates a EquiRippleGeneralFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterType">
            The GeneralEquiRippleFilterType.
            </param>
      <param name="numberOfBands">
            The number of bands in the desired filter.
            </param>
      <param name="desiredFrequencyResponse">
            The desired frequency response in the i^th band. 
            </param>
      <param name="weights">
            The desired weighting factor in the i^th band. 
            The weighting factor determines the relative damping of the generated ripple for the band.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequencies">
            The desired cutoff frequencies, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired length of the window FIR filter. This parameter must be between 8 and 511, inclusive.
            If filterType (parameter) is Differentiator
             or HilbertTransform, then the value must be even.
            </param>
      <exception cref="T:System.ArgumentException">numberOfBands (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequencies (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequencies (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.Reset(NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType,System.Int32,System.Double[],System.Double[],System.Double,System.Double[],System.Int32)">
      <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterType">
            The GeneralEquiRippleFilterType.
            </param>
      <param name="numberOfBands">
            The number of bands in the desired filter.
            </param>
      <param name="desiredFrequencyResponse">
            The desired frequency response in the i^th band. 
            </param>
      <param name="weights">
            The desired weighting factor in the i^th band. 
            The weighting factor determines the relative damping of the generated ripple for the band.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequencies">
            The desired cutoff frequencies, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired length of the window FIR filter. This parameter must be between 8 and 511, inclusive.
            If filterType (parameter) is Differentiator
             or HilbertTransform, then the value must be even.
            </param>
      <exception cref="T:System.ArgumentException">numberOfBands (parameter) is less than or equal to zero. 
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequencies (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequencies (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            
            		Invalid band specification.
            
            -or-
            
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetWeights">
      <summary>Gets the desired weighting factor in the i^th band.
            </summary>
      <returns>
            The desired weighting factor in the i^th band.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetDesiredFrequencyResponse">
      <summary>
            Gets the desired frequency response in the i^th band.
            </summary>
      <returns>
            The desired frequency response in the i^th band.  </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetCutOffFrequencies">
      <summary>
            Gets the cutoff frequencies, in hertz.
            </summary>
      <returns>
            The cutoff frequencies, in hertz.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType">
      <summary>
            Gets the general EquiRipple filter type.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.Delta">
      <summary>
            Gets the computed normalized, absolute ripple size.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter">
      <summary>Implements an Elliptic bandstop filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a EllipticBandstopFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Conversion.Temperature">
      <summary>
            Represents a temperature.  Use Temperature to
            convert temperatures among Kelvin, Celsius, Fahrenheit, and Rankine.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromKelvin(System.Double)">
      <summary>
            Returns a Temperature that represents the temperature specified
            in Kelvin.
            </summary>
      <param name="kelvin">
            The temperature in Kelvin.
            </param>
      <returns>
            A Temperature that represents a temperature of
            kelvin (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromCelsius(System.Double)">
      <summary>
            Returns a Temperature that represents the temperature specified
            in degrees Celsius.
            </summary>
      <param name="degreesCelsius">
            The temperature in degrees Celsius.
            </param>
      <returns>
            A Temperature that represents a temperature of
            degreesCelsius (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromFahrenheit(System.Double)">
      <summary>
            Returns a Temperature that represents the temperature specified
            in degrees Fahrenheit.
            </summary>
      <param name="degreesFahrenheit">
            The temperature in degrees Fahrenheit.
            </param>
      <returns>
            A Temperature that represents a temperature of
            degreesFahrenheit (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromRankine(System.Double)">
      <summary>
            Returns a Temperature that represents the temperature specified
            in degrees Rankine.
            </summary>
      <param name="degreesRankine">
            The temperature in degrees Rankine.
            </param>
      <returns>
            A Temperature that represents a temperature of
            degreesRankine (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Compare(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Compares two Temperature values and returns an indication of
            their relative values.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>ValueCondition
            &lt;0
            t1 (parameter) is less than t2 (parameter)
            0
            t1 (parameter) is equal to t2 (parameter)
            &gt;0
            t1 (parameter) is greater than t2 (parameter)</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_Equality(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Indicates if two Temperature instances are equal.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if the values of t1 (parameter) and t2 (parameter)
            are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_Inequality(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Indicates if two Temperature instances are not equal.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if the values of t1 (parameter) and t2 (parameter)
            are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.CompareTo(System.Object)">
      <summary>
            Compares this instance with another instance of Temperature.
            </summary>
      <param name="obj">
            Object to compare with this instance, or null.
            </param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            

ValueCondition
            Less than zero
            
            The instance is less than obj (parameter).
            
            Zero
            
            The instance is equal to obj (parameter).
            
            Greater than zero
            The instance is greater than obj (parameter).
            				

-or-

obj (parameter) is null.

</returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not a Temperature.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Equals(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Returns a value indicating if two specified instances of 
            Temperature are equal.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if t1 (parameter) and t2 (parameter) are equal;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Equals(NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Returns a value indicating if this instance is equal to the specified 
            Temperature.
            </summary>
      <param name="t">
            A Temperature to compare with this instance.
            </param>
      <returns>true if t (parameter) represents the same temperature 
            as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this instance.
            </param>
      <returns>true if obj (parameter) is a 
            Temperature that represents the same temperature ts this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_LessThan(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Indicates if one Temperature is less than another.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if t1 (parameter) is less than 
            t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_GreaterThan(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Indicates if one Temperature is greater than another.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if t1 (parameter) is greater than 
            t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Indicates if one Temperature is less than or 
            equal to another.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if t1 (parameter) is less than or equal to
            t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
      <summary>
            Indicates if one Temperature is greater than or
            equal to another.
            </summary>
      <param name="t1">
            A Temperature.
            </param>
      <param name="t2">
            A Temperature.
            </param>
      <returns>true if t1 (parameter) is greater than or equal
            to t2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String)">
      <summary>
            Converts the string representation of a temperature to a Temperature.
            </summary>
      <param name="s">
            A string containing the temperature to convert.
            </param>
      <returns>
            A Temperature representing the temperature specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a temperature with a specified culture-specific format to
            a Temperature.
            </summary>
      <param name="s">
            A string containing the temperature to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Temperature representing the temperature specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a temperature with a specified style to
            a Temperature.
            </summary>
      <param name="s">
            A string containing the temperature to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <returns>
            A Temperature representing the temperature specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a temperature with a specified style and culture-specific format to
            a Temperature.
            </summary>
      <param name="s">
            A string containing the temperature to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Temperature representing the temperature specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Temperature@)">
      <summary>
            Converts the string representation of a temperature with a specified style and culture-specific format to
            a Temperature.
            </summary>
      <param name="s">
            A string containing the temperature to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <param name="result">
            Upon return, contains the Temperature representing the temperature specified in s (parameter).
            If the return value is false, result (parameter) is a temperature of 0 Celsius.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString(System.String)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Kelvin">
      <summary>
            Gets the value of Temperature in Kelvin.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Celsius">
      <summary>
            Gets the value of Temperature in degrees Celsius.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Fahrenheit">
      <summary>
            Gets the value of Temperature in degrees Fahrenheit.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Rankine">
      <summary>
            Gets the value of Temperature in degrees Rankine.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Temperature.AbsoluteZero">
      <summary>
            Represents a temperature of absolute zero.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Conversion.Point2D">
      <summary>
            Represents a point in two-dimensional space.  Use Point2D
            to convert coordinates between rectangular and polar representations.</summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.FromRectangular(System.Double,System.Double)">
      <summary>
            Returns a Point2D that represents a two-dimensional point with the specified
            x and y coordinates.
            </summary>
      <param name="x">
            The x-coordinate.
            </param>
      <param name="y">
            The y-coordinate.
            </param>
      <returns>
            A Point2D that represents a two-dimensional point at the rectangular coordinates 
            (x (parameter), y (parameter)).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.FromPolar(System.Double,System.Double)">
      <summary>
            Returns a Point2D that represents a two-dimensional point with the specified 
            distance and angle.
            </summary>
      <param name="r">
            The polar coordinate r, the distance from the origin.
            </param>
      <param name="theta">
            The polar coordinate theta, the angle from the positive x-axis.
            </param>
      <returns>
            A Point2D that represents a point with the polar coordinates
            (r (parameter), theta (parameter)).</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Plus">
      <summary>
            Returns this instance of the Point2D (unary plus).
            </summary>
      <returns>
            This instance of the Point2D.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Returns the specified instance of the Point2D (unary plus).
            </summary>
      <param name="p">
            A Point2D.
            </param>
      <returns>
            The specified instance of p (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Negate">
      <summary>
            Returns a Point2D with a value that is 
            the negated value of this object (unary minus).
            </summary>
      <returns>
            A Point2D with a value that is the negated value 
            of this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Returns a Point2D with a value that is the negative of the specified 
            object (unary minus).
            </summary>
      <param name="p">
            A Point2D.
            </param>
      <returns>
            A Point2D with a value that is the negative of p (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Add(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Adds the value of the specified Point2D to this object and returns a 
            new Point2D that represents the sum.
            </summary>
      <param name="p">
            The Point2D to add to this object.
            </param>
      <returns>
            A Point2D that represents the value of this 
            object plus the value of p (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Addition(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Adds the values of two Point2D objects.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>
            A Point2D with a value that is the sum of 
            p1 (parameter) and p2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Subtract(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Subtracts the value of a Point2D from this object and 
            returns a new Point2D that represents the difference.
            </summary>
      <param name="p">
            The Point2D to subtract from this object.
            </param>
      <returns>
            A Point2D that represents the value of this
            object minus the value of p (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Subtraction(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Subtracts the value of one Point2D from the value of another Point2D.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>
            A Point2D with a value that is the result of 
            p1 (parameter) minus p2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Multiply(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Multiplies a Point2D with this object and 
            returns a new Point2D that represents the product.
            </summary>
      <param name="p">
            The Point2D to multiply with this object.
            </param>
      <returns>
            A Point2D that represents the value of this
            object times the value of p (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Multiply(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Multiplies the values of two Point2D objects.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>
            A Point2D with a value that is the product of 
            p1 (parameter) and p2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Divide(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Divides this object by a Point2D and returns
            a new Point2D that represents the result.
            </summary>
      <param name="p">
            The Point2D by which to divide this object.
            </param>
      <returns>
            A Point2D that represents the value of this
            object divided by the value of p (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Division(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Divides the value of a Point2D by the value of another Point2D.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>
            A Point2D with a value that equal to is 
            p1 (parameter) divided by p2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.GetHashCode">
      <summary>
            Returns a hash code for this object.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Equality(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Returns if two Point2D objects are 
            equal.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>true if the values of p1 (parameter) and p2 (parameter)
            are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Inequality(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Returns if two Point2D objects are 
            not equal.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>true if the values of p1 (parameter) and p2 (parameter)
            are not equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Equals(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Returns a value that indicates if two specified Point2D objects are equal.
            </summary>
      <param name="p1">
            A Point2D.
            </param>
      <param name="p2">
            A Point2D.
            </param>
      <returns>true if p1 (parameter) and p2 (parameter) are equal.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Equals(System.Object)">
      <summary>
            Returns a value that indicates if this object is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this object.
            </param>
      <returns>true if obj (parameter) is a
            Point2D that represents the same value as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Equals(NationalInstruments.Analysis.Conversion.Point2D)">
      <summary>
            Returns a value that indicates if this object is equal to the specified 
            Point2D.
            </summary>
      <param name="p">
            A Point2D to compare with this object.
            </param>
      <returns>true if p (parameter) represents the same value  
            as this object.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString">
      <summary>
            Overrides ToString.
            </summary>
      <returns>
            A string representation of the object.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
      <param name="format">
            	The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Double and is applied to the coordinates of the point.
             If format (parameter) is null,  the return value uses the default format.</param>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the coordinates of the point. If formatProvider (parameter) is null, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter) and formatProvider (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString(System.String)">
      <summary>
            Returns the String representation of the value of this object using the specified format.
            </summary>
      <param name="format">
            The String that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for Double and is applied to the coordinates of the point.
             If format (parameter) is null, the return value uses the default format.
            </param>
      <returns>
            A string representation of this object as specified by format (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString(System.IFormatProvider)">
      <summary>
            Returns the String representation of the value of this object using the specified culture-specific formatting information.
            </summary>
      <param name="formatProvider">
            The IFormatProvider to use to format the value.  This IFormatProvider is
            applied to the coordinates of the point. If formatProvider (parameter) is null, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
      <returns>
            A string representation of this object as specified by formatProvider (parameter).
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Point2D.X">
      <summary>
            Gets the rectangular x-coordinate of the Point2D.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Point2D.Y">
      <summary>
            Gets the rectangular y-coordinate of the Point2D.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Point2D.R">
      <summary>
            Gets the polar coordinate r of the Point2D.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Point2D.Theta">
      <summary>
            Gets the polar coordinate theta of the Point2D.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Point2D.Origin">
      <summary>
            Gets the point (0, 0).
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Transforms">
      <summary>
            Provides a set of methods that transform data between the time and frequency domain.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])">
      <summary>
            This member is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(NationalInstruments.ComplexDouble[])">
      <summary>
            Computes, in place, the one-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal. 
            </summary>
      <param name="data">
            On input, contains the data whose FFT is to be computed. On output, contains the FFT of the time-domain signal.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(NationalInstruments.ComplexDouble[],System.Boolean)">
      <summary>Computes the one-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal with 
            the specified shift. 
            </summary>
      <param name="inputData">
            The complex time-domain signal.
            </param>
      <param name="shiftDC">
            Specifies whether to shift the DC component to the center of the FFT. If shiftDC (parameter) is set to true, the FFT
            is DC-centered. The first element of the FFT is the -PI frequency element. 
            The floor(number of elements in FFT / 2)^th element of FFT is the DC component. 
            </param>
      <returns>
            The FFT of the time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(NationalInstruments.ComplexDouble[],System.Boolean,System.Int32)">
      <summary>Computes the one-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal, based on the size specified for the FFT.
            </summary>
      <param name="inputData">
            The complex time-domain signal.
            </param>
      <param name="shiftDC">
            Specifies whether to shift the DC component to the center of the FFT. If shiftDC (parameter) is set to true, the FFT
            is DC-centered. The first element of the FFT is the -PI frequency element. 
            The floor(number of elements in FFT / 2)^th element of FFT is the DC component. 
            </param>
      <param name="fftSize">
            The desired FFT size. If fftSize (parameter) is greater than the number of elements in inputData (parameter),
             this method pads inputData (parameter) with zeros to match fftSize (parameter).
             If fftSize (parameter) is smaller than the length of inputData (parameter), only the first fftSize (parameter) 
            elements are used. 
            If fftSize (parameter) is less than 1, this method sets the length of inputData (parameter) as fftSize (parameter). 
            </param>
      <returns>
            The FFT of the time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft(System.Double[])">
      <summary>
            Computes, in place, the Fast Fourier Transform (FFT) of a real-valued array. Performing a real-valued FFT yields a complex result.
            </summary>
      <param name="realData">
            On input, the real part of the values used to compute the real-valued FFT. 
            On output, the calculated real-valued FFT.  
            The input array is modified by this method. If you need the original data, you must make a copy if it before invoking this method.
            </param>
      <returns>
            The calculated real-valued FFT.
            </returns>
      <exception cref="T:System.ArgumentException">
                    The number of samples in realData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft(System.Double[],System.Boolean,System.Int32)">
      <summary>
            Computes the Fast Fourier Transform (FFT) of a real, one-dimensional time-domain signal with the specified 
            FFT size.
            </summary>
      <param name="realData">
            The real time-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether realData (parameter) is DC-centered. If shiftDC (parameter) is set to true, realData (parameter)
            is DC-centered. If set to false, realData (parameter) is not DC-centered. 
            The first element of realData (parameter) is the DC component.
            </param>
      <param name="fftSize">The desired FFT size. If fftSize (parameter) is greater than 
            the number of elements in realData (parameter), this method pads realData (parameter) with trailing zeros to get a time-domain signal that 
            has fftSize (parameter) elements. If fftSize (parameter) is smaller than the number of elements in realData (parameter), 
            this method truncates realData (parameter). If fftSize (parameter) is less than 1, this method uses 
            the number of elements in realData (parameter) for this parameter. 
            </param>
      <returns>
            The one-dimensional FFT of the time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft(System.Double[],System.Boolean)">
      <summary>
            Computes the Fast Fourier Transform (FFT) of a real, one-dimensional time-domain signal.
            </summary>
      <param name="realData">
            The real time-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether realData (parameter) is DC-centered. If shiftDC (parameter) is set to true, realData (parameter)
            is DC-centered. If set to false, realData (parameter) is not DC-centered. 
            The first element of realData (parameter) is the DC component.
            </param>
      <returns>
            The one-dimensional FFT of the time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft2D(System.Double[0:,0:],System.Boolean)">
      <summary>
            Computes the Fast Fourier Transform (FFT) of a real, two-dimensional time-domain signal.
            </summary>
      <param name="realData">
            The real time-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether realData (parameter) is DC-centered. If shiftDC (parameter) is set to true, realData (parameter)
            is DC-centered. If set to false, realData (parameter) is not DC-centered. 
            The first element of realData (parameter) is the DC component.
            </param>
      <returns>
            The two-dimensional FFT of the time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft2D(System.Double[0:,0:],System.Boolean,System.Int32,System.Int32)">
      <summary>
            Computes the Fast Fourier Transform (FFT) of a real, two-dimensional time-domain signal with the specified 
            number of rows and columns.
            </summary>
      <param name="realData">
            The real time-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether realData (parameter) is DC-centered. If shiftDC (parameter) is set to true, realData (parameter)
            is DC-centered. If set to false, realData (parameter) is not DC-centered. 
            The first element of realData (parameter) is the DC component.
            </param>
      <param name="rowsForFft"> The number of rows on which to perform the FFT. 
            If rowsForFft (parameter) is less than 1, this method uses the number of rows of realData (parameter) for this parameter. 
            If rowsForFft (parameter) does not equal the number of rows of realData (parameter), this method truncates realData (parameter) or 
            pads realData (parameter) with zeros to create a rowsForFft (parameter) by columnsForFft (parameter) matrix for 
            which it calculates the FFT. 
            </param>
      <param name="columnsForFft">
            The number of columns on which to perform the FFT. 
            If columnsForFft (parameter) is less than 1, this method uses the number of rows of realData (parameter) for this parameter. 
            If columnsForFft (parameter) does not equal the number of rows of realData (parameter), this method truncates realData (parameter) or 
            pads realData (parameter) with zeros to create a rowsForFft (parameter) by columnsForFft (parameter) matrix for 
            which it calculates the FFT. 
            </param>
      <returns>
            The two-dimensional FFT of the time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">realData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft(System.Double[],System.Double[])">
      <summary>
            This member is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft(NationalInstruments.ComplexDouble[])">
      <summary>Computes, in place, the complex, one-dimensional inverse Fast Fourier Transform (FFT) of an input sequence.
            </summary>
      <param name="fft">
            On input, contains the data whose transform is to be calculated.
            On output, contains the calculated transform.
            </param>
      <exception cref="T:System.ArgumentNullException">fft (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft(NationalInstruments.ComplexDouble[],System.Boolean)">
      <summary>
            Computes the complex, one-dimensional inverse Fast Fourier Transform (FFT) of an input sequence with the specified shift.
            </summary>
      <param name="fft">
            The input frequency domain sequence. 
            </param>
      <param name="shiftDC">
            Specifies whether fft (parameter) is DC-centered. If shiftDC (parameter) is set to 
            true, fft (parameter)
            is DC-centered. If set to false, fft (parameter) is not DC-centered. The 
            first element of fft (parameter) is the DC component.
            </param>
      <returns>
            The frequency-domain signal. 
            </returns>
      <exception cref="T:System.ArgumentNullException">fft (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft(System.Double[],System.Double[])">
      <summary>
            This member is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft(NationalInstruments.ComplexDouble[])">
      <summary>
            Computes the real inverse Fast Fourier Transform (FFT) of an input sequence. 
            </summary>
      <param name="fft">
            Contains the ComplexDouble values used to compute the real inverse FFT.
            </param>
      <returns>
            The real part of the transform. There is no imaginary part.
            </returns>
      <exception cref="T:System.ArgumentException">
                    The number of samples in fft (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft(NationalInstruments.ComplexDouble[],System.Boolean)">
      <summary>
            Computes the real inverse Fast Fourier Transform (FFT) of an input sequence with the specified shift.
            </summary>
      <param name="fft">
            The input frequency-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether fft (parameter) is DC-centered. If shiftDC (parameter) is set to 
            true, fft (parameter)
            is DC-centered. If set to false, fft (parameter) is not DC-centered. The 
            first element of fft (parameter) is the DC component.
            </param>
      <returns>
            The frequency-domain signal. 
            </returns>
      <exception cref="T:System.ArgumentNullException">fft (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])">
      <summary>
            Calculates the power spectrum of an array.  
            </summary>
      <param name="data">
            On input, it contains the values used to compute the power spectrum. On output, it contains the power spectrum.
            </param>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.FastHartley(System.Double[])">
      <summary>
            Calculates, in place, the Fast Hartley transform of the input array.
            </summary>
      <param name="data">
            On input, contains the data to be transformed. The number of elements in data (parameter) must be a 
            valid power of two. On output, contains the calculated Hartley Transform.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in data (parameter) must be a power of two.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHartley(System.Double[])">
      <summary>Computes, in place, the Inverse Fast Hartley transform of the input array.
            </summary>
      <param name="data">
            On input, contains the real array to be transformed. On output, contains the transform. To properly calculate the Inverse Fast Hartley transform of data (parameter),
            the number of elements in the input array must be a valid power of 2. 
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in data (parameter) must be a power of two.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.FastHilbert(System.Double[])">
      <summary>
            Calculates, in place, the FastHilbert Transform of the input array.
            </summary>
      <param name="data">
            On input, contains the input array to be transformed. On output, contains the Hilbert Transform.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHilbert(System.Double[])">
      <summary>Computes, in place, the Inverse Fast Hilbert transform of the input array.
            </summary>
      <param name="data">
            On input, contains the values used to compute the Inverse Fast Hilbert transform. 
            On output, contains the transform.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])">
      <summary>
            Calculates the double-sided cross power spectrum of the input arrays and returns the complex double array.
            </summary>
      <param name="inputXData">
            The first time domain signal.
            </param>
      <param name="inputYData">
            The second time domain signal.
            </param>
      <returns>
            The double-sided cross power spectrum between signals inputXData (parameter) and inputYData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
      <summary>
            Calculates the double-sided cross power spectrum of the input arrays.
            </summary>
      <param name="inputXData">
            The first time domain signal.
            </param>
      <param name="inputYData">
            The second time domain signal.
            </param>
      <param name="realData">
            Upon return, contains the real part of the double-sided cross power spectrum between signals inputXData (parameter) and inputYData (parameter).
            </param>
      <param name="imaginaryData">
            Upon return, contains the imaginary part of the double-sided cross power spectrum between signals inputXData (parameter) and inputYData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ImpulseResponse(System.Double[],System.Double[])">
      <summary>
            Calculates the impulse response of a network based on time-domain signals, stimulus, and response. 
            </summary>
      <param name="stimulus">
            A time-domain signal, usually the network stimulus.
            </param>
      <param name="response">
            A time-domain signal, usually the network response.
            </param>
      <returns>
            The impulse response of the network based on time-domain signals, stimulus (parameter) and response (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">stimulus (parameter) is null.
            
            -or-
            response (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in stimulus (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in response (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in stimulus (parameter) must be a valid power of two and equal to the number
            of samples in response (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.NetworkFunctions(System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@)">
      <summary>
            Calculates network transfer functions from stimulus and response data.
            </summary>
      <param name="stimulus">
            The network stimulus data. Each row represents one frame of the network stimulus and is associated with the corresponding row in response (parameter). 
            </param>
      <param name="response">
            The network response data. Each row represents one frame of the network response and is associated with the corresponding row in stimulus (parameter). Specify
            this value in the same units as stimulus (parameter). 
            </param>
      <param name="dt">
            The sample period of the time-domain signal. The sample period is equivalent to 1/f, where f is the frequency of the stimulus (parameter) and response (parameter). 
            You typically specify this value in units of seconds.
            </param>
      <param name="crossPowerSpectrumMagnitude">
            Upon return, contains the magnitude component of the averaged single-sided cross power spectrum between stimulus (parameter) and response (parameter). 
            This value is in input units rms squared, where input units are the units of stimulus (parameter).
            </param>
      <param name="crossPowerSpectrumPhase">
            Upon return, contains the phase component of the the averaged single-sided cross power spectrum between stimulus (parameter) and response (parameter). 
            This value is in units of radians.
            </param>
      <param name="frequencyResponseMagnitude">
            Upon return, contains the magnitude component of the averaged single-sided transfer function between stimulus (parameter) and response (parameter). 
            </param>
      <param name="frequencyResponsePhase">
            Upon return, contains the phase component of the averaged single-sided transfer function between stimulus (parameter) and response (parameter). 
            </param>
      <param name="coherence">
            Upon return, contains the single-sided coherence function spectrum. The coherence function shows the frequency content of response (parameter) due to stimulus (parameter) 
            and measures the validity of the network frequency response measurement. This value is unitless and ranges 
            from 0(no coherence) to 1(complete coherence). 
            </param>
      <param name="impulseResponse">
            Upon return, contains the impulse response of the network based on stimulus (parameter) and response (parameter). 
            This value is in units of input units, where input units are the units of stimulus (parameter).
            </param>
      <param name="df">
            Upon return, contains the frequency interval. This value is in units of hertz if dt (parameter) is in units of seconds.
            </param>
      <exception cref="T:System.ArgumentNullException">stimulus (parameter) is null.
            
            -or-
            response (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in stimulus (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in response (parameter) is equal to zero.
            
            -or-
            stimulus (parameter) and response (parameter) must have the same dimensions.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean,System.Int32,System.Int32)">
      <summary>
            Computes the two-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal, based on the 
            number of rows and columns specified for the FFT.
            </summary>
      <param name="inputData">
            The complex time-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether to shift the DC component to the center of FFT. If shiftDC (parameter) is 
            true, the resulting FFT is DC-centered.
            If shiftDC (parameter) is false, the first element of the resulting FFT is 
            the DC component.
            </param>
      <param name="rowsForFft">
            The number of rows on which to perform the FFT. If rowsForFft (parameter) is greater than the number of rows in inputData (parameter), 
            this method pads inputData (parameter) with zeros to match rowsForFft (parameter). 
            If rowsForFft (parameter) is less than the number of rows in inputData (parameter), this method uses only the leading rowsForFft (parameter) rows to perform the FFT. 
            If rowsForFft (parameter) is less than one, this method sets the number of rows in inputData (parameter) as rowsForFft (parameter). 
            </param>
      <param name="columnsForFft">
            The number of columns on which to perform the FFT. If columnsForFft (parameter) is greater than the number of columns in inputData (parameter), 
            this method pads inputData (parameter) with zeros to match columnsForFft (parameter). 
            If columnsForFft (parameter) is less than the number of columns in inputData (parameter), this method uses only the leading columnsForFft (parameter) columns 
            to perform the FFT. If columnsForFft (parameter) is less than one, this method sets the number of columns in inputData (parameter) as columnsForFft (parameter). 
            </param>
      <returns>
            The two-dimensional FFT of the complex time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean)">
      <summary>
            Computes the two-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal.
            </summary>
      <param name="inputData">
            The complex time-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether to shift the DC component to the center of FFT. If shiftDC (parameter) is 
            true, the resulting FFT is DC-centered.
            If shiftDC (parameter) is false, the first element of the resulting FFT 
            is the DC component.
            </param>
      <returns>
            The two-dimensional FFT of the complex time-domain signal.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean)">
      <summary>
            Computes the complex, two-dimensional inverse Fast Fourier Transform (FFT) of the input signal.
            </summary>
      <param name="fft">
            The result of the inverse FFT.
            </param>
      <param name="shiftDC">
            Specifies whether fft (parameter) is DC-centered. If shiftDC (parameter) is set to 
            true, fft (parameter)
            is DC-centered. If set to false, fft (parameter) is not DC-centered. The 
            first element of fft (parameter) is the DC component.
            </param>
      <returns>
            The frequency-domain signal. 
            </returns>
      <exception cref="T:System.ArgumentNullException">fft (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean)">
      <summary>
            Computes the real, two-dimensional inverse Fast Fourier Transform (FFT) of the input signal.
            </summary>
      <param name="fft">
            The input frequency-domain signal. 
            </param>
      <param name="shiftDC">
            Specifies whether fft (parameter) is DC-centered. If shiftDC (parameter) is set to 
            true, fft (parameter)
            is DC-centered. If set to false, fft (parameter) is not DC-centered. The 
            first element of fft (parameter) is the DC component.
            </param>
      <returns>
            The frequency-domain signal. 
            </returns>
      <exception cref="T:System.ArgumentNullException">fft (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteCosineTransform1D(System.Double[])">
      <summary>
            Computes the one-dimensional Discrete Cosine Transform (DCT) of the input sequence.
            </summary>
      <param name="inputData">
            The input sequence. 
            </param>
      <returns>
            The one-dimensional DCT of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteCosineTransform1D(System.Double[],System.Int32)">
      <summary>
            Computes the one-dimensional Discrete Cosine Transform (DCT) of the input sequence with a specified DCT size.
            </summary>
      <param name="inputData">
            The input sequence. 
            </param>
      <param name="dctSize">The length of the DCT to be performed. If dctSize (parameter) is greater than the number of elements in inputData (parameter),
             the method pads inputData (parameter) with zeros to make its number of elements equal to dctSize (parameter).
             If dctSize (parameter) is less than the number of elements in inputData (parameter), then 
            inputData (parameter) is truncated. Only the leading dctSize (parameter) elements in inputData (parameter)
            are used to perform the DCT. If dctSize (parameter) is less than or equal to zero, the method uses the length of inputData (parameter)
            as dctSize (parameter). 
            </param>
      <returns>
            The one-dimensional DCT of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteCosineTransform1D(System.Double[])">
      <summary>
            Computes the one-dimensional inverse Discrete Cosine Transform (DCT) of the input sequence.
            </summary>
      <param name="inputData">
            The input sequence.
            </param>
      <returns>
            The one-dimensional inverse DCT of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteSineTransform1D(System.Double[])">
      <summary>
            Computes the one-dimensional Discrete Sine Transform (DST) of the input sequence.
            </summary>
      <param name="inputData">
            The input sequence. 
            </param>
      <returns>
            The one-dimensional DST of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteSineTransform1D(System.Double[],System.Int32)">
      <summary>
            Computes the one-dimensional Discrete Sine Transform (DST) of the input sequence with a specified DST size.
            </summary>
      <param name="inputData">
            The input sequence. 
            </param>
      <param name="dstSize">The length of the DST to be performed. If dstSize (parameter) is greater than the number of elements in inputData (parameter),
             the method pads inputData (parameter) with zeros to make its number of elements equal to dstSize (parameter).
             If dstSize (parameter) is less than the number of elements in inputData (parameter), then 
            inputData (parameter) is truncated. Only the leading dstSize (parameter) elements in inputData (parameter)
            are used to perform the DST. If dstSize (parameter) is less than or equal to zero, the method uses the length of inputData (parameter)
            as dstSize (parameter). 
            </param>
      <returns>
            The one-dimensional DST of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteSineTransform1D(System.Double[])">
      <summary>
            Computes the one-dimensional inverse Discrete Sine Transform (DST) of the input sequence.
            </summary>
      <param name="inputData">
            The input sequence.
            </param>
      <returns>
            The one-dimensional inverse DST of inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteCosineTransform2D(System.Double[0:,0:])">
      <summary>
            Computes the two-dimensional Discrete Cosine Transform (DCT) of the input signal.
            </summary>
      <param name="inputMatrix">
            The input signal.
            </param>
      <returns>
            The two-dimensional DCT of inputMatrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteCosineTransform2D(System.Double[0:,0:])">
      <summary>
            Computes the two-dimensional inverse Discrete Cosine Transform (DCT) of the input signal.
            </summary>
      <param name="inputMatrix">
            The input signal.
            </param>
      <returns>
            The two-dimensional inverse DCT of inputMatrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteSineTransform2D(System.Double[0:,0:])">
      <summary>
            Computes the two-dimensional Discrete Sine Transform (DST) of the input signal.
            </summary>
      <param name="inputMatrix">
            The input signal.
            </param>
      <returns>
            The two-dimensional DST of inputMatrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteSineTransform2D(System.Double[0:,0:])">
      <summary>
            Computes the two-dimensional inverse Discrete Sine Transform (DST) of the input signal.
            </summary>
      <param name="inputMatrix">
            The input signal.
            </param>
      <returns>
            The two-dimensional inverse DST of inputMatrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)">
      <summary>
            Calculates the Z transform along a spiral in the z-plane for a complex input sequence, based on the size of the input sequence.
            </summary>
      <param name="inputData">
            The complex input sequence.
            </param>
      <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
      <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
      <param name="algorithm">
            A value from the ChirpZTransformAlgorithm that represents the method to use to compute the Chirp-Z Transform. 
            </param>
      <returns>
            The Chirp-Z Transform of sequence inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified algorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm,System.Int32)">
      <summary>
            Calculates the Z transform along a spiral in the z-plane for a complex input sequence, based on the size of the transform.
            </summary>
      <param name="inputData">
            The complex input sequence.
            </param>
      <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
      <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
      <param name="algorithm">
            A value from the ChirpZTransformAlgorithm that represents the method to use to compute the Chirp-Z Transform. 
            </param>
      <param name="numberOfBins">
            The length of the transform. If numberOfBins (parameter) is less than 1, this method sets the length of inputData (parameter) as numberOfBins (parameter).
            </param>
      <returns>
            The Chirp-Z Transform of sequence inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified algorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(System.Double[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)">
      <summary>
            Calculates the Z transform along a spiral in the z-plane, based on the size of the input sequence.
            </summary>
      <param name="inputData">
            The input sequence.
            </param>
      <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
      <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
      <param name="algorithm">
            A value from the ChirpZTransformAlgorithm that represents the method to use to compute the Chirp-Z Transform. 
            </param>
      <returns>
            The Chirp-Z Transform of sequence inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified algorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(System.Double[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm,System.Int32)">
      <summary>
            Calculates the Z transform along a spiral in the z-plane, based on the size of the transform.
            </summary>
      <param name="inputData">
            The input sequence.
            </param>
      <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
      <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
      <param name="algorithm">
            A value from the ChirpZTransformAlgorithm that represents the method to use to compute the Chirp-Z Transform. 
            </param>
      <param name="numberOfBins">
            The length of the transform. If numberOfBins (parameter) is less than 1, this method sets the length of inputData (parameter) as numberOfBins (parameter). 
            </param>
      <returns>
            The Chirp-Z Transform of sequence inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified algorithm (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>
            Calculates the inverse Z transform along a spiral in the z-plane for a complex input sequence, based on the size of the input sequence.
            </summary>
      <param name="inputData">
            The complex input sequence.
            </param>
      <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
      <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
      <returns>
            The inverse Chirp-Z Transform of sequence inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,System.Int32)">
      <summary>
            Calculates the inverse Z transform along a spiral in the z-plane for a complex input sequence, based on the size specified for the transform.
            </summary>
      <param name="inputData">
            The complex input sequence.
            </param>
      <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
      <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
      <param name="numberOfBins">
            The length of the transform. numberOfBins (parameter) must be less than or equal to the number of elements in inputData (parameter).
            If numberOfBins (parameter) is less than 1, this method sets the length of inputData (parameter) as numberOfBins (parameter).
            </param>
      <returns>
            The inverse Chirp-Z Transform of sequence inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">numberOfBins (parameter) is greater than the number of elements in inputData (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter">
      <summary>Implements a Bessel bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates a BesselBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Conversion.Length">
      <summary>
            Represents a length.  Use Length to convert lengths
            among meters, kilometers, feet, and miles.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.FromMeters(System.Double)">
      <summary>
            Returns a Length that represents the length specified
            in meters.
            </summary>
      <param name="meters">
            The length in meters.
            </param>
      <returns>
            A Length that represents an length of 
            meters (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.FromFeet(System.Double)">
      <summary>
            Returns a Length that represents the length specified
            in feet.
            </summary>
      <param name="feet">
            The length in feet.
            </param>
      <returns>
            A Length that represents a length of
            feet (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.FromMiles(System.Double)">
      <summary>
            Returns a Length that represents the length specified
            in miles.
            </summary>
      <param name="miles">
            The length in miles.
            </param>
      <returns>
            A Length that represents a length of
            miles (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.FromKilometers(System.Double)">
      <summary>
            Returns a Length that represents the length specified
            in kilometers.
            </summary>
      <param name="kilometers">
            The length in kilometers.
            </param>
      <returns>
            A Length that represents a length of
            kilometers (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Plus">
      <summary>
            Returns this instance of Length.
            </summary>
      <returns>
            This instance of Length.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Returns the specified instance of Length (a unary plus).
            </summary>
      <param name="l">
            A Length.
            </param>
      <returns>l (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Negate">
      <summary>
            Returns a Length whose value is the negated value of
            this instance.  
            </summary>
      <returns>
            A Length whose value is the negated value of this
            instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Returns a Length whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
      <param name="l">
            A Length.
            </param>
      <returns>
            The negative of l (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Add(NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Adds a Length to this instance and returns a new 
            Length representing the sum.
            </summary>
      <param name="l">
            The Length to add to this instance.
            </param>
      <returns>
            A Length that represents the value of this instance
            plus the value of l (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Addition(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Adds two Length instances.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>
            A Length whose value is the sum of 
            l1 (parameter) and l2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Subtract(NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Subtracts a Length from this instance and returns a new 
            Length representing the difference.
            </summary>
      <param name="l">
            The Length to subtract from this instance.
            </param>
      <returns>
            A Length that represents the value of this instance
            minus the value of l (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Subtraction(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Subtracts one Length from another.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>
            A Length whose value is the result of 
            l1 (parameter) minus l2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Compare(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Compares two Length values and returns an indication of
            their relative values.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>ValueCondition
            &lt;0
            l1 (parameter) is less than l2 (parameter)
            0
            l1 (parameter) is equal to l2 (parameter)
            &gt;0
            l1 (parameter) is greater than l2 (parameter)</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Equality(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Indicates if two Length instances are equal.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if the values of l1 (parameter) and l2 (parameter)
            are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Inequality(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Indicates if two Length instances are not equal.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if the values of l1 (parameter) and l2 (parameter)
            are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.CompareTo(System.Object)">
      <summary>
            Compares this instance with another instance of Length.
            </summary>
      <param name="obj">
            Object to compare with this instance, or null.
            </param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            

ValueCondition
            Less than zero
            
            The instance is less than obj (parameter).
            
            Zero
            
            The instance is equal to obj (parameter).
            
            Greater than zero
            The instance is greater than obj (parameter).
            				

-or-

obj (parameter) is null.

</returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not a Length.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Equals(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Returns a value indicating if two specified instances of 
            Length are equal.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if l1 (parameter) and l2 (parameter) are equal;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Equals(NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Returns a value indicating if this instance is equal to the specified 
            Length.
            </summary>
      <param name="l">
            A Length to compare with this instance.
            </param>
      <returns>true if l (parameter) represents the same Length
            as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this instance.
            </param>
      <returns>true if obj (parameter) is a 
            Length that represents the same Length as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_LessThan(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Indicates if one Length is less than another.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if l1 (parameter) is less than 
            l2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_GreaterThan(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Indicates if one Length is greater than another.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if l1 (parameter) is greater than 
            l2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Indicates if one Length is less than or 
            equal to another.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if l1 (parameter) is less than or equal to
            l2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
      <summary>
            Indicates if one Length is greater than or
            equal to another.
            </summary>
      <param name="l1">
            A Length.
            </param>
      <param name="l2">
            A Length.
            </param>
      <returns>true if l1 (parameter) is greater than or equal
            to l2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String)">
      <summary>
            Converts the string representation of a length to a Length.
            </summary>
      <param name="s">
            A string containing the length to convert.
            </param>
      <returns>
            A Length representing the length specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a length with a specified culture-specific format to
            a Length.
            </summary>
      <param name="s">
            A string containing the length to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Length representing the length specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a length with a specified style to
            a Length.
            </summary>
      <param name="s">
            A string containing the length to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <returns>
            A Length representing the length specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a length with a specified style and culture-specific format to
            a Length.
            </summary>
      <param name="s">
            A string containing the length to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Length representing the length specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Length@)">
      <summary>
            Converts the string representation of a length with a specified style and culture-specific format to
            a Length.
            </summary>
      <param name="s">
            A string containing the length to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <param name="result">
            Upon return, contains the Length representing the length specified in s (parameter).
            If the return value is false, result (parameter) is a length of 0 feet.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString(System.String)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Length.Feet">
      <summary>
            Gets the value of Length in feet.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Length.Meters">
      <summary>
            Gets the value of Length in meters.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Length.Miles">
      <summary>
            Gets the value of Length in miles.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Length.Kilometers">
      <summary>
            Gets the value of Length in kilometers.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Length.Zero">
      <summary>
            Represents a length of zero.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.ArrayOperation">
      <summary>Provides a set of methods that perform array operations.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation1D(System.Double[],System.Double,System.Double)">
      <summary>Performs a linear evaluation of the specified array.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="slope">
            The multiplicative constant.
            </param>
      <param name="offset">
            The additive constant.
            </param>
      <returns>
            The linear evaluation of the input array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation2D(System.Double[0:,0:],System.Double,System.Double)">
      <summary>
            Performs a linear evaluation  of the specified matrix.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="slope">
            The multiplicative constant.
            </param>
      <param name="offset">
            The additive constant.
            </param>
      <returns>
            The linear evaluation of the input matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation1D(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
      <summary>Performs a linear evaluation of the complex array.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="slope">
            The multiplicative constant.
            </param>
      <param name="offset">
            The additive constant.
            </param>
      <returns>
            The linear evaluation of the input array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation1D(System.Double[],System.Double[])">
      <summary>
            Performs a PolynomialEvaluation1D on the input array.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="coefficients">
            The coefficients of the polynomial to use in the evaluation of the input array. 
            If there are k coefficients, the order of the polynomial is k-1.
            </param>
      <returns>
            The PolynomialEvaluation1D of the input array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            
            -or-
            coefficients (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation2D(System.Double[0:,0:],System.Double[])">
      <summary>
            Performs a PolynomialEvaluation2D on the input matrix.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="coefficients">
            The coefficients of the polynomial to use in the evaluation of the input matrix. 
            If there are k coefficients, the order of the polynomial is k-1.
            </param>
      <returns>
            The PolynomialEvaluation2D of the input matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            
            -or-
            coefficients (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Scale1D(System.Double[],System.Double@,System.Double@)">
      <summary>Scales the input array to be in the range [-1:1] and returns the scale and offset.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="offset">
            Upon return, contains the calculated offset.
            </param>
      <param name="scale">
            Upon return, contains the scaling factor.
            </param>
      <returns>
            The scaled array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Scale2D(System.Double[0:,0:],System.Double@,System.Double@)">
      <summary>
            Scales the input matrix in the range [-1:1] and returns the scale and offset.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="offset">
            Upon return, contains the calculated offset.
            </param>
      <param name="scale">
            Upon return, contains the scaling factor.
            </param>
      <returns>
            The scaled matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.QuickScale1D(System.Double[],System.Double@)">
      <summary>
            Scales an array to the range [-1:1]. This method does not use the offset for non-zero mean data.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <param name="scale">
            Upon return, contains the maximum absolute value in the input array.
            </param>
      <returns>
            The scaled array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.QuickScale2D(System.Double[0:,0:],System.Double@)">
      <summary>
            Scales a matrix to the range [-1:1]. This method does not use the offset for non-zero mean data.
            </summary>
      <param name="inputData">
            The input matrix.
            </param>
      <param name="scale">
            Upon return, contains the maximum absolute value in the input matrix.
            </param>
      <returns>
            The scaled matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)">
      <summary>
            Finds the maximum and minimum values in the array. 
            </summary>
      <param name="inputData">
            The array from which the maximum and minimum values are determined.
            </param>
      <param name="maximum">
            Upon return, contains the maximum value found in the input array.
            </param>
      <param name="minimum">
            Upon return, contains the minimum value found in the input array.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Int32@,System.Double@,System.Int32@)">
      <summary>
            Finds the maximum and minimum values in the array as well as their locations in the array. 
            </summary>
      <param name="inputData">
            The array from which the maximum and minimum values—and their locations within the array—are determined.
            </param>
      <param name="maximum">
            Upon return, contains the maximum value found in the input array.
            </param>
      <param name="indexOfMaximum">
            Upon return, contains the index of the maximum value found in inputData (parameter).
            </param>
      <param name="minimum">
            Upon return, contains the minimum value found in the input array.
            </param>
      <param name="indexOfMinimum">
            Upon return, contains the index of the minimum value found in inputData (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Double@)">
      <summary>
            Finds the maximum and minimum values in the matrix. 
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="maximum">
            Upon return, contains the maximum value found in the input matrix.
            </param>
      <param name="minimum">
            Upon return, contains the minimum value found in the input matrix.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Int32@,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
      <summary>
            Calculates the maximum and minimum values in the matrix as well as their locations in the matrix. 
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="maximum">
            Upon return, contains the maximum value found in the input matrix.
            </param>
      <param name="rowOfMaximum">
            Upon return, contains the row index of the maximum value found in the input matrix.
            </param>
      <param name="columnOfMaximum">
            Upon return, contains the column index of the maximum value found in the input matrix.
            </param>
      <param name="minimum">
            Upon return, contains the minimum value found in the input matrix.
            </param>
      <param name="rowOfMinimum">
            Upon return, contains the row index of the minimum value found in the input matrix.
            </param>
      <param name="columnOfMinimum">
            Upon return, contains the column index of the minimum value found in the input matrix.
            </param>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])">
      <summary>
            Returns the maximum value in the array. 
            </summary>
      <param name="inputData">
            The array from which the maximum value is determined.
            </param>
      <returns>
            The maximum value in the array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])">
      <summary>
            Returns the minimum value in the array. 
            </summary>
      <param name="inputData">
            The array from which the minimum value is determined.
            </param>
      <returns>
            The minimum value in the array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])">
      <summary>
            Returns the index of the maximum value in the array. 
            </summary>
      <param name="inputData">
            The array from which the maximum value location is determined.
            </param>
      <returns>
            The index of the maximum value found in inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])">
      <summary>
            Returns the index of the minimum value in the array. 
            </summary>
      <param name="inputData">
            The array from which the minimum value location is determined.
            </param>
      <returns>
            The index of the minimum value found in inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Shift(System.Double[],System.Int32)">
      <summary>
            Shifts the position of elements in an array.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="numberOfShifts">
            The number of times element positions are shifted in the input array. If this value is less than 0, elements are shifted to the left. 
            If this value is greater than 0, elements are shifted to the right.
            </param>
      <returns>
            The shifted array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            numberOfShifts (parameter) is greater than the number of samples in inputData (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Clip(System.Double[],System.Double,System.Double)">
      <summary>
            Constrains the value of the elements of an array between specified limits.
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="upperLimit">
            The upper limit for the clipping operation.  Array elements greater than this value are set equal to this value.
            </param>
      <param name="lowerLimit">
            The lower limit for the clipping operation.  Array elements less than this value are set equal to this value.
            </param>
      <returns>
            The array of clipped values.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            		The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            lowerLimit (parameter) is greater than upperLimit (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Sum1D(System.Double[])">
      <summary>
            Calculates the sum of the elements of the input array.
            </summary>
      <param name="inputData">
            The input array whose elements are summed.
            </param>
      <returns>
            The sum of all the elements in the input array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Sum2D(System.Double[0:,0:])">
      <summary>
            Calculates the sum of the elements of the input matrix.
            </summary>
      <param name="inputData">
            The input matrix whose elements are summed.
            </param>
      <returns>
            The sum of all the elements in the input matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Concatenate(System.Double[],System.Double[])">
      <summary>
            Appends the data from the two input arrays and returns one 
            larger array.
            </summary>
      <param name="inputDataX">
            The first array.
            </param>
      <param name="inputDataY">
            The second array.
            </param>
      <returns>
            The concatenated array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputDataX (parameter) is null.
            
            	-or-
            inputDataY (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Concatenate(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
      <summary>
            Appends the data from the two ComplexDouble input arrays and returns one 
            larger array.
            </summary>
      <param name="inputDataX">
            The first ComplexDouble array.
            </param>
      <param name="inputDataY">
            The second ComplexDouble array.
            </param>
      <returns>
            The concatenated ComplexDouble array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputDataX (parameter) is null.
            
            	-or-
            inputDataY (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Normalize1D(System.Double[],System.Double@,System.Double@)">
      <summary>
            Normalizes the input vector.  
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="mean">
            Upon return, contains the average value of the input vector.
            </param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the input vector.
            </param>
      <returns>
            The normalized representation of the input vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Normalize2D(System.Double[0:,0:],System.Double@,System.Double@)">
      <summary>
            Normalizes the input matrix.  
            </summary>
      <param name="inputData">
            The input data.
            </param>
      <param name="mean">
            Upon return, contains the average value of the input matrix.
            </param>
      <param name="standardDeviation">
            Upon return, contains the standard deviation of the input matrix.
            </param>
      <returns>
            The normalized representation of the input matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyRow(System.Double[0:,0:],System.Int32)">
      <summary>Copies the specified row of the matrix into an array.
            </summary>
      <param name="inputData">The input matrix.
            </param>
      <param name="rowIndex">The index of the row to copy.
            </param>
      <returns>
            The array that contains the copied data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">rowIndex (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyRow(NationalInstruments.ComplexDouble[0:,0:],System.Int32)">
      <summary>Copies the specified row of the ComplexDouble matrix into an array.
            </summary>
      <param name="inputData">The ComplexDouble input matrix.
            </param>
      <param name="rowIndex">The index of the row to copy.
            </param>
      <returns>
            The ComplexDouble array that contains the copied data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">rowIndex (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyColumn(System.Double[0:,0:],System.Int32)">
      <summary>Copies the specified column of a matrix into an array.
            </summary>
      <param name="inputData">The input matrix.
            </param>
      <param name="columnIndex">The index of the column to copy.
            </param>
      <returns>
            The array that contains the copied data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">columnIndex (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyColumn(NationalInstruments.ComplexDouble[0:,0:],System.Int32)">
      <summary>Copies the specified column of a ComplexDouble matrix into an array.
            </summary>
      <param name="inputData">The input ComplexDouble matrix.
            </param>
      <param name="columnIndex">The index of the column to copy.
            </param>
      <returns>
            The ComplexDouble  array that contains the copied data.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">columnIndex (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin(System.Double[],System.Double@,System.Int32@,System.Double@,System.Int32@)">
      <summary>
            This method is obsolete. Use the MaxMin1D
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin(System.Double[0:,0:],System.Double@,System.Int32@,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
      <summary>
            This method is obsolete. Use the MaxMin2D
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType">
      <summary>
            Specifies the type of EquiRipple filter to use.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband">
      <summary>
            A multiband filter type.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator">
      <summary>
            A differentiator filter type.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform">
      <summary>
            A Hilbert transform filter type.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal">
      <summary>Generates a white noise signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.#ctor">
      <summary>
            Creates a WhiteNoiseSignal using a seed 
            derived from the system time.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.#ctor(System.Double)">
      <summary>
            Creates a WhiteNoiseSignal with the 
            specified amplitude, using a seed derived from the system time.
            </summary>
      <param name="amplitude">
            The amplitude of the resulting white noise signal.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.#ctor(System.Double,System.Int32)">
      <summary>
            Creates a WhiteNoiseSignal with the 
            specified amplitude and seed.
            </summary>
      <param name="amplitude">
            The amplitude of the resulting white noise signal.
            </param>
      <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Reset">
      <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing a white noise waveform. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz. This method ignores this parameter.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the white noise waveform.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The internal memory state was not initialized correctly.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Seed">
      <summary>Returns the Seed of the resulting white noise waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Amplitude">
      <summary>
            Gets or sets the waveform amplitude.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal">
      <summary>
            Generates a Gaussian noise signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.#ctor">
      <summary>Creates a GaussianNoiseSignal using 
            a seed derived from the system time.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.#ctor(System.Double)">
      <summary>
            Creates a GaussianNoiseSignal with the 
            specified standard deviation, using a seed derived from the system time.
            </summary>
      <param name="standardDeviation">
            The standard deviation of the Gaussian noise distribution.
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.#ctor(System.Double,System.Int32)">
      <summary>
            Creates a GaussianNoiseSignal with 
            the specified standard deviation and seed.</summary>
      <param name="standardDeviation">
            The standard deviation of the Gaussian noise distribution.
            </param>
      <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Reset">
      <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array of random, Gaussian-distributed values. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz. This method ignores this parameter.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the random, Gaussian-distributed values.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The internal memory state was not initialized correctly.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.StandardDeviation">
      <summary>
            Gets the standard deviation of the Gaussian noise pattern.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Seed">
      <summary>
            Gets the initial Seed value. 
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator">
      <summary>Generates sine, square, sawtooth, and triangle waveforms.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor">
      <summary>Creates a basic function generator.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal)">
      <summary>Creates a basic function generator with the specified signal type.
            </summary>
      <param name="signalType">
            The signal type specified using BasicFunctionGeneratorSignal.
            </param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid signalType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double)">
      <summary>Creates a basic function generator with the specified signal type, frequency, and amplitude.
            </summary>
      <param name="signalType">
            The signal type specified using BasicFunctionGeneratorSignal.
            </param>
      <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid signalType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double,System.Double)">
      <summary>Creates a basic function generator with the specified signal type, frequency, amplitude, and phase.
            </summary>
      <param name="signalType">
            The signal type specified using BasicFunctionGeneratorSignal.
            </param>
      <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid signalType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates a basic function generator 
            with the specified signal type, frequency, amplitude, phase, offset, sampling rate, and number of 
            samples.
            </summary>
      <param name="signalType">
            The signal type specified using BasicFunctionGeneratorSignal.
            </param>
      <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <param name="offset">
            The offset of the waveform.
            </param>
      <param name="samplingRate">
            The sampling rate of the waveform, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples of the waveform.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid signalType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
      <summary>Creates a basic function generator 
            with the specified signal type, frequency, amplitude, phase, offset, sampling rate, number of 
            samples, and duty cycle.
            </summary>
      <param name="signalType">
            The signal type specified using BasicFunctionGeneratorSignal.
            </param>
      <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <param name="offset">
            The offset of the waveform.
            </param>
      <param name="samplingRate">
            The sampling rate of the waveform, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples of the waveform.
            </param>
      <param name="dutyCycle">
            The duty cycle of the waveform, as a percentage, if it is a Square signal.
            This parameter must be in the range of 0.0 to 100.0, inclusive.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or-
            dutyCycle (parameter) is not between 0 and 100.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid signalType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Reset">
      <summary>
            Resets the phase of the signal to its initial phase.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate">
      <summary>Generates the selected waveform with the specified parameters.
            </summary>
      <returns>
            The selected waveform.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave">
      <summary>
            Generates a sine wave.
            </summary>
      <returns>
            An array containing the sine wave.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Generates a sine wave using the specified frequency, amplitude, phase, offset, sampling rate, and number of samples.
            </summary>
      <param name="frequency">
            The frequency, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <param name="offset">
            The offset of the waveform.
            </param>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to generate.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
      <returns>
            An array containing the sine waveform.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave">
      <summary>
            Generates a square wave.
            </summary>
      <returns>
            An array containing the square wave.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            Generates a square wave using the specified frequency, amplitude, phase, 
            offset, sampling rate, number of samples, and duty cycle.
            </summary>
      <param name="frequency">
            The frequency, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <param name="offset">
            The offset of the waveform.
            </param>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to generate.
            </param>
      <param name="dutyCycle">
            The duty cycle of the square waveform, as a percentage. This parameter must be in the range of 0.0 to 100.0, inclusive.
            </param>
      <returns>
            An array containing the square waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or-
            dutyCycle (parameter) is not between 0 and 100.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave">
      <summary>
            Generates a triangle waveform.
            </summary>
      <returns>
            An array containing the triangle waveform.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Generates a triangle waveform using the specified frequency, amplitude, phase, offset, 
            sampling rate, and number of samples.
            </summary>
      <param name="frequency">
            The frequency, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <param name="offset">
            The offset of the waveform.
            </param>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to generate.
            </param>
      <returns>
            An array containing the triangle waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave">
      <summary>
            Generates a sawtooth waveform.
            </summary>
      <returns>
            An array containing the sawtooth waveform.
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Generates a sawtooth waveform using the specified frequency, amplitude, phase, offset, sampling rate, and number of samples.
            </summary>
      <param name="frequency">
            The frequency, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the waveform.
            </param>
      <param name="phase">
            The phase of the waveform, in degrees.
            </param>
      <param name="offset">
            The offset of the waveform.
            </param>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The number of samples to generate.
            </param>
      <returns>
            An array containing the sawtooth waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            
            -or-
            samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSignalType">
      <summary>
            Gets the default signal type.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency">
      <summary>
            Gets the default frequency of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude">
      <summary>
            Gets the default amplitude of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase">
      <summary>
            Gets the default phase of the signal, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset">
      <summary>
            Gets the default offset of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultDutyCycle">
      <summary>
            Gets the default duty cycle of the signal, as a percentage.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples">
      <summary>
            Gets the default number of samples returned from each call to Generate.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate">
      <summary>
            Gets the default sampling rate of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.SignalType">
      <summary>
            Gets or sets the type of signal to generate.
            </summary>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified value is not valid enum value. Use BasicFunctionGeneratorSignal to specify a valid value.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Frequency">
      <summary>
            Gets or sets the waveform frequency, in hertz.
            </summary>
      <exception cref="T:System.ArgumentException">Frequency cannot be less than 0.0.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Amplitude">
      <summary>
            Gets or sets the waveform amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase">
      <summary>
            Gets or sets the phase of the waveform, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Offset">
      <summary>
            Gets or sets the offset of the waveform.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DutyCycle">
      <summary>
            Gets or sets the square waveform duty cycle, in percent.
            </summary>
      <exception cref="T:System.ArgumentException">DutyCycle is not between 0.0 and 100.0.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.SamplingRate">
      <summary>
            Gets or sets the sampling rate, in hertz.
            </summary>
      <exception cref="T:System.ArgumentException">SamplingRate cannot be less than 0.0.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples">
      <summary>
            Gets or sets the number of samples in the waveform.
            </summary>
      <exception cref="T:System.ArgumentException">NumberOfSamples cannot be less than zero.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.ReorderMechanism">
      <summary>
            Specifies how to reorder the computed eigenvalues and corresponding Schur vectors. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.None">
      <summary>
            No reordering is done.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.RealAscending">
      <summary>
            The eigenvalues and corresponding Schur vectors are reordered in real ascending order.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.RealDescending">
      <summary>
            The eigenvalues and corresponding Schur vectors are reordered in real descending order.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.MagnitudeAscending">
      <summary>
            The eigenvalues and corresponding Schur vectors are reordered in magnitude ascending order.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.MagnitudeDescending">
      <summary>
            The eigenvalues and corresponding Schur vectors are reordered in magnitude descending order.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm">
      <summary>
            Specifies the fit algorithm used by the specified 
            PolynomialFit or 
            PolynomialFitInPlace curve-fitting method.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.Svd">
      <summary>
            The specified PolynomialFit or 
            PolynomialFitInPlace curve-fitting method 
            uses the Singular Value Decomposition (SVD) algorithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.QR">
      <summary>
            The specified PolynomialFit or 
            PolynomialFitInPlace curve-fitting method 
            uses the QR algorithm. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.LU">
      <summary>
            The specified PolynomialFit or 
            PolynomialFitInPlace curve-fitting method 
            uses the LU algorithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.Cholesky">
      <summary>
            The specified PolynomialFit or 
            PolynomialFitInPlace curve-fitting method 
            uses the Cholesky algorithm.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.SignalProcessing">
      <summary>Provides a set of methods that perform numeric signal processing tasks.</summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(System.Double[],System.Double[])">
      <summary>
            Calculates the convolution of the input arrays.
            </summary>
      <param name="inputXData">
            The first signal to be mixed using the convolve method.
            </param>
      <param name="inputYData">
            The second signal to be mixed using the convolve method.
            </param>
      <returns>
            The convolution of inputXData (parameter) and inputYData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])">
      <summary>
            Calculates the autocorrelation of the input array.
            </summary>
      <param name="inputData">
            The input array.
            </param>
      <returns>
            The autocorrelation of the input array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])">
      <summary>
            Calculates the cross correlation of the input arrays.
            </summary>
      <param name="inputXData">
            The first array to be compared using the cross correlate method.
            </param>
      <param name="inputYData">
            The second array to be compared using the cross correlate method.
            </param>
      <returns>
            The cross correlation of the input arrays, inputXData (parameter) and inputYData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Integrate(System.Double[],System.Double,System.Double,System.Double)">
      <summary>Performs the discrete integration of the sampled signal. 
            </summary>
      <param name="inputData">
            The array to be integrated using Simpson's Rule.
            </param>
      <param name="dt">
            The sampling interval used in the integration.
            </param>
      <param name="initialCondition">
            The value preceding the first element of the input array. 
            </param>
      <param name="finalCondition">
            The value following the last element of the input array.
            </param>
      <returns>
            The integral values of the input array, inputData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            dt (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double,System.Double)">
      <summary>
            Calculates the discrete difference of the input array.
            </summary>
      <param name="inputData">
            The array to be differentiated.
            </param>
      <param name="dt">
            The sampling interval used in the differentiation of the input array.
            </param>
      <param name="initialCondition">
            The value preceding the first element of the input array. When the differentiation formula is applied to each array element, 
            the value of the preceding array element is used.
            </param>
      <param name="finalCondition">
            The value following the last element of the input array. When the differentiation formula is applied to each array element,
            the value of the next array element is used.
            </param>
      <returns>
            The differentiated array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            dt (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Decimate(System.Double[],System.Int32,System.Boolean)">
      <summary>Decimates the input array by a decimating factor.
            </summary>
      <param name="inputData">
            The input array to be decimated.
            </param>
      <param name="decimatingFactor">
            The factor by which inputData (parameter) is decimated. decimatingFactor (parameter) must be greater than zero. 
            </param>
      <param name="averagingOn">
            The Boolean that decides how the data points in inputData (parameter) are handled. When averagingOn (parameter) is set to false, 
            every decimating factor point is kept from inputData (parameter). When averagingOn (parameter) is set to true, 
            each output point in decimatedValues (parameter) is the mean of the decimatingFactor (parameter) input points. 
            </param>
      <returns>
            The decimated array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            decimatingFactor (parameter) is less than or equal to zero.
            
            -or-
            decimatingFactor (parameter) is greater than the number of samples in inputData (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Decimate(NationalInstruments.ComplexDouble[],System.Int32,System.Boolean)">
      <summary>Decimates the ComplexDouble input array by a decimating factor.
            </summary>
      <param name="inputData">
            The ComplexDouble input array to be decimated.
            </param>
      <param name="decimatingFactor">
            The factor by which inputData (parameter) is decimated. decimatingFactor (parameter) must be greater than zero. 
            </param>
      <param name="averagingOn">
            The Boolean that decides how the data points in inputData (parameter) are handled. When averagingOn (parameter) is set to false, 
            every decimating factor point is kept from inputData (parameter). When averagingOn (parameter) is set to true, 
            each output point in decimatedValues (parameter) is the mean of the decimatingFactor (parameter) input points. 
            </param>
      <returns>
            The decimated array.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputData (parameter) is equal to zero.
            
            -or-
            decimatingFactor (parameter) is less than or equal to zero.
            
            -or-
            decimatingFactor (parameter) is greater than the number of samples in inputData (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.PulseParameters(System.Double[],System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
      <summary>
            Analyzes an input pulse and generates the parameters which best describe the pulse.
            </summary>
      <param name="inputData">
            The values that represent the input pulse signal. 
            </param>
      <param name="amplitude90Percent">
            Upon return, contains the ninety percent value of the pulse amplitude.
            </param>
      <param name="amplitude50Percent">
            Upon return, contains the fifty percent value of the pulse amplitude.
            </param>
      <param name="amplitude10Percent">
            Upon return, contains the ten percent value of the pulse amplitude.
            </param>
      <param name="topValue">
            Upon return, contains the top value of the input pulse.
            </param>
      <param name="baseValue">
            Upon return, contains the base value of the input pulse.
            </param>
      <param name="overshoot">
            Upon return, contains the value of the pulse overshoot.
            </param>
      <param name="undershoot">
            Upon return, contains the value of the pulse undershoot.
            </param>
      <param name="delay">
            Upon return, contains the number of elements before the pulse is detected.
            </param>
      <param name="width">
            Upon return, contains the number of elements representing the duration of the pulse.
            </param>
      <param name="riseTime">
            Upon return, contains the value of the pulse rise time computed by taking the index of the amplitude90Percent (parameter)
            value minus the index of the amplitude10Percent (parameter) value.
            </param>
      <param name="fallTime">
            Upon return, contains the value of the pulse fall time computed by taking the index of the amplitude10Percent (parameter) 
            value minus the index of the amplitude90Percent (parameter) value.
            </param>
      <param name="slewRate">
            Upon return, contains the value of the pulse slew rate.
            </param>
      <returns>
            The amplitude of the pulse.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Deconvolve(System.Double[],System.Double[])">
      <summary>
            Calculates the deconvolution of the input arrays. The deconvolution operation 
            is realized using Fourier transform pairs.
            </summary>
      <param name="convolvedData">
            The set of input data. The number of elements must be greater than or equal to the number of elements in inputYData (parameter).
            If the number of elements is less than the number of elements in inputYData (parameter),  no data is returned.
            </param>
      <param name="inputYData">
            The input array with which convolvedData (parameter) is deconvolved. 
            </param>
      <returns>
            The deconvolution of convolvedData (parameter) and inputYData (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">convolvedData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.UnwrapPhase(System.Double[])">
      <summary>
            Unwraps the phase array by eliminating discontinuities whose absolute values exceed Pi. 
            </summary>
      <param name="phase">
            On input, an array of discontinuous phase values. On output, an array of continuous phase values. Phase 
            is in radians.
            </param>
      <exception cref="T:System.ArgumentNullException">phase (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in phase (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter">
      <summary>
            Implements a windowed FIR lowpass filter using the specified window type.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>Creates a WindowedFirLowpassFilter using the 
            specified filter parameters. Do not use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>Creates a WindowedFirLowpassFilter using the 
            specified filter parameters. Use this method with a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter 
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="windowType">
            The type of smoothing window specified using FirWindowType. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
      <param name="windowParameter">
            The WindowParameter
            used with a Kaiser, 
            Gaussian, or DolphChebyshev window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.WindowType">
      <summary>
            Gets the window type.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.WindowParameter">
      <summary>
            Gets the window parameter when using a 
            Kaiser, 
            Gaussian, or DolphChebyshev window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter">
      <summary>
            Implements an inverse Chebyshev highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates an InverseChebyshevHighpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter">
      <summary>Implements an Elliptic bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a EllipticBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            
            -or-
            stopbandRipple (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            
            -or-
            stopbandAttenuation (parameter) must be greater than stopbandRipple (parameter). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.StopbandRipple">
      <summary>
            Gets the stopband ripple, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Constants">
      <summary>
            Provides frequently used mathematical and physical constants.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.AvogadroConstant">
      <summary>
            Represents Avogadro's constant in mol^-1.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.ElementaryCharge">
      <summary>
            Represents the elementary charge in C.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.E">
      <summary>
            Represents the base of the natural logarithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.GravitationalConstant">
      <summary>
            Represents the Newtonian constant of gravitation, G,
            in m^3 kg^-1 s^-2.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.HalfPI">
      <summary>
            Represents the value of Pi divided by 2.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.LogOf10">
      <summary>
            Represents the natural log of 10.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.LogOf2">
      <summary>
            Represents the natural log of 2.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.LogOfPI">
      <summary>
            Represents the natural log of Pi.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.Log10OfE">
      <summary>
            Represents the base 10 logarithm of the base of the natural logarithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.Log10OfPI">
      <summary>
            Represents the log to the base 10 of Pi.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.MolarGasConstant">
      <summary>
            Represents the molar gas constant, R,
            in J mol^-1 
            K^-1.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.PI">
      <summary>
            Represents the value of Pi.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.PlanckConstant">
      <summary>
            Represents Planck's constant, h, in J s.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.PlanckConstantOverTwoPI">
      <summary>
            Represents Planck's constant divided by two times Pi, h-bar, in J s.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.ReciprocalOfE">
      <summary>
            Represents the reciprocal of the base of the natural logarithm.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.ReciprocalOfPI">
      <summary>
            Represents the reciprocal of Pi. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.RydbergConstant">
      <summary>
            Represents Rydberg's constant in m^-1.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.SpeedOfLight">
      <summary>
            Represents the speed of light in vacuum in m s^-1.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.ThreeHalvesPI">
      <summary>
            Represents the value of Pi multiplied by 3/2.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.TwoPI">
      <summary>
            Represents the value of Pi multiplied by 2.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Constants.AccelerationOfGravity">
      <summary>
            Represents the adopted standard acceleration of gravity in m s^-2.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType">
      <summary>
            Specifies the spectrum type of the input function.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Power">
      <summary>
            Specifies a Power (volts rms squared) input spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Amplitude">
      <summary>
            Specifies an Amplitude (volts rms) input spectrum.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Gain">
      <summary>
            Specifies a Gain input spectrum.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.SineSignal">
      <summary>Generates a sine signal.  
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor">
      <summary>
            Creates a SineSignal.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor(System.Double)">
      <summary>
            Creates a SineSignal with the 
            specified frequency.
            </summary>
      <param name="frequency">
            The frequency of the resulting sine wave signal, in hertz.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor(System.Double,System.Double)">
      <summary>
            Creates a SineSignal with the 
            specified frequency and amplitude.
            </summary>
      <param name="frequency">
            The frequency of the resulting sine wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting sine wave signal.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Creates a SineSignal with the 
            specified frequency, amplitude, and phase.
            </summary>
      <param name="frequency">
            The frequency of the resulting sine wave signal, in hertz.
            </param>
      <param name="amplitude">
            The amplitude of the resulting sine wave signal.
            </param>
      <param name="phase">
            The initial phase of the resulting sine wave signal, in degrees.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">frequency (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Reset">
      <summary>
            Resets the phase of the signal to its initial value.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)">
      <summary>
            Generates an array containing a sine waveform. 
            </summary>
      <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
      <param name="numberOfSamples">
            The desired number of samples.
            </param>
      <returns>
            The array containing the sine waveform.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">samplingRate (parameter) is less than or equal to zero.
            
            -or-
            numberOfSamples (parameter) is less than or equal to zero.
            
            -or
            numberOfSamples (parameter) is greater than MaxValue.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultFrequency">
      <summary>
            Gets the DefaultFrequency of the signal, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultAmplitude">
      <summary>
            Gets the DefaultAmplitude of the signal.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultPhase">
      <summary>
            Gets the DefaultPhase of the signal, in degrees.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Frequency">
      <summary>
            Gets or sets the waveform Frequency, in hertz.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Frequency is less than or equal to zero.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Amplitude">
      <summary>
            Gets or sets the waveform Amplitude.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase">
      <summary>
            Gets or sets the waveform Phase, in degrees.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.UnsymmetricWindow">
      <summary>Provides a set of methods that apply unsymmetric windows to an input signal.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.BartlettHann(System.Double[])">
      <summary>
            Applies an unsymmetric Bartlett-Hann window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Bartlett-Hann window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Bohman(System.Double[])">
      <summary>
            Applies an unsymmetric Bohman window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Bohman window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Parzen(System.Double[])">
      <summary>
            Applies an unsymmetric Parzen window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Parzen window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Welch(System.Double[])">
      <summary>
            Applies an unsymmetric Welch window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Welch window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter">
      <summary>
            Implements a Kaiser window FIR bandpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double)">
      <summary>Creates a KaiserWindowFirBandpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
      <exception cref="T:System.ArgumentException">samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.Beta">
      <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter">
      <summary>
            Implements an inverse Chebyshev lowpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates an InverseChebyshevLowpassFilter using the 
            specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            stopbandAttenuation (parameter) is less than or equal to zero. 
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.StopbandAttenuation">
      <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter">
      <summary>Implements a Butterworth bandstop filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>Creates a ButterworthBandstopFilter
            using the specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
      <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            lowerCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            lowerCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            upperCutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            upperCutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            
            -or-
            lowerCutoffFrequency (parameter) is greater than upperCutoffFrequency (parameter).
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.LowerCutoffFrequency">
      <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.UpperCutoffFrequency">
      <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Conversion.Mass">
      <summary>
            Represents a mass.  Use Mass to convert masses between
            pounds and kilograms.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.FromKilograms(System.Double)">
      <summary>
            Returns a Mass that represents the mass specified
            in kilograms.
            </summary>
      <param name="kilograms">
            The mass in kilograms.
            </param>
      <returns>
            A Mass that represents a mass of 
            kilograms (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.FromPounds(System.Double)">
      <summary>
            Returns a Mass that represents the mass specified
            in pounds.
            </summary>
      <param name="pounds">
            The mass in pounds.
            </param>
      <returns>
            A Mass that represents a mass of 
            pounds (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Plus">
      <summary>
            Returns this instance of Mass.
            </summary>
      <returns>
            This instance of Mass.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Returns the specified instance of Mass (a unary plus).
            </summary>
      <param name="m">
            A Mass.
            </param>
      <returns>m (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Negate">
      <summary>
            Returns a Mass whose value is the negated value of
            this instance.  
            </summary>
      <returns>
            A Mass whose value is the negated value of this
            instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Returns a Mass whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
      <param name="m">
            A Mass.
            </param>
      <returns>
            The negative of m (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Add(NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Adds a Mass to this instance and returns a new 
            Mass representing the sum.
            </summary>
      <param name="m">
            The Mass to add to this instance.
            </param>
      <returns>
            A Mass that represents the value of this instance
            plus the value of m (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Addition(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Adds two Mass instances.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>
            A Mass whose value is the sum of 
            m1 (parameter) and m2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Subtract(NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Subtracts a Mass from this instance and returns a new 
            Mass representing the difference.
            </summary>
      <param name="m">
            The Mass to subtract from this instance.
            </param>
      <returns>
            A Mass that represents the value of this instance
            minus the value of m (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Subtraction(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Subtracts one Mass from another.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>
            A Mass whose value is the result of 
            m1 (parameter) minus m2 (parameter).
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer hash code.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Compare(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Compares two Mass values and returns an indication of
            their relative values.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>ValueCondition
            &lt;0
            m1 (parameter) is less than m2 (parameter)
            0
            m1 (parameter) is equal to m2 (parameter)
            &gt;0
            m1 (parameter) is greater than m2 (parameter)</returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Equality(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Indicates if two Mass instances are equal.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if the values of m1 (parameter) and m2 (parameter)
            are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Inequality(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Indicates if two Mass instances are not equal.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if the values of m1 (parameter) and m2 (parameter)
            are not equal; otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.CompareTo(System.Object)">
      <summary>
            Compares this instance with another instance of Mass.
            </summary>
      <param name="obj">
            Object to compare with this instance, or null.
            </param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            

ValueCondition
            Less than zero
            
            The instance is less than obj (parameter).
            
            Zero
            
            The instance is equal to obj (parameter).
            
            Greater than zero
            The instance is greater than obj (parameter).
            				

-or-

obj (parameter) is null.

</returns>
      <exception cref="T:System.ArgumentException">obj (parameter) is not a Mass.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Equals(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Returns a value indicating if two specified instances of 
            Mass are equal.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if m1 (parameter) and m2 (parameter) are equal;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Equals(NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Returns a value indicating if this instance is equal to the specified 
            Mass.
            </summary>
      <param name="m">
            A Mass to compare with this instance.
            </param>
      <returns>true if m (parameter) represents the same Mass 
            as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Equals(System.Object)">
      <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
      <param name="obj">
            An object to compare with this instance.
            </param>
      <returns>true if obj (parameter) is a 
            Mass that represents the same Mass as this instance;
            otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_LessThan(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Indicates if one Mass is less than another.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if m1 (parameter) is less than 
            m2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_GreaterThan(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Indicates if one Mass is greater than another.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if m1 (parameter) is greater than 
            m2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Indicates if one Mass is less than or 
            equal to another.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if m1 (parameter) is less than or equal to
            m2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
      <summary>
            Indicates if one Mass is greater than or
            equal to another.
            </summary>
      <param name="m1">
            A Mass.
            </param>
      <param name="m2">
            A Mass.
            </param>
      <returns>true if m1 (parameter) is greater than or equal
            to m2 (parameter); otherwise, false.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String)">
      <summary>
            Converts the string representation of a mass to a Mass.
            </summary>
      <param name="s">
            A string containing the mass to convert.
            </param>
      <returns>
            A Mass representing the mass specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a mass with a specified culture-specific format to
            a Mass.
            </summary>
      <param name="s">
            A string containing the mass to convert.
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Mass representing the mass specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a mass with a specified style to
            a Mass.
            </summary>
      <param name="s">
            A string containing the mass to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <returns>
            A Mass representing the mass specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a mass with a specified style and culture-specific format to
            a Mass.
            </summary>
      <param name="s">
            A string containing the mass to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <returns>
            A Mass representing the mass specified in s (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">s (parameter) is null.
            </exception>
      <exception cref="T:System.FormatException">s (parameter) is not a length in a valid format.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Mass@)">
      <summary>
            Converts the string representation of a mass with a specified style and culture-specific format to
            a Mass.
            </summary>
      <param name="s">
            A string containing the mass to convert.
            </param>
      <param name="style">
            The combination of one or more NumberStyles constants that indicate the permitted
            format of s (parameter).
            </param>
      <param name="provider">
            An IFormatProvider that supplies culture-specific formatting information about
            s (parameter).
            </param>
      <param name="result">
            Upon return, contains the Mass representing the mass specified in s (parameter).
            If the return value is false, result (parameter) is a mass of 0 kilograms.
            </param>
      <returns>true if s (parameter) is converted successfully.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString(System.String)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString(System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns the string representation of the value of this instance.
            </summary>
      <param name="format">The String specifying the format to use.  This can be any of the numeric format 
            strings defined for Double.

-or-

null to use the default format.

</param>
      <param name="formatProvider">The IFormatProvider to use to format the value.

-or-

null to obtain the numeric format information from the
            current locale setting of the operating system.

</param>
      <returns>
            A string that represents the value of this instance.
            </returns>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Mass.Kilograms">
      <summary>
            Gets the value of Mass in kilograms.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Mass.Pounds">
      <summary>
            Gets the value of Mass in pounds.
            </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.Conversion.Mass.Zero">
      <summary>
            Represents a mass of zero.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.AnalysisWarning">
      <summary>
            Represents a warning, or positive error code, received from the internal Analysis library.
            </summary>
    </member>
    <member name="E:NationalInstruments.Analysis.AnalysisWarning.Warning">
      <summary>
            Occurs when an analysis method generates a warning.
            </summary>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.AnalysisWarning.SynchronizingObject">
      <summary>
            Gets or sets the object that marshals calls to event handlers and callbacks. </summary>
    </member>
    <member name="P:NationalInstruments.Analysis.AnalysisWarning.SynchronizeCallbacks">
      <summary>
            Specifies how events and callback delegates are invoked.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal">
      <summary>
            Specifies the signal types that can be generated using the BasicFunctionGenerator
            class.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Sine">
      <summary>
            Generates a sine waveform.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Triangle">
      <summary>
            Generates a triangle waveform.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Square">
      <summary>
            Generates a square waveform.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Sawtooth">
      <summary>
            Generates a sawtooth waveform.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector">
      <summary>
            Analyzes input sequences for valid peaks that exceed a threshold value. 
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector.Compute(System.Double[],System.Double,System.Int32)">
      <summary>
            This method is obsolete. Use the Analyze method 
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector.Analyze(System.Double[],System.Double,System.Int32)">
      <summary>
            Analyzes the input sequence for valid peaks and returns the indices of all found peaks.
            </summary>
      <param name="inputData">
            The input sequence. The number of samples in inputData (parameter) must be greater than the 
            specified width (parameter).
            </param>
      <param name="threshold">
            The level that all valid peaks must equal or exceed for the duration of width (parameter) samples. 
            </param>
      <param name="width">
            This value determines the minimum width, in number of samples, that inputData (parameter) 
            must remain at or above the threshold (parameter) value for the candidate peak to be 
            considered valid. width (parameter) must be greater than zero. If width (parameter) is 
            less than or equal to zero, the method throws an exception.
            </param>
      <returns>
            The beginning index of all valid peaks in inputData (parameter). If no peaks are found then an empty array is returned.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">width (parameter) is less than or equal to zero.
            
            -or-
            width (parameter) is greater than or equal to length of inputData (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.LinearAlgebra">
      <summary>
            Provides a set of methods that perform linear algebra operations.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.DotProduct(System.Double[],System.Double[])">
      <summary>Calculates the dot product of two vectors.
            </summary>
      <param name="vectorA">
            The first vector to be used in the computation of the dot product. The number of elements in x must be the same as the number of elements in vectorB (parameter).
            </param>
      <param name="vectorB">
            The second vector to be used in the computation of the dot product. The number of elements in y must be the same as the number of elements in vectorA (parameter).
            </param>
      <returns>
            The dot product of vectorA (parameter) and vectorB (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">vectorA (parameter) is null.
            
            -or-
            vectorB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in vectorA (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in vectorB (parameter) is equal to zero.
            
            -or-
            vectorA (parameter) is not the same size as vectorB (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.DotProduct(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
      <summary>Calculates the dot product of two ComplexDouble vectors.
            </summary>
      <param name="vectorA">
            The first ComplexDouble vector to be used in the computation of the dot product. The number of elements in x must be the same as the number of elements in vectorB (parameter).
            </param>
      <param name="vectorB">
            The second ComplexDouble vector to be used in the computation of the dot product. The number of elements in y must be the same as the number of elements in vectorA (parameter).
            </param>
      <returns>
            The dot product of vectorA (parameter) and vectorB (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">vectorA (parameter) is null.
            
            -or-
            vectorB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in vectorA (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in vectorB (parameter) is equal to zero.
            
            -or-
            vectorA (parameter) is not the same size as vectorB (parameter).
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
      <summary>
            Multiplies two matrices.
            </summary>
      <param name="matrixA">
            The first matrix to be multiplied. The number of columns in matrixA (parameter) must match the number of 
            rows in matrixB (parameter).
            </param>
      <param name="matrixB">
            The second matrix to be multiplied.
            </param>
      <returns>The result of the matrix multiplication. If matrixA (parameter) has size n-by-k, and matrixB (parameter) 
            has size k-by-m, then this matrix is of size n-by-m. 
            </returns>
      <exception cref="T:System.ArgumentNullException">matrixA (parameter) is null.
            
            -or-
            matrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">matrixB (parameter) has incorrect size for matrix multiplication. Matrix multiplication failed.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Multiply(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Multiplies two ComplexDouble matrices.
            </summary>
      <param name="matrixA">
            The first ComplexDouble matrix to be multiplied. The number of columns in matrixA (parameter) must match the number of 
            rows in matrixB (parameter).
            </param>
      <param name="matrixB">
            The second ComplexDouble matrix to be multiplied.
            </param>
      <returns>The ComplexDouble result of the matrix multiplication. If matrixA (parameter) has size n-by-k, and matrixB (parameter) 
            has size k-by-m, then this matrix is of size n-by-m. 
            </returns>
      <exception cref="T:System.ArgumentNullException">matrixA (parameter) is null.
            
            -or-
            matrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">matrixB (parameter) has incorrect size for matrix multiplication. Matrix multiplication failed.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])">
      <summary>
            Calculates the Inverse of a square matrix. 
            </summary>
      <param name="matrix">
            The square matrix to be inverted.
            </param>
      <returns>
            The Inverse of inputMatrix (parameter).
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">matrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            matrix (parameter) is singular.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Transpose(System.Double[0:,0:])">
      <summary>Calculates the transpose matrix. 
            </summary>
      <param name="matrix">
            The matrix whose transpose is to be calculated.
            </param>
      <returns>
            The transposed matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Transpose(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>Calculates the ComplexDouble transpose matrix. 
            </summary>
      <param name="matrix">
            The ComplexDouble matrix whose Transpose is to be calculated.
            </param>
      <returns>
            The ComplexDouble transposed matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(System.Double[0:,0:])">
      <summary>Calculates the determinant of a square matrix with an unknown 
            MatrixType.  The result is a scalar value. 
            </summary>
      <param name="matrix">
            The square matrix whose determinant is to be computed.
            </param>
      <returns>
            The determinant of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>Calculates the determinant of a square matrix with a known MatrixType. 
            The result is a scalar value. 
            </summary>
      <param name="matrix">
            The square matrix whose determinant is to be computed.
            </param>
      <param name="matrixType">
            The type of input matrix. 
            </param>
      <returns>
            The determinant of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            
            Invalid matrixType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>Calculates the determinant of a ComplexDouble square matrix.  The result is a scalar value. 
            </summary>
      <param name="matrix">
            The square matrix whose determinant is to be computed.
            </param>
      <param name="matrixType">
            The type of matrix. 
            </param>
      <returns>
            The determinant of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            
            Invalid matrixType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Trace(System.Double[0:,0:])">
      <summary>Calculates the trace of a matrix. The trace is the sum of all the diagonal elements of the matrix.
            </summary>
      <param name="inputSquareMatrix">
            The matrix whose trace is to be calculated.
            </param>
      <returns>
            The trace of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Trace(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>Calculates the trace of a ComplexDouble matrix. The trace is the sum of all the diagonal elements of the matrix.
            </summary>
      <param name="inputSquareMatrix">
            The ComplexDouble matrix whose trace is to be calculated.
            </param>
      <returns>
            The trace of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.OuterProduct(System.Double[],System.Double[])">
      <summary>
            Computes the outer product of the real input vectors.
            </summary>
      <param name="vectorA">
            The first vector to be used in the computation of the outer product.
            </param>
      <param name="vectorB">
            The second vector to be used in the computation of the outer product.
            </param>
      <returns>
            The outer product of the input vectors.  If vectorA (parameter) is of dimensions m and 
            vectorB (parameter) is of dimensions n, then the size of this matrix is m-by-n.
            </returns>
      <exception cref="T:System.ArgumentNullException">vectorA (parameter) is null.
            
            -or-
            vectorB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in vectorA (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in vectorB (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.OuterProduct(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
      <summary>
            Computes the outer product of the ComplexDouble  input vectors.
            </summary>
      <param name="vectorA">
            The first ComplexDouble vector to be used in the computation of the outer product.
            </param>
      <param name="vectorB">
            The second ComplexDouble vector to be used in the computation of the outer product.
            </param>
      <returns>
            The ComplexDouble outer product of the input vectors.  If vectorA (parameter) is of dimensions m and 
            vectorB (parameter) is of dimensions n, then the size of this matrix is m-by-n.
            </returns>
      <exception cref="T:System.ArgumentNullException">vectorA (parameter) is null.
            
            -or-
            vectorB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in vectorA (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in vectorB (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Rank(System.Double[0:,0:],System.Double)">
      <summary>
            Calculates the rank of a real input matrix. 
            </summary>
      <param name="matrix">
            The input matrix whose rank is to be determined. The input matrix can be square or rectangular.
            </param>
      <param name="tolerance">
            The value that is used to calculate the rank of matrix (parameter). The rank is the number of singular values 
            of the input matrix that are larger than the tolerance.
            </param>
      <returns>
            The resulting rank of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Rank(NationalInstruments.ComplexDouble[0:,0:],System.Double)">
      <summary>
            Calculates the rank 
            of a ComplexDouble input matrix. 
            </summary>
      <param name="matrix">
            The ComplexDouble input matrix whose rank is to be determined. The input matrix can be square or rectangular.
            </param>
      <param name="tolerance">
            The value that is used to calculate the rank of matrix (parameter). The rank is the number of singular values 
            of the input matrix that are larger than the tolerance.
            </param>
      <returns>
            The resulting rank of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)">
      <summary>
            Calculates the norm of the input matrix. The norm of a matrix is a scalar that 
            gives some measure of the size of the elements in the matrix.
            </summary>
      <param name="matrix">
            The matrix whose norm is to be calculated. matrix (parameter) can be either rectangular or square.  
            </param>
      <param name="normType">
            The type of norm which is used to compute the norm of matrix (parameter). NormType gives the available types of norms.
            </param>
      <returns>
            The norm of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            
            Invalid normType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.NormType)">
      <summary>
            Calculates the norm of the ComplexDouble input matrix. The norm of a matrix is a scalar that 
            gives some measure of the size of the elements in the matrix.
            </summary>
      <param name="matrix">
            The ComplexDouble matrix whose norm is to be calculated. matrix (parameter) can be either rectangular or square.  
            </param>
      <param name="normType">
            The type of norm which is used to compute the norm of matrix (parameter). NormType gives the available types of norms.
            </param>
      <returns>
            The norm of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            
            Invalid normType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)">
      <summary>
            Calculates the condition number of a matrix. The condition number of a matrix measures the sensitivity of a system solution of linear equations to 
            errors in the data.
            </summary>
      <param name="matrix">
            The input matrix whose condition number is to be determined.  matrix (parameter) must be square, 
            unless the norm type is a 2-norm, in which case matrix (parameter) can be square or rectangular.
            </param>
      <param name="normType">
            The NormType that should be used to compute the condition number of the matrix.
            </param>
      <returns>
            The ConditionNumber of matrix (parameter). 
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">matrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is rectangular but NormType is not
            TwoNorm.
                
            -or-
            
            Invalid normType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.NormType)">
      <summary>
            Calculates the ComplexDouble condition number of a matrix. 
            The condition number of a matrix measures the sensitivity of a system solution of linear equations to 
            errors in the data.
            </summary>
      <param name="matrix">
            The input matrix whose condition number is to be determined.  matrix (parameter) must be square, 
            unless the norm type is a 2-norm, in which case, matrix (parameter) can be square or rectangular.
            </param>
      <param name="normType">
            The NormType used to compute the condition number of the matrix.
            </param>
      <returns>
            The condition number of matrix (parameter). 
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">matrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is rectangular but NormType is not
            TwoNorm.
                
            -or-
            
            Invalid normType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateIdentityMatrix(System.Int32)">
      <summary>
            Generates an identity matrix.
            </summary>
      <param name="size">
            The number of diagonal elements in the identity matrix.
            </param>
      <returns>
            Returns the generated identity matrix.
            </returns>
      <exception cref="T:System.ArgumentException">size (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateIdentityMatrixComplex(System.Int32)">
      <summary>
            Generates a ComplexDouble identity matrix.
            </summary>
      <param name="size">
            The number of diagonal elements in the identity matrix.
            </param>
      <returns>
            Returns the generated ComplexDouble identity matrix.
            </returns>
      <exception cref="T:System.ArgumentException">size (parameter) is less than or equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateDiagonalMatrix(System.Double[])">
      <summary>
            Generates a diagonal matrix.
            </summary>
      <param name="diagonalData">
            The input array.
            </param>
      <returns>
            The generated diagonal matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">diagonalData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in diagonalData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateDiagonalMatrix(NationalInstruments.ComplexDouble[])">
      <summary>
            Generates a ComplexDouble diagonal matrix.
            </summary>
      <param name="diagonalData">
            The ComplexDouble input array.
            </param>
      <returns>
            The generated ComplexDouble diagonal matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">diagonalData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in diagonalData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateToeplitzMatrix(System.Double[],System.Double[])">
      <summary>
            Generates a Toeplitz matrix.
            </summary>
      <param name="inputXData">
            The array that is the first row in the generated Toeplitz matrix.
            </param>
      <param name="inputYData">
            The array that is the first column in the generated Toeplitz matrix.
            </param>
      <returns>
            The generated Toeplitz matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateToeplitzMatrix(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
      <summary>
            Generates a ComplexDouble Toeplitz matrix.
            </summary>
      <param name="inputXData">
            The ComplexDouble array that is the first row in the generated Toeplitz matrix.
            </param>
      <param name="inputYData">
            The ComplexDouble array that is the first column in the generated Toeplitz matrix.
            </param>
      <returns>
                
            The generated ComplexDouble Toeplitz matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputXData (parameter) is null.
            
            -or-
            inputYData (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in inputXData (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in inputYData (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateVandermondeMatrix(System.Double[])">
      <summary>
            Generates a Vandermonde matrix.
            </summary>
      <param name="baseValues">
            The input array.
            </param>
      <returns>
            The generated Vandermonde matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">baseValues (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in baseValues (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateVandermondeMatrix(NationalInstruments.ComplexDouble[])">
      <summary>
            Generates a ComplexDouble Vandermonde matrix.
            </summary>
      <param name="baseValues">
            The ComplexDouble input array.
            </param>
      <returns>
            The generated ComplexDouble Vandermonde matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">baseValues (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of samples in baseValues (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateCompanionMatrix(System.Double[])">
      <summary>
            Generates a companion matrix.
            </summary>
      <param name="polynomialCoefficients">
            The input array.
            </param>
      <returns>
            The generated companion matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">polynomialCoefficients (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in polynomialCoefficients (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when calculating the matrix elements.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateCompanionMatrix(NationalInstruments.ComplexDouble[])">
      <summary>
            Generates a ComplexDouble companion matrix.
            </summary>
      <param name="polynomialCoefficients">
            The ComplexDouble input array.
            </param>
      <returns>
            The generated ComplexDouble companion matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">polynomialCoefficients (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in polynomialCoefficients (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when calculating the matrix elements.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.IsPositiveDefinite(System.Double[0:,0:])">
      <summary>
            Checks the positive definiteness of the real square input matrix A.  A real matrix is 
            positive definite if and only if it is symmetric and of the quadratic form X'AX &gt; 0 
            for all nonzero vectors X. 
            </summary>
      <param name="matrix">
            The input matrix which is to be tested for positive definiteness.
            </param>
      <returns>
            The positive definiteness of matrix (parameter). true if matrix (parameter)
            is positive definite; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.IsPositiveDefinite(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Checks the positive definiteness of the ComplexDouble square input matrix A.  A matrix is 
            positive definite if and only if it is symmetric and of the quadratic form X'AX &gt; 0 
            for all nonzero vectors X. 
            </summary>
      <param name="matrix">
            The ComplexDouble input matrix which is to be tested for positive definiteness.
            </param>
      <returns>
            The positive definiteness of matrix (parameter). true if matrix (parameter)
            is positive definite; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)">
      <summary>
            Calculates the generalized inverse of a rectangular, real input matrix. This method uses the Singular Value Decomposition (SVD) technique.
            </summary>
      <param name="matrix">
            The input matrix whose PseudoInverse is to be computed. matrix (parameter) can be either rectangular or square.  
            </param>
      <param name="tolerance">
            The value below which all the singular values are set equal to zero. This value determines the level of accuracy in the 
            final solution.
            </param>
      <returns>
            The result PseudoInverse of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(NationalInstruments.ComplexDouble[0:,0:],System.Double)">
      <summary>
            Calculates the generalized inverse of a rectangular, ComplexDouble input matrix. This method uses the Singular Value Decomposition (SVD) technique.
            </summary>
      <param name="matrix">
            The ComplexDouble input matrix whose PseudoInverse is to be computed. matrix (parameter) can be either rectangular or square.  
            </param>
      <param name="tolerance">
            The value below which all the singular values are set equal to zero. This value determines the level of accuracy in the 
            final solution.
            </param>
      <returns>
            The result PseudoInverse of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.KroneckerProduct(System.Double[0:,0:],System.Double[0:,0:])">
      <summary>Calculates the Kronecker product of two matrices.
            </summary>
      <param name="matrixA">
            The first real matrix to use in the computation of the dot product.</param>
      <param name="matrixB">
            The second real matrix to use in the computation of the dot product.</param>
      <returns>
            The Kronecker product of matrixA (parameter) and matrixB (parameter). If matrixA (parameter) is m-by-n and 
            matrixB (parameter) is k-by-l, then the size of the Kronecker product matrix is nk-by-ml.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrixA (parameter) is null.
            
            -or-
            matrixB (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.KroneckerProduct(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:])">
      <summary>Calculates the Kronecker product of two ComplexDouble matrices.
            </summary>
      <param name="matrixA">
            The first ComplexDouble matrix to use in the computation of the dot product.</param>
      <param name="matrixB">
            The second ComplexDouble matrix to use in the computation of the dot product.</param>
      <returns>
            The Kronecker product of matrixA (parameter) and matrixB (parameter). If matrixA (parameter) is m-by-n and 
            matrixB (parameter) is k-by-l then the size of the Kronecker product matrix is nk-by-ml.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrixA (parameter) is null.
            
            -or-
            matrixB (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>Calculates the inverse of a real, square input matrix A.  If A^-1 denotes the inverse of the 
            matrix A, then AA^-1 = I, where I is the identity matrix. 
            </summary>
      <param name="matrix">
            The square matrix whose inverse is to be calculated.
            </param>
      <param name="matrixType">
            The type of matrix (parameter).  Choose MatrixType correctly as it affects the speed of computation. If the type of matrix (parameter) is not known then use the 
            Inverse method.
            </param>
      <returns>
            The result of matrix (parameter) inversion.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            matrix (parameter) is singular.
            
            -or-
            
            Invalid matrixType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>Calculates the inverse of a ComplexDouble, square input matrix A.  If A^-1 denotes the inverse of the 
            matrix A, then AA^-1 = I, where I is the identity matrix. 
            </summary>
      <param name="matrix">
            The ComplexDouble square matrix whose inverse is to be calculated.
            </param>
      <param name="matrixType">
            The type of matrix (parameter).  Choose MatrixType correctly as it affects the speed of computation. If the type of matrix (parameter) is not known then use the 
            Inverse method.
            </param>
      <returns>
            The result of matrix (parameter) inversion.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            matrix (parameter) is singular.
            
            -or-
            
            Invalid matrixType (parameter) specified.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralDeterminant(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>
            This member is obsolete. Use the Determinant
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>
            This method is obsolete. Use the SolveLinearEquationsSingleRightHand
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.MatrixType,System.Boolean@)">
      <summary>
            This method is obsolete. Use the SolveLinearEquationsSingleRightHand
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Math.MatrixType)">
      <summary>
            This method is obsolete. Use the SolveLinearEquationsSingleRightHand
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Math.MatrixType,System.Boolean@)">
      <summary>
            This method is obsolete. Use the SolveLinearEquationsSingleRightHand
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CholeskyFactorization(System.Double[0:,0:])">
      <summary>
            Calculates the Cholesky factorization  of a real, symmetric positive definite input matrix. 
            </summary>
      <param name="matrix">
            The input square, positive definite matrix whose Cholesky factorization is to be computed.
            </param>
      <returns>
            The result of the CholeskyFactorization.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            matrix (parameter) is not a positive definite matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CholeskyFactorization(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Calculates the Cholesky factorization of a complex, positive definite input matrix. 
            </summary>
      <param name="matrix">
            The input square, positive definite matrix whose Cholesky factorization is to be computed.
            </param>
      <returns>
            The result of the Cholesky factorization.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            
            -or-
            matrix (parameter) is not a positive definite matrix.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])">
      <summary>Computes the eigenvalues, l, of a symmetric, real square input matrix.  
            </summary>
      <param name="matrix">
            The input matrix.
            </param>
      <returns>
            A vector which contains the eigenvalues of matrix (parameter).
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:],System.Double[0:,0:]@)">
      <summary>Computes the eigenvalues, l, and their corresponding eigenvectors, 
            x, of a symmetric, real square input matrix with the specified eigenvectors.  
            </summary>
      <param name="matrix">
            The input matrix.
            </param>
      <param name="eigenVectors">
            The resulting eigenvectors of the input matrix.  
            </param>
      <returns>
            A vector which contains the eigenvalues of the input matrix.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])">
      <summary>
            Calculates the eigenvalues and their corresponding eigenvectors of a general, real square input 
            matrix. The method returns only the eigenvalues.
            </summary>
      <param name="matrix">
            The square input matrix whose eigenvalues are to be computed.
            </param>
      <returns>
            The resulting ComplexDouble eigenvalues of matrix (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the eigenvalues and their corresponding eigenvectors of a general, real square input matrix.
            </summary>
      <param name="matrix">
            The square input matrix whose eigenvalues and eigenvectors are to be computed.
            </param>
      <param name="eigenVectors">
            The resulting eigenvectors of matrix (parameter).  
            </param>
      <returns>
            The resulting ComplexDouble eigenvalues of matrix (parameter).  
            </returns>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)">
      <summary>
            Calculates the eigenvalues of a ComplexDouble square input matrix. Only the eigenvalues are returned.
            </summary>
      <param name="matrix">
            The square input matrix whose eigenvalues are to be computed.
            </param>
      <param name="matrixType">
            The type of the input matrix. A value from the  EigenMatrixType enumeration.
            </param>
      <returns>
            The resulting ComplexDouble eigenvalues of matrix (parameter).
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the eigenvalues and their corresponding eigenvectors of a ComplexDouble square input matrix. Only the eigenvalues are returned.
            </summary>
      <param name="matrix">
            The square input matrix whose eigenvalues and eigenvectors are to be computed.
            </param>
      <param name="matrixType">
            The type of the input matrix. A value from the  EigenMatrixType enumeration.
            </param>
      <param name="eigenVectors">
            The resulting eigenvectors of matrix (parameter).  
            </param>
      <returns>
            The resulting ComplexDouble eigenvalues of matrix (parameter).
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.LinearEquations(System.Double[0:,0:],System.Double[])">
      <summary>
            This method is obsolete. Use the SolveLinearEquationsSingleRightHand
            method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)">
      <summary>Performs LU ComplexDouble matrix decomposition. 
            </summary>
      <param name="matrix">
            On input, contains the square matrix to be LU factorization decomposed.
            Upon return, contains the LU factorization decomposed matrix.
            </param>
      <param name="permutationVector">
            Upon return, contains the permutation information obtained from the LU factorization decomposition.  This vector is needed if you plan 
            to call ForwardSubstitution.
            </param>
      <param name="sign">
            Upon return, contains the number of row exchanges that occurred during the LU factorization decomposition. This output is 0 if there was an even number of row exchanges, or no exchanges. 
            This output is 1 if there was an odd number of row exchanges during the LU factorization decomposition. 
            </param>
      <returns>
            The LU factorization decomposed matrix.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">matrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            
            -or-
            permutationVector (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in permutationVector (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
                </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(NationalInstruments.ComplexDouble[0:,0:],System.Int32[]@,System.Int32@)">
      <summary>Performs LU matrix decomposition. 
            </summary>
      <param name="matrix">
            On input, contains the ComplexDouble square matrix to be LU factorization decomposed.
            Upon return, contains the LU factorization decomposed ComplexDouble matrix.
            </param>
      <param name="permutationVector">
            Upon return, contains the permutation information obtained from the LU factorization decomposition.  This vector is needed if you plan 
            to call ForwardSubstitution.
            </param>
      <param name="sign">
            Upon return, contains the number of row exchanges that occurred during the LU factorization decomposition. This output is 0 if there was an even number of row exchanges, or no exchanges. 
            This output is 1 if there was an odd number of row exchanges during the LU factorization decomposition. 
            </param>
      <returns>
            The LU factorization decomposed ComplexDouble matrix.
            </returns>
      <exception cref="T:NationalInstruments.Analysis.AnalysisException">matrix (parameter) is singular.
            </exception>
      <exception cref="T:System.ArgumentNullException">matrix (parameter) is null.
            
            -or-
            permutationVector (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in matrix (parameter) is equal to zero.
            
            -or-
            matrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.ForwardSubstitution(System.Double[0:,0:],System.Double[],System.Int32[])">
      <summary>
            Calculates the solution to the linear equation Ax = y, where the matrix A is a lower triangular matrix in which the diagonal elements have a value of 1.
            </summary>
      <param name="coefficientMatrix">
            The square matrix of coefficients.
            </param>
      <param name="knownVector">
            The array that represents the set of known dependent variable values.
            </param>
      <param name="permutationVector">
            An input vector obtained from the LUFactorization decomposition.  
            </param>
      <returns>
            The solution to the linear system of equations.
            </returns>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            knownVector (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in coefficientMatrix (parameter) is equal to zero.
            
            -or-
            coefficentMatrix (parameter) is neither a lower triangular matrix nor a matrix from the LU decomposition.
            
            -or-
            coefficentMatrix (parameter) is not a square matrix.
            
            -or-
            knownVector (parameter) is not the same size as the number of rows or columns of coefficentMatrix (parameter). 
            
            -or-
            
                Invalid permutationVector (parameter) specified. 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackwardSubstitution(System.Double[0:,0:],System.Double[])">
      <summary>
            Solves the linear equation Ax = y by backward substitution.  
            The matrix A is a lower triangular matrix whose diagonal elements are all ones. 
            </summary>
      <param name="coefficientMatrix">
            The input square matrix. This matrix can be either a lower triangular matrix or a matrix from the 
            LU decomposition.
            </param>
      <param name="knownVector">
            The array that represents the set of known dependent variable values.
            </param>
      <returns>
            The solution to the linear system of equations.
            </returns>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in coefficentMatrix (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in knownVector (parameter) is equal to zero.
            
            -or-
            coefficentMatrix (parameter) is neither a lower triangular matrix nor a matrix from the LU decomposition.
            
            -or-
            coefficentMatrix (parameter) is not a square matrix.
            
            -or-
            knownVector (parameter) is not the same size as the number of rows or columns of coefficentMatrix (parameter). 
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)">
      <summary>
            This method overload is obsolete. Use a different overload that takes a SizeOption  to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            This method overload is obsolete. Use a different overload that takes a SizeOption  to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdSingularValues(System.Double[0:,0:])">
      <summary>
            This method overload is obsolete. Use the SingularValues method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdSingularValues(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            This method overload is obsolete. Use the SingularValues method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SingularValues(System.Double[0:,0:])">
      <summary>
            Computes the singular value decomposition (SVD) of a real matrix and returns only the singular values.
            </summary>
      <param name="inputMatrix">
            The matrix to decompose.
            </param>
      <returns>
            The singular values in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SingularValues(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Computes the singular value decomposition (SVD) of a complex matrix and returns only the singular values.
            </summary>
      <param name="inputMatrix">
            The matrix to decompose.
            </param>
      <returns>
            The singular values in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)">
      <summary>
            Balances, in place, a real, general matrix so that its eigenvectors can be computed more accurately.
            </summary>
      <param name="inputSquareMatrix">
            On input, the matrix to be balanced. On output, the balanced matrix.
            </param>
      <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            BalanceMethod enumeration. If balanceMethod (parameter) is 
            NeitherPermutedNorScaled, indexLow (parameter) = 0, 
            indexHigh (parameter) = matrix size - 1, 
            scale[i] = 1, where i = 0 to matrix size - 1.
            </param>
      <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balanced matrix[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balanced matrix[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <returns>
            The scale information.
            </returns>
      <exception cref="T:System.ArgumentNullException">squareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">squareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified balanceMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            This method overload is obsolete. Use an overload of this method that requires a SizeOption
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            This method overload is obsolete. Use an overload of this method that requires a SizeOption
            to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHandInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])">
      <summary>
            Solves real linear equations of the form AX = B with a single right-hand known vector. This method is a versatile linear equations solver and performs this operation in place.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVector">
            On input, contains the right-hand known vector. On output, contains the answer vector. 
            This is a matrix in a linear system with a single right-hand known vector.
            </param>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHandInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[])">
      <summary>
            Solves complex linear equations of the form AX = B with a single right-hand known vector. This method is a versatile complex linear equations solver and performs this operation in place.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVector">
            On input, contains the right-hand known vector. On output, contains the answer vector. 
            This is a matrix in a linear system with a single right-hand known vector.
            </param>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])">
      <summary>
            Solves real linear equations of the form AX = B with a single right-hand known vector. This method is a versatile linear equations solver.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVector">
            The right-hand known vector.
            </param>
      <returns>
            The answer vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[])">
      <summary>
            Solves complex linear equations of the form AX = B with a single right-hand known vector. 
            This method is a versatile complex linear equations solver.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVector">
            The right-hand known vector.
            </param>
      <returns>
            The answer vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHandInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[0:,0:])">
      <summary>
            Solves real linear equations of the form AX = B with multiple right-hand known vectors. This 
            method is a versatile linear equations solver and performs this operation in place.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVectors">
            On input, contains the right-hand known vectors. On output, contains the answer vectors. 
            This is a matrix in a linear system with multiple right-hand known vectors. 
            In this case, each column of knownVectors (parameter) is a known vector.
            </param>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHandInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Solves complex linear equations of the form AX = B with multiple right-hand known vectors. This 
            method is a versatile linear equations solver and performs this operation in place.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). A values from the MatrixType enumeration. 
            </param>
      <param name="knownVectors">
            On input, this contains the right-hand known vectors. On output, this contains the answer vectors. 
            This is a matrix in a linear system with multiple right-hand known vectors. 
            In this case, each column of knownVectors (parameter) is a known vector.
            </param>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[0:,0:])">
      <summary>
            Solves real linear equations of the form AX = B with multiple right-hand known vectors. This method is a versatile linear equations solver.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVectors">
            The right-hand known vectors.
            </param>
      <returns>
            The answer vectors.
            </returns>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHand(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Solves complex linear equations of the form AX = B with multiple right-hand known vectors. This method is a versatile complex linear equations solver.
            </summary>
      <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
      <param name="matrixType">
            The type of coefficientMatrix (parameter). This is a value from the MatrixType enumeration. 
            </param>
      <param name="knownVectors">
            The right-hand known vectors.
            </param>
      <returns>
            The answer vectors.
            </returns>
      <exception cref="T:System.ArgumentNullException">coefficientMatrix (parameter) is null.
            
            -or-
            

knownVectors (parameter) is null.
            


            -or-
            knownVectors (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">coefficientMatrix (parameter) is not a square matrix.
            
            -or-
            


                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            


            -or-
            
                    Number of rows in coefficientMatrix (parameter) is not equal to the length of knownVectors (parameter).
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified matrixType (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
      <summary>
            Performs the QR factorization for a real matrix and computes only the R matrix.
            </summary>
      <param name="inputMatrix">
            The real input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix.
            </summary>
      <param name="inputMatrix">
            The real input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex input matrix and computes only the R matrix.
            </summary>
      <param name="inputMatrix">
            The complex input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix.
            </summary>
      <param name="inputMatrix">
            The complex input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
      <summary>
            Calculates the QR factorization for a real matrix in place, and computes only the R matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix in place.
            </summary>
      <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q.
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
      <summary>
            Calculates the QR factorization for a complex matrix in place, and computes only the R matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix in place.
            </summary>
      <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q.
            </param>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as 
            a vector. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            The real input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as a vector.
            </summary>
      <param name="inputMatrix">
            The real input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a 
            vector. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            The complex input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a vector.
            </summary>
      <param name="inputMatrix">
            The complex input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
      <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information as 
            a vector. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information as a vector.
            </summary>
      <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
      <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting information 
            as a vector. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting information as a vector.
            </summary>
      <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA-1].
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as a 
            matrix. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            The real input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix (parameter))) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as a matrix.
            </summary>
      <param name="inputMatrix">
            The real input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix (parameter))) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a 
            matrix. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            The complex input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix (parameter))) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a matrix.
            </summary>
      <param name="inputMatrix">
            The complex input matrix.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and rMatrix (parameter). This is a value from the SizeOption enumeration.
            </param>
      <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix (parameter))) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
      <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information 
            as a matrix. The method only computes the R matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information 
            as a matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
      <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting information 
            as a matrix. The method computes only the R matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting 
            information as a matrix.
            </summary>
      <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
      <param name="sizeOption">
            The value specifying how to size qMatrix (parameter) and the R matrix. This is a value from the SizeOption enumeration.
            </param>
      <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
      <returns>
            The pivoting information. This method factorizes inputMatrix (parameter) as AP = QR. This is the 
            permutation matrix, P, in AP = QR. inputMatrix (parameter) is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Computes the singular value decomposition (SVD) of a real matrix.
            </summary>
      <param name="inputMatrix">
            The matrix to decompose.
            </param>
      <param name="sizeOption">
            The size option of SVD. This is a value from the SizeOption enumeration.
            </param>
      <param name="uMatrix">
            The orthogonal matrix U.
            </param>
      <param name="vMatrix">
            The orthogonal matrix V.
            </param>
      <returns>
            The singular values in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the singular value decomposition (SVD) of a complex matrix.
            </summary>
      <param name="inputMatrix">
            The matrix to decompose.
            </param>
      <param name="sizeOption">
            The size option of SVD. This is a value from the SizeOption enumeration.
            </param>
      <param name="uMatrix">
            The orthogonal matrix U.
            </param>
      <param name="vMatrix">
            The orthogonal matrix V.
            </param>
      <returns>
            The singular values in descending order.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified sizeOption (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@,System.Double[0:,0:]@)">
      <summary>
            Balances a real, general matrix so that its eigenvectors can be computed more accurately. 
            </summary>
      <param name="inputSquareMatrix">
            The matrix to be balanced.
            </param>
      <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            BalanceMethod enumeration. If balanceMethod (parameter) is 
            NeitherPermutedNorScaled, indexLow (parameter) = 0, 
            indexHigh (parameter) = matrix size - 1, 
            scale[i] = 1, where i = 0 to matrix size - 1.
            </param>
      <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balancedMatrix (parameter)[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balancedMatrix (parameter)[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <param name="balancedMatrix">
            The balanced matrix.
            </param>
      <returns>
            The scale information.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified balanceMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)">
      <summary>
            Balances, in place, a complex, general matrix so that its eigenvectors can be computed more accurately.
            </summary>
      <param name="squareMatrix">
            On input, the matrix to be balanced. On output, the balanced matrix.
            </param>
      <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            BalanceMethod enumeration. If balanceMethod (parameter) is 
            NeitherPermutedNorScaled, indexLow (parameter) = 0, 
            indexHigh (parameter) = matrix size - 1, 
            scale[i] = 1, where i = 0 to matrix size - 1.
            </param>
      <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balanced matrix[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balanced matrix[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <returns>
            The scale information.
            </returns>
      <exception cref="T:System.ArgumentNullException">squareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">squareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified balanceMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Balances a complex, general matrix so that its eigenvectors can be computed more accurately. 
            </summary>
      <param name="inputSquareMatrix">
            The matrix to be balanced.
            </param>
      <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            BalanceMethod enumeration. If balanceMethod (parameter) is 
            NeitherPermutedNorScaled, indexLow (parameter) = 0, 
            indexHigh (parameter) = matrix size - 1, 
            scale[i] = 1, where i = 0 to matrix size - 1.
            </param>
      <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balancedMatrix (parameter)[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The indexLow (parameter) and 
            indexHigh (parameter) values are such that on output, 
            balancedMatrix (parameter)[i,j] is 0, if i  j and 
            (i  j indexLow (parameter) or 
            indexHigh (parameter) i  matrix size - 1).
            </param>
      <param name="balancedMatrix">
            The balanced matrix.
            </param>
      <returns>
            The scale information.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified balanceMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])">
      <summary>
            Transforms the eigenvectors of a real, balanced matrix to those of the original matrix. 
            </summary>
      <param name="eigenVectorsMatrix">
            The eigenvectors of the balanced matrix.
            </param>
      <param name="side">
            The enumeration specifying whether the eigenVectorsMatrix (parameter) contains the right side or left side eigenvectors.
            </param>
      <param name="balanceMethod">
            The enumeration specifying how the original matrix is balanced. Pass the same value for balanceMethod (parameter) that was passed to MatrixBalance when the original matrix was balanced.
            </param>
      <param name="indexLow">
            The low index specifying the permutation information that was obtained from MatrixBalance.
            </param>
      <param name="indexHigh">
            The high index specifying the the permutation information that was obtained from MatrixBalance.
            </param>
      <param name="scale">
            The scale information from MatrixBalance.
            </param>
      <returns>
            The eigenvectors of the original matrix. 
            </returns>
      <exception cref="T:System.ArgumentNullException">eigenVectorsMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in eigenVectorsMatrix (parameter) is equal to zero.
            
            -or-
            eigenVectorsMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified side (parameter) is invalid.
            
            -or-
            


                    Specified balanceMethod (parameter) is invalid.
            


            -or-
            
                    Specified balanceMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])">
      <summary>
            Transforms the eigenvectors of a complex balanced matrix to those of the original matrix. 
            </summary>
      <param name="eigenVectorsMatrix">
            The eigenvectors of the balanced matrix.
            </param>
      <param name="side">
            The enumeration specifying whether the eigenVectorsMatrix (parameter) contains the right side or left side eigenvectors.
            </param>
      <param name="balanceMethod">
            The enumeration specifying how the original matrix is balanced. Pass the same value for balanceMethod (parameter) that was passed to MatrixBalance when the original matrix was balanced.
            </param>
      <param name="indexLow">
            The low index specifying the permutation information that was obtained from MatrixBalance.
            </param>
      <param name="indexHigh">
            The high index specifying the the permutation information that was obtained from MatrixBalance.
            </param>
      <param name="scale">
            The scale information from MatrixBalance.
            </param>
      <returns>
            The eigenvectors of the original matrix. 
            </returns>
      <exception cref="T:System.ArgumentNullException">eigenVectorsMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in eigenVectorsMatrix (parameter) is equal to zero.
            
            -or-
            eigenVectorsMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified side (parameter) is invalid.
            
            -or-
            


                    Specified balanceMethod (parameter) is invalid.
            


            -or-
            
                    Specified balanceMethod (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(System.Double[0:,0:],System.Double[0:,0:])">
      <summary>
            Computes the generalized eigenvalues for a pair of real matrices. 
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix.
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix.
            </param>
      <returns>
            The generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the generalized eigenvalues and the left or right generalized eigenvectors for a pair of real matrices. 
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix.
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix.
            </param>
      <param name="side">
            The enumeration specifying whether the eigenVectorsMatrix (parameter) contains the right side or left side eigenvectors. This is a value from the EigenVectorSide enumeration.
            </param>
      <param name="eigenVectors">
            The generalized eigenvectors of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). Each column of eigenVectors (parameter) is a generalized eigenvector of the selected side (parameter).
            </param>
      <returns>
            The generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified side (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the generalized eigenvalues and the left and right generalized eigenvectors for a pair of real matrices. 
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix.
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix.
            </param>
      <param name="leftEigenVectors">
            The left generalized eigenvectors of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). Each column of eigenVectors (parameter) is a left side generalized eigenvector.
            </param>
      <param name="rightEigenVectors">
            The right generalized eigenvectors of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). Each column of eigenVectors (parameter) is a right side generalized eigenvector.
            </param>
      <returns>
            The generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Computes the generalized eigenvalues for a pair of complex matrices. 
            </summary>
      <param name="inputSquareMatrixA">
            The first complex square input matrix.
            </param>
      <param name="inputSquareMatrixB">
            The second complex square input matrix.
            </param>
      <returns>
            The generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the generalized eigenvalues and the left or right generalized eigenvectors for a pair of complex matrices. 
            </summary>
      <param name="inputSquareMatrixA">
            The first complex square input matrix.
            </param>
      <param name="inputSquareMatrixB">
            The second complex square input matrix.
            </param>
      <param name="side">
            The enumeration specifying whether the eigenVectorsMatrix (parameter) contains the right side or left side eigenvectors. This is a value from the EigenVectorSide enumeration.
            </param>
      <param name="eigenVectors">
            The generalized eigenvectors of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). Each column of eigenVectors (parameter) is a generalized eigenvector of the selected side (parameter).
            </param>
      <returns>
            The generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified side (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the generalized eigenvalues and the left and right generalized eigenvectors for a pair of complex matrices. 
            </summary>
      <param name="inputSquareMatrixA">
            The first complex square input matrix.
            </param>
      <param name="inputSquareMatrixB">
            The second complex square input matrix.
            </param>
      <param name="leftEigenVectors">
            The left generalized eigenvectors of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). Each column of eigenVectors (parameter) is a left side generalized eigenvector.
            </param>
      <param name="rightEigenVectors">
            The right generalized eigenvectors of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). Each column of eigenVectors (parameter) is a right side generalized eigenvector.
            </param>
      <returns>
            The generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)). 
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecompositionInPlace(System.Double[0:,0:])">
      <summary>
            Performs an in-place Hessenberg decomposition of a real matrix. 
            </summary>
      <param name="inputSquareMatrix">
            On input, contains the real square matrix. On output, contains the Hessenberg matrix, resulting from the decomposition.
            </param>
      <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecomposition(System.Double[0:,0:],System.Double[0:,0:]@)">
      <summary>
            Performs a Hessenberg decomposition of a real matrix. 
            </summary>
      <param name="inputSquareMatrix">
            The real square input matrix.
            </param>
      <param name="hessenbergMatrix">
            The Hessenberg matrix resulting from the decomposition.
            </param>
      <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecompositionInPlace(NationalInstruments.ComplexDouble[0:,0:])">
      <summary>
            Performs an in-place Hessenberg decomposition of a complex matrix.
            </summary>
      <param name="inputSquareMatrix">
            On input, contains the complex square matrix. On output, contains the Hessenberg matrix, resulting from the decomposition.
            </param>
      <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Performs a Hessenberg decomposition of a complex matrix. 
            </summary>
      <param name="inputSquareMatrix">
            The complex square input matrix.
            </param>
      <param name="hessenbergMatrix">
            The Hessenberg matrix resulting from the decomposition.
            </param>
      <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@)">
      <summary>
            Performs the QZ decomposition of a pair of real matrices. This method computes only the Q matrix, 
            Z matrix, and the generalized eigenvalues alpha and beta.
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
      <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
      <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Performs the QZ decomposition of a pair of real matrices. This method does not compute the left side 
            and right side eigenvectors.
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
      <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
      <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="quasiTriangularMatrixA">
            Upon return, contains the quasi-triangular matrix such that Q'AZ = quasiTriangularMatrixA (parameter). 
            </param>
      <param name="upperTriangularMatrixB">
            Upon return, contains the upper triangular matrix such that Q'BZ = upperTriangularMatrixB (parameter).
            </param>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Performs the QZ decomposition of a pair of real matrices. This method does not compute the 
            quasi-triangular matrix A and the upper triangular matrix B.
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
      <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
      <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="leftEigenVectors">
            Upon return, contains the left generalized eigenvectors of matrix pair (A,B). 
            </param>
      <param name="rightEigenVectors">
            Upon return, contains the right generalized eigenvectors of matrix pair (A,B). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Performs the QZ decomposition of a pair of real matrices.
            </summary>
      <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
      <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
      <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
      <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="quasiTriangularMatrixA">
            Upon return, contains the quasi-triangular matrix such that Q'AZ = quasiTriangularMatrixA (parameter). 
            </param>
      <param name="upperTriangularMatrixB">
            Upon return, contains the upper triangular matrix such that Q'BZ = upperTriangularMatrixB (parameter).
            </param>
      <param name="leftEigenVectors">
            Upon return, contains the left generalized eigenvectors of matrix pair (A,B). 
            </param>
      <param name="rightEigenVectors">
            Upon return, contains the right generalized eigenvectors of matrix pair (A,B). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[]@)">
      <summary>
            Performs the QZ decomposition of a pair of complex matrices. This method does not compute the 
            left side and right side eigenvectors, the quasi triangular matrix, and the upper triangular matrix.
            </summary>
      <param name="inputSquareMatrixA">
            The first complex square input matrix (A).
            </param>
      <param name="inputSquareMatrixB">
            The second complex square input matrix (B).
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
      <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
      <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Performs the QZ decomposition of a pair of complex matrices.
            </summary>
      <param name="inputSquareMatrixA">
            The first complex square input matrix (A).
            </param>
      <param name="inputSquareMatrixB">
            The second complex square input matrix (B).
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
      <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
      <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (inputSquareMatrixA (parameter), inputSquareMatrixB (parameter)).
            </param>
      <param name="quasiTriangularMatrixA">
            Upon return, contains the quasi-triangular matrix such that Q'AZ = quasiTriangularMatrixA (parameter). 
            </param>
      <param name="upperTriangularMatrixB">
            Upon return, contains the upper triangular matrix such that Q'BZ = upperTriangularMatrixB (parameter).
            </param>
      <param name="leftEigenVectors">
            Upon return, contains the left generalized eigenvectors of matrix pair (A,B). 
            </param>
      <param name="rightEigenVectors">
            Upon return, contains the right generalized eigenvectors of matrix pair (A,B). 
            </param>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrixA (parameter) is null.
            
            -or-
            

inputSquareMatrixB (parameter) is null.
            


            -or-
            inputSquareMatrixB (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrixA (parameter) is not a square matrix.
            
            -or-
            

inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            


            -or-
            inputSquareMatrixA (parameter) and inputSquareMatrixB (parameter) do not have the same size.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@)">
      <summary>
            Computes the Schur decomposition of a real square matrix A.
            </summary>
      <param name="inputSquareMatrix">
            The input square matrix.
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="schurForm">
            The Schur form matrix. schurForm (parameter) is a quasi-triangular matrix. 
            </param>
      <returns>
            The eigenvalues of inputSquareMatrix (parameter), in the same order that they appear on the diagonal of schurForm (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@)">
      <summary>
            Computes the Schur decomposition of a real square matrix A.
            </summary>
      <param name="inputSquareMatrix">
            The input square matrix.
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="schurForm">
            The Schur form matrix. schurForm (parameter) is a quasi-triangular matrix. 
            </param>
      <param name="orthogonalMatrix">
            The orthogonal matrix Q.
            </param>
      <returns>
            The eigenvalues of inputSquareMatrix (parameter), in the same order that they appear on the diagonal of schurForm (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the Schur decomposition of a complex square matrix A.
            </summary>
      <param name="inputSquareMatrix">
            The input complex square matrix.
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="schurForm">
            The complex Schur form matrix. schurForm (parameter) is an upper triangular matrix. 
            </param>
      <returns>
            The eigenvalues of inputSquareMatrix (parameter), in the same order that they appear on the diagonal of schurForm (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
      <summary>
            Computes the Schur decomposition of a complex square matrix and returns the orthogonal matrix.
            </summary>
      <param name="inputSquareMatrix">
            The input complex square matrix.
            </param>
      <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. ReorderMechanism gives the available reorder mechanisms.
            </param>
      <param name="schurForm">
            The complex Schur form matrix. schurForm (parameter) is an upper triangular matrix.
            </param>
      <param name="orthogonalMatrix">
            The unitary matrix Q.
            </param>
      <returns>
            The eigenvalues of inputSquareMatrix (parameter), in the same order that they appear on the diagonal of schurForm (parameter).
            </returns>
      <exception cref="T:System.ArgumentNullException">inputSquareMatrix (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">inputSquareMatrix (parameter) is not a square matrix.
            </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified reorderMechanism (parameter) is invalid.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.IntegrationMethod">
      <summary>
            Specifies the IntegrationMethod used for numeric integration.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.TrapezoidalRule">
      <summary>
            Uses Trapezoidal Rule in the computation for the numeric integration.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.SimpsonsRule">
      <summary>
            Uses Simpsons' Rule in the computation for the numeric integration.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.Simpsons3by8Rule">
      <summary>
            Uses Simpsons' 3/8 Rule in the computation for the numeric integration.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.BodeRule">
      <summary>
            Uses Bode Rule in the computation for the numeric integration.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.RangeType">
      <summary>
            Specifies the type of range used by the RemoveOutliersUsingRange method.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.RangeType.YRange">
      <summary>
            The range of Y is used by the RemoveOutliersUsingRange method.
            The first two elements in the range array are treated as the upper and lower bounds 
            for the y-axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.RangeType.XRange">
      <summary>
            The range of X is used by the RemoveOutliersUsingRange method.
            The first two elements in the range array are treated as the upper and lower bounds 
            for the x-axis.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Math.RangeType.XAndYRange">
      <summary>
            The range of X and the range of Y are both used by the RemoveOutliersUsingRange method.
            The first and second element in the range array are the upper and lower bounds for the x-axis, and 
            the third and fourth element in the range array are the upper and lower bounds for the y-axis.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Math.ComplexMath">
      <summary>
            Provides a set of methods for common mathematical functions on complex numbers.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ComplexMath.SquareRoot(NationalInstruments.ComplexDouble)">
      <summary>Calculates the square root of a ComplexDouble 
            number.
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            The square root of c (parameter).
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Log10(NationalInstruments.ComplexDouble)">
      <summary>
            Calculates the base 10 logarithm of a ComplexDouble number.
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            The base 10 logarithm of c (parameter).
            </returns>
      <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when carrying out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Log(NationalInstruments.ComplexDouble)">
      <summary>
            Calculates the natural logarithm of a ComplexDouble number.
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            The natural logarithm of c (parameter).
            </returns>
      <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when carrying out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Pow(NationalInstruments.ComplexDouble,System.Double)">
      <summary>
            Calculates the value of a ComplexDouble number raised to a specified power.
            </summary>
      <param name="x">
            A ComplexDouble to be raised to a power.
            </param>
      <param name="y">
            A number that specifies the power.
            </param>
      <returns>
            The number x (parameter) raised to the power y (parameter).
            </returns>
      <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when carrying out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Exp(NationalInstruments.ComplexDouble)">
      <summary>
            Calculates the exponential of a ComplexDouble number.
            </summary>
      <param name="c">
            A ComplexDouble.
            </param>
      <returns>
            The exponential of c (parameter).
            </returns>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.UnscaledWindow">
      <summary>Provides a set of methods that apply unscaled windows to an input signal.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Triangular(System.Double[])">
      <summary>
            Applies an asymmetric triangular window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the triangular window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(System.Double[])">
      <summary>
            Applies an asymmetric Hanning window to the input signal.</summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Hanning window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hamming(System.Double[])">
      <summary>
            Applies an asymmetric Hamming window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, contains the signal smoothed by the Hamming window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Blackman(System.Double[])">
      <summary>
            Applies an asymmetric Blackman window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Blackman window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Kaiser(System.Double[],System.Double)">
      <summary>
            Applies an asymmetric Kaiser-Bessel window to the input signal.</summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Kaiser-Bessel window.
            </param>
      <param name="beta">
            The window shape parameter used in the Kaiser-Bessel window function. A larger beta results in a narrower window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanHarris(System.Double[])">
      <summary>
            Applies an asymmetric Blackman-Harris window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Blackman-Harris window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.CosineTapered(System.Double[])">
      <summary>
            This method is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.CosineTapered(System.Double[],System.Double)">
      <summary>
            Applies an asymmetric cosine tapered window to a real signal.
            </summary>
      <param name="signal">
            On input, contains the input signal.
            On output, contains the output signal with a cosine tapered window applied. 
            </param>
      <param name="ratio">
            The ratio of the total length of the tapered section to the whole signal length. The window is a 
            cosine tapered window only if 0  ratio  1. If 
            ratio  0, the window is equivalent to a rectangular window. If 
            ratio  1, the window is equivalent to a 
            Hanning window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.ExactBlackman(System.Double[])">
      <summary>
            Applies an asymmetric exact Blackman window to the input signal.</summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the exact Blackman window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(System.Double[],System.Double)">
      <summary>
            Applies an asymmetric exponential window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the exponential window.
            </param>
      <param name="finalValue">
            The final value of the exponential window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.FlatTop(System.Double[])">
      <summary>
            Applies an asymmetric flat top window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the flat top window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)">
      <summary>
            Applies an asymmetric force window to the input signal.</summary>
      <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the force window.
            </param>
      <param name="dutyCycle">
            The duty cycle of the force window. dutyCycle (parameter) must be a percentage. If your 
            duty cycle is expressed as a fraction of a completed record, you must convert your duty cycle 
            to a percentage before using the Force method.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) must be greater than or equal to two.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.GeneralCosine(System.Double[],System.Double[])">
      <summary>
            Applies an asymmetric general cosine window to the input signal.
            </summary>
      <param name="data">
            On input, contains the input signal. On output, contains the signal smoothed by the general cosine window.
            </param>
      <param name="coefficients">
            The coefficients used in the general cosine window.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            
            -or-
            coefficients (parameter) is null.
            </exception>
      <exception cref="T:System.ArgumentException">
                    The number of samples in data (parameter) is equal to zero.
            
            -or-
            
                    The number of samples in coefficients (parameter) is equal to zero.
            </exception>
      <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanNuttall(System.Double[])">
      <summary>
            Applies an asymmetric Blackman-Nuttall window to a real signal.
            </summary>
      <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Blackman-Nuttall window applied. 
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.DolphChebyshev(System.Double[],System.Double)">
      <summary>
            Applies an asymmetric Dolph-Chebyshev window to a real signal.
            </summary>
      <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Dolph-Chebyshev window applied. 
            </param>
      <param name="mainlobeToSideLobeRatio">
            The height ratio of the main lobe to the side lobe, in decibels.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Gauss(System.Double[],System.Double)">
      <summary>
            Applies an asymmetric Gaussian window to a real signal.
            </summary>
      <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Gaussian window applied. 
            </param>
      <param name="standardDeviation">
            The standard deviation of the Gaussian window. The default value is 0.2. If 
            standardDeviation (parameter) 0, the default value is used.
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Gauss(System.Double[])">
      <summary>
            Applies an asymmetric Gaussian window to a real signal using a default value for the standard deviation.
            </summary>
      <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Gaussian window applied. 
            </param>
      <exception cref="T:System.ArgumentNullException">data (parameter) is null.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType">
      <summary>
            Specifies the types of windows to be used.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Rectangular">
      <summary>
            A rectangular scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Hanning">
      <summary>
            A Hanning scaled window. This is the default value.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Hamming">
      <summary>
            A Hamming scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanHarris">
      <summary>
            A Blackman-Harris scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.ExactBlackman">
      <summary>
            An exact Blackman scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Blackman">
      <summary>
            A Blackman scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.FlatTop">
      <summary>
            A flat top window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanHarris4Term">
      <summary>
            A 4-term Blackman-Harris scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanHarris7Term">
      <summary>
            A 7-term Blackman-Harris scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.LowSidelobe">
      <summary>
            A low side lobe scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanNuttall">
      <summary>
            A Blackman-Nuttall scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Triangle">
      <summary>
            A triangle scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser">
      <summary>
            A Kaiser scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev">
      <summary>
            A Dolph-Chebyshev scaled window.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian">
      <summary>
            A Gaussian scaled window.
            </summary>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter">
      <summary>Implements a Butterworth highpass filter.
            </summary>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter.#ctor(System.Int32,System.Double,System.Double)">
      <summary>Creates a ButterworthHighpassFilter
            using the specified filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter.Reset(System.Int32,System.Double,System.Double)">
      <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
      <param name="filterOrder">
            The order of the filter.
            </param>
      <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
      <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
      <exception cref="T:System.ArgumentException">filterOrder (parameter) is less than or equal to zero.
            
            -or-
            samplingFrequency (parameter) is less than or equal zero.
            
            -or-
            cutoffFrequency (parameter) is less than or equal to zero.
            
            -or-
            cutoffFrequency (parameter) does not satisfy Nyquist's criterion.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
      <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
      <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
    </member>
    <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter.CutoffFrequency">
      <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
    </member>
    <member name="T:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm">
      <summary>
            Specifies the method to use to compute the Chirp-Z Transform. 
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm.Direct">
      <summary>
            The Direct method is used to compute the Chirp-Z Transform.
            </summary>
    </member>
    <member name="F:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm.FrequencyDomain">
      <summary>
            The Frequency Domain method is used to compute the Chirp-Z Transform.
            </summary>
    </member>
  </members>
</doc>