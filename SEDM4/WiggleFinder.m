(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["SEDM4`WiggleFinder`","SEDM4`EDMSuite`","NETLink`"];


(* ::Input::Initialization:: *)
plotWithSpread::usage="plotWithSpread[data_, trimLow_, trimHigh_, color_:Automatic, yRange_:Automatic] takes a TOF with errors and plots its mean and spread (based on its errors). Gridlines are drawn based on trimLow and trimHigh to show where the analyses are carried out. The base color and y-axis range can be chosen as well.";
showWigglyChannelFinder::usage="showWigglyChannelFinder[switches_, tofSetsList_, datasetNames_, trimLow_, trimHigh_] takes a list of TOF channel sets and names for each set, extracts all possible channels from these sets based on the list of switches provided, calculates the chi-squared value for a model assuming a flat line around the mean of the channel, sorts the channels based on the chi-squared values and displays them.";


(* ::Input::Initialization:: *)



(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
modeHeads={"None","E","B","RF","MW","EB","ERF","EMW","BRF","BMW","RFMW","EBRF","EBMW","ERFMW","BRFMW","EBRFMW"};
specialChannels={"SIG"};


(* ::Input::Initialization:: *)



(* ::Input::Initialization:: *)
chan[n_,switches_]:=Pick[switches,Thread[IntegerDigits[n,2,Length[switches]]==1]]


(* ::Input::Initialization:: *)
getChannels[switches_]:=Join[{#}&/@{"SIG"},chan[#,switches]&/@Range[1,2^Length[switches]-1]]


(* ::Input::Initialization:: *)
getTOFWithError[tofWithErr_]:=Transpose[{tofWithErr@Times,tofWithErr@Data,tofWithErr@Errors}]


(* ::Input::Initialization:: *)
plotWithSpreadMini[d_,trimLow_,trimHigh_,color_,range_]:=Show[
ListPlot[Transpose[{{#[[1]],#[[2]]-#[[3]]},{#[[1]],#[[2]]+#[[3]]}}&/@d],Filling->{1->{{2},Directive[Opacity[0.2],color]}},Joined->True,PlotStyle->{Gray,Gray},PlotRange->All,GridLines->{{trimLow,trimHigh},None},GridLinesStyle->Directive[Purple,Thick,Dashed]],
ListPlot[{#[[1]],#[[2]]}&/@d,Joined->True,PlotStyle->color,PlotRange->All],
PlotRange->{All,range},Frame->True,Axes->None,FrameTicks->{Automatic,Automatic}
]


(* ::Input::Initialization:: *)
plotWithSpread[d_,trimLow_,trimHigh_,color_:Automatic,range_:Automatic]:=Show[
ListPlot[Transpose[{{#[[1]],#[[2]]-#[[3]]},{#[[1]],#[[2]]+#[[3]]}}&/@d],Filling->{1->{{2},Directive[Opacity[0.2],color]}},Joined->True,PlotStyle->{Gray,Gray},PlotRange->All,GridLines->{{trimLow,trimHigh},None},GridLinesStyle->Directive[Purple,Thick,Dashed]],
ListPlot[{#[[1]],#[[2]]}&/@d,Joined->True,PlotStyle->color,PlotRange->All],
PlotRange->{All,range},Frame->True,FrameTicks->{Automatic,Automatic}
]


(* ::Input::Initialization:: *)
chiSquaredForTOF[tofWithErr_,timeStart_,timeEnd_]:=Module[{trimmedTOF,channelmean},
trimmedTOF=Select[getTOFWithError[tofWithErr],timeStart<=#[[1]]<=timeEnd&];
channelmean=Mean[#[[2]]&/@trimmedTOF];
Mean[((#[[2]]-channelmean)/#[[3]])^2&/@(trimmedTOF)]
]


(* ::Input::Initialization:: *)
plotForTOFSetList[channelSetList_,trimLow_,trimHigh_,channel_,stateIndex_]:=Show[
plotWithSpreadMini[getTOFWithError[channelSetList[[#]][[stateIndex]]@GetChannel[channel[[1]]]],trimLow,trimHigh,Hue[#/Length[channelSetList]],All]&/@Range[Length[channelSetList]]]


(* ::Input::Initialization:: *)
showWigglyChannels[switches_,threshold_,stateIndex_,tofSetsList_,filterSwitches_,excludeSwitches_,sortBy_,trimLow_,trimHigh_]:=Module[{sortedChans,wigglyChans,filteredChannels,filteredChannels2},
sortedChans=Sort[{#,chiSquaredForTOF[tofSetsList[[sortBy]][[stateIndex]]@GetChannel[#],trimLow,trimHigh]}&/@getChannels[switches],#[[2]]>#2[[2]]&];
wigglyChans=Select[sortedChans,#[[2]]>threshold&];
filteredChannels=Cases[wigglyChans,Alternatives@@({{___,#,___},_}&/@Join[filterSwitches,specialChannels])];
filteredChannels2=DeleteCases[filteredChannels,Alternatives@@({{___,#,___},_}&/@excludeSwitches)];
Grid[Partition[Grid[{{#[[1]]},{#[[2]]},{
plotForTOFSetList[tofSetsList,trimLow,trimHigh,#,stateIndex]
}}]&/@filteredChannels2,4,4,1,{}]]
]


(* ::Input::Initialization:: *)
showWigglyChannelFinder[switches_,tofSetsList_,datasetNames_,trimLow_,trimHigh_]:=Panel[Panel[Manipulate[
showWigglyChannels[
switches,
threshold,
Position[modeHeads,sortIndex][[1]][[1]],
tofSetsList,
filterSwitches,
excludeSwitches,
sortBy,
trimLow,
trimHigh],
{{sortIndex,"None","Machine state weighting"},modeHeads,ControlType->SetterBar},
{{threshold,20,"Cut threshold"},1.5,20,ControlType->InputField},
{{filterSwitches,switches,"Must include one of: "},switches,ControlType->CheckboxBar},
{{excludeSwitches,{},"Must not include: "},switches,ControlType->CheckboxBar},
{{sortBy,1,"Sort on dataset"},Range[1,Length[tofSetsList]],ControlType->RadioButtonBar}
],DisplayForm[RowBox[{"Wiggle finder  :  ",RowBox[MapThread[Style[#1<>" ",Hue[#2/Length[tofSetsList]]]&,{datasetNames,Range[Length[tofSetsList]]}]]}]]]]


(* ::Input::Initialization:: *)
End[];
EndPackage[];
