(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["SEDM4`Statistics`"];


(* ::Input::Initialization:: *)
bootstrapReplicate::usage="";
bootstrapMeanAndError::usage="";
trimmedMeanAndBSErr::usage="";
diffWithError::usage="";
sumWithError::usage="";
productWithError::usage="";
quotientWithError::usage="";
interxileRangeAndBSErr::usage="";
sdAndBSErr::usage="";
linearFitXYDist::usage="";
weightedMean::usage="Takes  a list of {value, error} pairs and calculates the weighted mean.";
weightedTrimmedMean::usage=""
weightedTrimmedMeanAndBSError::usage=""
weightedMeanAndBSError::usage=""
meanAndBSError::usage=""
standardErrorOnMean::usage=""


(* ::Input::Initialization:: *)
Begin["`Private`"];

bootstrapReplicate[dataset_]:=Module[{l,rnds},l=Length[dataset];rnds=Table[RandomInteger[l-1]+1,{l}];dataset[[rnds]]];

bootstrapMeanAndError[vals_]:=
{Mean[#],StandardDeviation[#]}&[Table[Mean[bootstrapReplicate[vals]],{1000}]]

trimmedMeanAndBSErr[dat_,trimLevel_:0.05,replicates_:1000]:={Mean[#],StandardDeviation[#]}&[Table[TrimmedMean[bootstrapReplicate[dat],trimLevel],{replicates}]]
trimmedMeanAndBSErr[{}]:={0,0}

diffWithError={(#[[1]][[1]]-#[[2]][[1]]),Sqrt[#[[1]][[2]]^2+#[[2]][[2]]^2]}&;
sumWithError={(#[[1]][[1]]+#[[2]][[1]]),Sqrt[#[[1]][[2]]^2+#[[2]][[2]]^2]}&;

productWithError={#[[1]][[1]]#[[2]][[1]],Sqrt[#[[2]][[1]]^2 #[[1]][[2]]^2+#[[1]][[1]]^2 #[[2]][[2]]^2]}&;

quotientWithError={#[[1]][[1]]/#[[2]][[1]],#[[1]][[1]]/#[[2]][[1]] Sqrt[#[[1]][[2]]^2/#[[1]][[1]]^2+#[[2]][[2]]^2/#[[2]][[1]]^2]}&;
interxileRangeAndBSErr[{}]:={0,0}
interxileRangeAndBSErr[dat_,lowPercent_:0.1,replicates_:1000]:=({Mean[#1],StandardDeviation[#1]}&)[Table[
Subtract@@Quantile[bootstrapReplicate[dat],{1-lowPercent,lowPercent}],{replicates}]]
sdAndBSErr[{}]:={0,0}
sdAndBSErr[dat_,replicates_:1000]:=({Mean[#1],StandardDeviation[#1]}&)[Table[
StandardDeviation[bootstrapReplicate[dat]],{replicates}]]
linearFitXYDist[data_]:=Module[{m,c,sln,xvalFromdata,distFromdata},
xvalFromdata[d_]:=(-c m+d[[1]]+m d[[2]])/(1+m^2);
distFromdata[d_]:=(d[[1]]-xvalFromdata[d])^2+(d[[2]]-(m*xvalFromdata[d]+c))^2;
sln=NMinimize[{Plus@@(distFromdata/@data),m>0},{m,c}];
{m,c}/.sln[[2]]]

weightedMean[chanList_]:=Module[{wvr,wedm,wse},
wvr=(1/Plus@@ (1/#[[2]]^2&/@ chanList));
wedm =wvr(Plus@@((#[[1]]/#[[2]]^2)&/@chanList));
wse = Sqrt[wvr];
{wedm,wse}
];

weightedTrimmedMean[dat_,trimLevel_]:=Module[{l},
l=Length[dat];
weightedMean[Drop[Drop[SortBy[dat,#[[1]]&],Round[trimLevel l]],Round[-trimLevel l]]]
]
weightedTrimmedMeanAndBSError[dat_,trimLevel_:0.05,replicates_:1000]:={Mean[#],StandardDeviation[#]}&[Table[weightedTrimmedMean[bootstrapReplicate[dat],trimLevel][[1]],{replicates}]]
weightedTrimmedMeanAndBSError[{}]:={0,0}

weightedMeanAndBSError[dat_,replicates_:1000]:={Mean[#],StandardDeviation[#]}&[Table[weightedMean[bootstrapReplicate[dat]][[1]],{replicates}]]
weightedMeanAndBSError[{}]:={0,0}

meanAndBSError[dat_,replicates_:1000]:={Mean[#],StandardDeviation[#]}&[Table[Mean[bootstrapReplicate[dat]],{replicates}]]
meanAndBSError[{}]:={0,0}

standardErrorOnMean[dat_]:=StandardDeviation[dat]/Sqrt[Length[dat]]


(* ::Input::Initialization:: *)
End[];
EndPackage[];
