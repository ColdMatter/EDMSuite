(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[     38827,        942]
NotebookOptionsPosition[     34121,        845]
NotebookOutlinePosition[     34498,        861]
CellTagsIndexPosition[     34455,        858]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["SEDM4 Database", "Title",
 CellChangeTimes->{
  3.422794127606*^9, {3.7796173763622236`*^9, 
   3.7796173764273663`*^9}},ExpressionUUID->"dc36c61a-eeef-49a2-b2a5-\
274dc56a3b93"],

Cell["\<\
This package has functions that pertain to the EDM database. It also has \
convenience functions to obtain channels from the blocks in the database.\
\>", "Text",
 CellChangeTimes->{{3.7814257403995743`*^9, 
  3.7814257789430323`*^9}},ExpressionUUID->"9d0c4c2d-3586-40e8-8538-\
10f7a7df1bdb"],

Cell[CellGroupData[{

Cell["Package starts", "Section",ExpressionUUID->"c5123353-2635-493b-8a26-4bbe75027a75"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", 
   RowBox[{
   "\"\<SEDM4`Database`\>\"", ",", "\"\<SEDM4`EDMSuite`\>\"", ",", 
    "\"\<NETLink`\>\"", ",", "\"\<JLink`\>\""}], "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.394341162567*^9, 3.3943411630360003`*^9}, {
  3.4227941306070004`*^9, 3.42279414083*^9}, {3.422797076046*^9, 
  3.4227970834449997`*^9}, {3.7796173802114058`*^9, 3.779617383483085*^9}, {
  3.779624992702054*^9, 3.779624993233368*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"22b9d45a-e62b-4456-a086-6db664255b8f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Adding", "/", "removing"}], " ", "items", " ", "from", " ", 
    "the", " ", "database"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"addFileToDatabase", "::", "usage"}], "=", 
     "\"\<addFileToDatabse[filename_] adds the given block file to the \
database. It uses SirCachealot to demodulate the block data before adding the \
demodulated block to the database.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addFilesToDatabase", "::", "usage"}], "=", 
     "\"\<addFilesToDatabase[filenames_] adds multiple block files (given as \
a list of filenames) to the database, with a progress bar.\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"removeDBlock", "::", "usage"}], "=", 
     "\"\<Removes the block with the given UID from the database.\>\""}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Tagging", " ", "blocks"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"addTagToBlock", "::", "usage"}], "=", 
     "\"\<addTagToBlock[cluster_, index_, tagToAdd_] associates a tag with a \
particular block (defined by its cluster and index). This association \
persists in the database unless explicitly removed (i.e. it doesn't go away \
when you re-analyse/remove dblocks etc.)\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"removeTagFromBlock", "::", "usage"}], "=", 
     "\"\<removeTagFromBlock[cluster_, index_, tagToRemove_] removes a tag \
from a block.\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Selection", "/", "extraction"}], " ", "of", " ", "blocks", " ", 
     "from", " ", "the", " ", "database"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getDBlock", "::", "usage"}], "=", 
     "\"\<getDBlock[uid_] returns a demodulated block identified by its uid \
from the database.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectByCluster", "::", "usage"}], "=", 
     "\"\<selectByCluster[clusterName_] returns all demodulated blocks that \
are from the same cluster.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectByTag", "::", "usage"}], "=", 
     "\"\<selectByTag[tag_] returns all demodulated blocks that have the same \
tag.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"uidsForTag", "::", "usage"}], "=", 
     "\"\<\nuidsForTag[tag_] returns all uids that have the same tag.\n\
uidsForTag[tag_, uids_] returns all uids that have the same tag, from a list \
of uids.\n\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"uidsForAnalysisTag", "::", "usage"}], "=", 
     "\"\<\nuidsForAnalysisTag[tag_] returns all uids that have the same \
analysis tag.\nuidsForAnalysisTag[tag_, uids_] returns all uids that have the \
same analysis tag, from a list of uids.\n\>\""}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"uidsForCluster", "::", "usage"}], "=", 
     "\"\<\nuidsForClusterTag[tag_] returns all uids for blocks from the same \
cluster.\nuidsForClusterTag[tag_, uids_] returns all uids for blocks from the \
same cluster, from a list of uids.\n\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"uidsForMachineState", "::", "usage"}], "=", 
     "\"\<\nuidsForMachineState[eState_, bState_, rfState_, mwState_] returns \
all uids for blocks that have the same manual state.\n\
uidsForMachineState[eState_, bState_, rfState_, mwState_, uids_] returns all \
uids for blocks that have the same manual state, from a list of uids.\n\
\>\""}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Convenience", " ", "functions", " ", "to", " ", "extract", " ", 
     "channels", " ", "from", " ", "a", " ", "demodulated", " ", "block"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getPointChannelValue", "::", "usage"}], "=", 
    "\"\<getPointChannelValue[channel, detector, dblock] gives the point \
channel value for the detector in a demodulated block dblock.\>\""}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getPointChannelError", "::", "usage"}], "=", 
    "\"\<getPointChannelError[channel, detector, dblock] gives the point \
channel error for the detector in a demodulated block dblock.\>\""}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getPointChannel", "::", "usage"}], "=", 
    "\"\<getPointChannel[channel, detector, dblock] gives the point channel \
for the detector in a demodulated block dblock in the form {value, \
error}.\>\""}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getTOFChannelTimes", "::", "usage"}], "=", 
    "\"\<getTOFChannelTimes[channel, detector, dblock] gives the TOF channel \
times for the detector in a demodulated block dblock.\>\""}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getTOFChannelValues", "::", "usage"}], "=", 
    "\"\<getTOFChannelValues[channel, detector, dblock] gives the TOF channel \
values for the detector in a demodulated block dblock.\>\""}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getTOFChannelErrors", "::", "usage"}], "=", 
    "\"\<getTOFChannelErrors[channel, detector, dblock] gives the TOF channel \
errors for the detector in a demodulated block dblock.\>\""}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"getTOFChannel", "::", "usage"}], "=", 
    "\"\<getTOFChannel[channel, detector, dblock] gives the TOF channel for \
the detector in a demodulated block dblock in the form \
{{\!\(\*SubscriptBox[\(time\), \(i\)]\), \!\(\*SubscriptBox[\(value\), \(i\)]\
\), \!\(\*SubscriptBox[\(error\), \(i\)]\)}...}.\>\""}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Finding", " ", "blocks", " ", "from", " ", "hard", " ", "disk"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getClusterFiles", "::", "usage"}], "=", 
     "\"\<getClusterFiles[clusterName_] returns a list of files that belong \
to the named cluster. It expects the files to be stored in the standard \
structure. It doesn't query the database - it really looks for files on your \
hard disk.\>\""}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"getBlockFile", "::", "usage"}], "=", 
     "\"\<getBlockFile[clusterName_, clusterIndex_] returns the filename for \
the block identified by its cluster name and index. It will only return a \
value if you have that block in your data root.\>\""}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Other", " ", "useful", " ", "functions"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"machineStateForCluster", "::", "usage"}], "=", 
     "\"\<machineStateForCluster[clusterName_] returns the machine state for \
a particular cluster in the form {eState, bState, rfState, mwState}.\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"timeStampToDateList", "::", "usage"}], "=", 
     "\"\<timeStampToDateList[ts_] converts a .NET timestamp object into a \
Mathematica DataList object.\>\""}], ";"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.399803015865*^9, 3.3998030193129997`*^9}, {
   3.422793890541*^9, 3.422793896894*^9}, {3.422794001758*^9, 
   3.422794002683*^9}, {3.422797049427*^9, 3.422797049609*^9}, {
   3.422797948704*^9, 3.422797954073*^9}, {3.422798066493*^9, 
   3.4227980870769997`*^9}, {3.422878940782*^9, 3.422878951692*^9}, {
   3.422946416366*^9, 3.422946428539*^9}, {3.422946482914*^9, 
   3.4229466247019997`*^9}, 3.4229467072139997`*^9, {3.422947675668*^9, 
   3.4229477194*^9}, {3.422947850168*^9, 3.422947851395*^9}, {
   3.422948030435*^9, 3.4229480332609997`*^9}, {3.422963571051*^9, 
   3.422963587836*^9}, {3.4230747000810003`*^9, 3.423074717091*^9}, {
   3.4284015796540003`*^9, 3.428401594309*^9}, {3.428401839553*^9, 
   3.42840184354*^9}, {3.440319657058*^9, 3.4403196616940002`*^9}, {
   3.4915519733308907`*^9, 3.491551980999329*^9}, {3.779023880979164*^9, 
   3.7790238987332726`*^9}, {3.779617397861232*^9, 3.7796174125381985`*^9}, {
   3.779617482450672*^9, 3.7796174972268496`*^9}, {3.779621791949404*^9, 
   3.779621848080295*^9}, {3.7796218958801374`*^9, 3.779622046371894*^9}, {
   3.779624181065028*^9, 3.779624191144805*^9}, {3.7796251019711804`*^9, 
   3.7796251077060175`*^9}, 3.7796254330181913`*^9, {3.779627835156128*^9, 
   3.779627837140723*^9}, {3.779627903031129*^9, 3.7796279177171497`*^9}, {
   3.7801412724336677`*^9, 3.780141280129159*^9}, {3.780141431216916*^9, 
   3.780141454160928*^9}, {3.78127234725395*^9, 3.7812723622687716`*^9}, {
   3.7812724812373934`*^9, 3.781272581482795*^9}, {3.7812726243156505`*^9, 
   3.781272735806054*^9}, {3.7814241106013117`*^9, 3.781424127297722*^9}, {
   3.781424274695549*^9, 3.781424424551834*^9}, {3.781424464818909*^9, 
   3.7814244908641286`*^9}, {3.78142453159136*^9, 3.781424540979315*^9}, {
   3.781424837648903*^9, 3.781424872515623*^9}, {3.781424958761837*^9, 
   3.7814250391876583`*^9}, {3.78142508593894*^9, 3.7814251127020607`*^9}, {
   3.78142540734828*^9, 3.7814256214173117`*^9}, {3.7814256529440665`*^9, 
   3.781425689074135*^9}, {3.781426673020568*^9, 
   3.7814267597621784`*^9}},ExpressionUUID->"2cff1154-664e-4ede-b223-\
36ce2c1b09e6"],

Cell[CellGroupData[{

Cell["Exposed package variables", "Subsection",ExpressionUUID->"260bc92a-f29e-4b59-931c-43e766aae8d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"analysisProgress", "=", "0"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3943636917462*^9, 3.3943636955842*^9}, {
  3.422793935301*^9, 3.422793936916*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"9d2e6e59-4049-4931-80ca-bd965e7275c9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Private", "Section",ExpressionUUID->"1cbb711d-6b30-465d-9833-653838340f95"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[29]:=",ExpressionUUID->"75bd5d32-56ee-4187-b5a6-af68e8038d26"],

Cell[CellGroupData[{

Cell["Local Constants", "Subsection",ExpressionUUID->"c652528f-e36b-466c-8e54-5111fc8dfabe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"kDataVersionString", "=", "\"\<v3\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.399792452703*^9, 3.39979245538*^9}, {
   3.3998028799779997`*^9, 3.399802880104*^9}, {3.399802914051*^9, 
   3.399802917219*^9}, {3.399803176759*^9, 3.399803177402*^9}, {
   3.399803283387*^9, 3.399803340862*^9}, {3.399803504337*^9, 
   3.39980350446*^9}, 3.399803932606*^9, 3.3998040962390003`*^9, {
   3.39980426887*^9, 3.399804268967*^9}, 3.422793945868*^9, 
   3.781426792662592*^9},ExpressionUUID->"144e215d-eb71-4be7-8499-\
5e3176acf7f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Messages", "Subsection",ExpressionUUID->"7966702e-63e1-43dc-950a-8ca080322be3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sedm4", "::", "noBlockFile"}], "=", 
   "\"\<There is no file corresponding to that block on disk.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.399803375481*^9, 3.39980337583*^9}, 
   3.3998043840039997`*^9, 3.422793952565*^9, 
   3.7814267969891195`*^9},ExpressionUUID->"59a4232d-3b11-4c10-b21b-\
50ee73ebe2c8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating the database", "Section",ExpressionUUID->"5a034fc7-7700-4400-a896-6ac9b9f872b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"addFileToDatabase", "[", "file_", "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"AddBlock", "[", "file", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.3943635650481997`*^9, 3.3943635925722*^9}, {
  3.422794075516*^9, 3.422794075657*^9}, {3.422797106389*^9, 
  3.422797106797*^9}, {3.422797979156*^9, 3.422798000293*^9}, {
  3.779620297960372*^9, 3.7796202980797234`*^9}, {3.7796203586327314`*^9, 
  3.7796203688158135`*^9}, {3.779620420943424*^9, 3.779620493879369*^9}, {
  3.7796218590915394`*^9, 3.7796218595337043`*^9}, {3.7814241549211197`*^9, 
  3.7814241623117666`*^9}},ExpressionUUID->"289f0eff-b0b7-4290-a79d-\
2faea5fff293"],

Cell[BoxData[
 RowBox[{
  RowBox[{"addFilesToDatabase", "[", "files_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"CheckAbort", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"addFileToDatabase", "[", 
          RowBox[{
          "files", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Failed to add file: \>\"", "<>", 
           RowBox[{
           "files", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
          "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Update", " ", "the", " ", "progress", " ", "dialog"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SEDM4`Database`analysisProgress", " ", "=", " ", 
        FractionBox["i", 
         RowBox[{"Length", "[", "files", "]"}]]}], ";"}], 
      "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "[", "files", "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.394341276701*^9, 3.394341340696*^9}, {3.394341376296*^9,
   3.394341376988*^9}, {3.3943636157511997`*^9, 3.3943636819821997`*^9}, {
  3.422794077781*^9, 3.422794084913*^9}, {3.422798016041*^9, 
  3.422798035417*^9}, {3.4227983368570004`*^9, 3.4227983369630003`*^9}, {
  3.779620305235718*^9, 3.779620310270105*^9}, {3.779620513987838*^9, 
  3.7796205275869966`*^9}, {3.7814241665921807`*^9, 3.7814241736017756`*^9}, {
  3.781424262019803*^9, 
  3.781424262621442*^9}},ExpressionUUID->"6397ac66-8bd0-4c9f-95e4-\
6293cb04697a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"removeDBlock", "[", "uidToRemove_", "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"RemoveDBlock", "[", "uidToRemove", "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.422794031926*^9, 3.422794032001*^9}, {3.422946385726*^9,
   3.422946404815*^9}, {3.42294646894*^9, 3.42294647821*^9}, {
  3.422946645051*^9, 3.42294665016*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"c56258a3-1bcf-412c-9bcd-1d49dab4d630"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tagging", "Section",ExpressionUUID->"9f5a73a0-afe0-4167-9cba-8d3769f56772"],

Cell[BoxData[
 RowBox[{
  RowBox[{"addTagToBlock", "[", 
   RowBox[{"cluster_", ",", "index_", ",", "tagToAdd_"}], "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"AddTagToBlock", "[", 
     RowBox[{"cluster", ",", "index", ",", "tagToAdd"}], "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.422794094117*^9, 3.422794097109*^9}, {
  3.4228787056140003`*^9, 3.422878741352*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"c1945b0b-6c77-4bd6-90c1-dd0469ed0242"],

Cell[BoxData[
 RowBox[{
  RowBox[{"removeTagFromBlock", "[", 
   RowBox[{"cluster_", ",", "index_", ",", "tagToRemove_"}], "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"RemoveTagFromBlock", "[", 
     RowBox[{"cluster", ",", "index", ",", "tagToRemove"}], 
     "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.422794104876*^9, 3.42279410492*^9}, {3.422878721782*^9, 
   3.4228787650039997`*^9}, 3.422879021189*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"7c6f5e62-d263-4cfb-9580-adff7e1fa336"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Selection and extraction", "Section",ExpressionUUID->"42a2679b-0c28-46a0-8512-75b58c834a6f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDBlock", "[", "uid_", "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"GetDBlock", "[", "uid", "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQA2IQ/SO4Wr+s4aXj2TMNYNrY2FvgIJDeIScoA6IPfX2h
AqK3nDinBaIbp4ZbgOh17oZWIPrD8nczQHRPjvpsEF2+L33zCSB9zHv7NhB9
ouzScxDtY/73DYj+VWf1/x+QXnHMm+E/kI5KWc7yH2yuNxuI/vL3hpxL40vH
OUdU5EF0xs7PmS5xrxwvqDLUgOj8D2Gr+DTfOC6Zm7kORIt7nJ7FD6SdpjrP
BdFVxW0ZgkD6j++cXBBd8mtxE4iOPircBqLfGWwQ5tF643jtTpIUiP4lf0Qe
RH8KUNYD0R8Voy1NdN44BnwXsAbRZldPOIJoLnPGRBC9L6SsGUQrvZ/eAqKt
vgpPCwXSej4LwHTdtOt364D0nUaxeyAaADjHrlc=
  "],ExpressionUUID->"e8127140-d069-45fe-bfac-390f8b1cf39c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"selectByCluster", "[", "clusterName_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "dbs", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dbs", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"$sirCachealot", "@", 
         RowBox[{"DBlockStore", "@", 
          RowBox[{"GetDBlock", "[", "#", "]"}]}]}], "&"}], "/@", 
       RowBox[{"$sirCachealot", "@", 
        RowBox[{"DBlockStore", "@", 
         RowBox[{"GetUIDsByCluster", "[", "clusterName", "]"}]}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Sort", "[", 
      RowBox[{"dbs", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#1", "@", 
           RowBox[{"TimeStamp", "@", "Ticks"}]}], ")"}], " ", "<", " ", 
         RowBox[{"(", 
          RowBox[{"#2", "@", 
           RowBox[{"TimeStamp", "@", "Ticks"}]}], ")"}]}], "&"}]}], "]"}]}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.422794112773*^9, 3.422794112941*^9}, {3.423072442271*^9,
   3.423072453692*^9}, {3.423072525642*^9, 3.4230725319449997`*^9}, {
  3.423216793558*^9, 3.423216859745*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"d107c1f4-7d5f-47cc-9f51-62d52933fd70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"selectByTag", "[", "tag_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"$sirCachealot", "@", 
     RowBox[{"DBlockStore", "@", 
      RowBox[{"GetDBlock", "[", "#", "]"}]}]}], "&"}], "/@", 
   RowBox[{"$sirCachealot", "@", 
    RowBox[{"DBlockStore", "@", 
     RowBox[{"GetUIDsByTag", "[", "tag", "]"}]}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.422794115679*^9, 3.422794115725*^9}, {3.423074683301*^9,
   3.42307469233*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"7d9b1ba2-2e9d-4966-b818-c0b9a5e9c50d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"uidsForTag", "[", "tag_", "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"GetUIDsByTag", "[", "tag", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uidsForTag", "[", 
   RowBox[{"tag_", ",", "uidsIn_"}], "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"GetUIDsByTag", "[", 
     RowBox[{"tag", ",", "uidsIn"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uidsForAnalysisTag", "[", "tag_", "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{
    "GetUIDsByAnalysisTag", "[", "tag", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uidsForAnalysisTag", "[", 
   RowBox[{"tag_", ",", "uidsIn_"}], "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"GetUIDsByAnalysisTag", "[", 
     RowBox[{"tag", ",", "uidsIn"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uidsForCluster", "[", "cluster_", "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{
    "GetUIDsByCluster", "[", "cluster", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uidsForCluster", "[", 
   RowBox[{"cluster_", ",", "uidsIn_"}], "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"GetUIDsByCluster", "[", 
     RowBox[{"cluster", ",", "uidsIn"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"uidsForMachineState", "[", 
    RowBox[{
    "eState_", ",", "bState_", ",", " ", "rfState_", ",", "mwState_"}], "]"}],
    ":=", 
   RowBox[{"$sirCachealot", "@", 
    RowBox[{"DBlockStore", "@", 
     RowBox[{"GetUIDsByMachineState", "[", 
      RowBox[{"eState", ",", "bState", ",", "rfState", ",", "mwState"}], 
      "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uidsForMachineState", "[", 
   RowBox[{
   "eState_", ",", "bState_", ",", "rfState_", ",", "mwState_", ",", 
    "uidsIn_"}], "]"}], ":=", 
  RowBox[{"$sirCachealot", "@", 
   RowBox[{"DBlockStore", "@", 
    RowBox[{"GetUIDsByMachineState", "[", 
     RowBox[{
     "eState", ",", "bState", ",", "rfState", ",", "mwState", ",", "uidsIn"}],
      "]"}]}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.428401388175*^9, 3.4284014208310003`*^9}, {
   3.428401481317*^9, 3.4284015394189997`*^9}, {3.428401738362*^9, 
   3.428401743065*^9}, {3.4284017950039997`*^9, 3.428401830757*^9}, {
   3.4403195944820004`*^9, 3.440319642462*^9}, {3.447413511275*^9, 
   3.447413526858*^9}, {3.4915521208863297`*^9, 3.491552121217349*^9}, {
   3.7790237170994377`*^9, 3.7790237757675133`*^9}, {3.7796242536098776`*^9, 
   3.7796243098414326`*^9}, {3.7796244742054625`*^9, 3.779624490953026*^9}, {
   3.779624568377757*^9, 3.7796245805958242`*^9}, {3.779625064393531*^9, 
   3.77962506576838*^9}, 3.7796254251111035`*^9, 3.781424104065941*^9, {
   3.7814267724127655`*^9, 
   3.7814267737102537`*^9}},ExpressionUUID->"5011010b-a77c-40cc-add7-\
9d80f9df5fa3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Channel extraction from a block", "Section",
 CellChangeTimes->{{3.7814248887998743`*^9, 
  3.7814248942383556`*^9}},ExpressionUUID->"a5ba69c8-f876-4fc2-a2a2-\
f2edf768f15f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"getPointChannelValue", "[", 
   RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
  RowBox[{"dblock", "@", 
   RowBox[{
    RowBox[{"GetPointChannel", "[", 
     RowBox[{"channel", ",", "detector"}], "]"}], "@", 
    "Value"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getPointChannelError", "[", 
   RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
  RowBox[{"dblock", "@", 
   RowBox[{
    RowBox[{"GetPointChannel", "[", 
     RowBox[{"channel", ",", "detector"}], "]"}], "@", 
    "Error"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getPointChannel", "[", 
    RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"getPointChannelValue", "[", 
      RowBox[{"channel", ",", "detector", ",", "dblock"}], "]"}], ",", 
     RowBox[{"getPointChannelError", "[", 
      RowBox[{"channel", ",", "detector", ",", "dblock"}], "]"}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTOFChannelTimes", "[", 
   RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
  RowBox[{"dblock", "@", 
   RowBox[{
    RowBox[{"GetTOFChannel", "[", 
     RowBox[{"channel", ",", "detector"}], "]"}], "@", 
    "Times"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTOFChannelValues", "[", 
   RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
  RowBox[{"dblock", "@", 
   RowBox[{
    RowBox[{"GetTOFChannel", "[", 
     RowBox[{"channel", ",", "detector"}], "]"}], "@", 
    "Data"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTOFChannelErrors", "[", 
   RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
  RowBox[{"dblock", "@", 
   RowBox[{
    RowBox[{"GetTOFChannel", "[", 
     RowBox[{"channel", ",", "detector"}], "]"}], "@", 
    "Errors"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getTOFChannel", "[", 
   RowBox[{"channel_", ",", "detector_", ",", "dblock_"}], "]"}], ":=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"getTOFChannelTimes", "[", 
      RowBox[{"channel", ",", "detector", ",", "dblock"}], "]"}], ",", 
     RowBox[{"getTOFChannelValues", "[", 
      RowBox[{"channel", ",", "detector", ",", "dblock"}], "]"}], ",", 
     RowBox[{"getTOFChannelErrors", "[", 
      RowBox[{"channel", ",", "detector", ",", "dblock"}], "]"}]}], "}"}], 
   "]"}]}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"c5ab5d8e-940b-4f0d-a8ce-03f3c7c60af8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding blocks from your hard disk", "Section",
 CellChangeTimes->{{3.781426642453356*^9, 
  3.7814266470295258`*^9}},ExpressionUUID->"2d647475-897c-4507-b672-\
acc90075c6eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getClusterFiles", "[", "clusterName_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"FileNames", "[", 
     RowBox[{
      RowBox[{"getDirectoryFromBrokenName", "[", 
       RowBox[{"breakUpClusterName", "[", "#", "]"}], "]"}], "<>", 
      "\"\<\\\\\>\"", "<>", "#", "<>", "\"\<*.zip\>\""}], "]"}], "&"}], "[", 
   "clusterName", "]"}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"799bada9-b7b8-4c58-8351-b89d337a49fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getBlockFile", "[", 
   RowBox[{"clusterName_", ",", "clusterIndex_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "files", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"files", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"FileNames", "[", 
         RowBox[{
          RowBox[{"getDirectoryFromBrokenName", "[", 
           RowBox[{"breakUpClusterName", "[", "#", "]"}], "]"}], "<>", 
          "\"\<\\\\\>\"", "<>", "#", "<>", "\"\<_\>\"", "<>", 
          RowBox[{"ToString", "[", "clusterIndex", "]"}], "<>", 
          "\"\<.zip\>\""}], "]"}], "&"}], "[", "clusterName", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "files", "]"}], " ", "\[NotEqual]", " ", "1"}],
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{"sedm4", "::", "noBlockFile"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Abort", "[", "]"}], ";"}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "files", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.4227949158199997`*^9, 3.422794915941*^9}, 
   3.779624946486805*^9},ExpressionUUID->"3845ebbf-6118-40a1-8ac4-\
dd94365533bd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"breakUpClusterName", "[", "cluster_", "]"}], ":=", 
    RowBox[{
     RowBox[{"StringCases", "[", 
      RowBox[{"cluster", ",", 
       RowBox[{
        RowBox[{
        "RegularExpression", "[", 
         "\"\<(\\\\d\\\\d)(\\\\w+)(\\\\d\\\\d)(\\\\d\\\\d)\>\"", "]"}], 
        "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{
         "\"\<$1\>\"", ",", "\"\<$2\>\"", ",", "\"\<$3\>\"", ",", 
          "\"\<$4\>\""}], "}"}]}]}], "]"}], "\[LeftDoubleBracket]", "1", 
     "\[RightDoubleBracket]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"monthReps", "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Jan\>\"", "\[Rule]", "\"\<January\>\""}], ",", "\n", 
      RowBox[{"\"\<Feb\>\"", "\[Rule]", "\"\<February\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Mar\>\"", "->", "\"\<March\>\""}], ",", "\n", 
      RowBox[{"\"\<Apr\>\"", "->", "\"\<April\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<May\>\"", "->", "\"\<May\>\""}], ",", "\n", 
      RowBox[{"\"\<Jun\>\"", "->", "\"\<June\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Jul\>\"", "->", "\"\<July\>\""}], ",", "\n", 
      RowBox[{"\"\<Aug\>\"", "->", "\"\<August\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Sep\>\"", "->", "\"\<September\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Oct\>\"", "->", "\"\<October\>\""}], ",", "\n", 
      RowBox[{"\"\<Nov\>\"", "->", "\"\<November\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Dec\>\"", "->", "\"\<December\>\""}]}], 
     "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getDirectoryFromBrokenName", "[", "brokenName_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "yearString", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"yearString", "=", 
       RowBox[{"\"\<20\>\"", " ", "<>", 
        RowBox[{
        "brokenName", "\[LeftDoubleBracket]", "3", 
         "\[RightDoubleBracket]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
      "Global`$dataRoot", "<>", "\"\<\\\\sedm\\\\\>\"", "<>", 
       "kDataVersionString", "<>", "\"\<\\\\\>\"", " ", "<>", "yearString", 
       "<>", "\"\<\\\\\>\"", "<>", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
         "brokenName", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
          "/.", "monthReps"}], ")"}], "<>", "yearString"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.39434706646*^9, 3.3943470668599997`*^9}, {
  3.425015898856*^9, 3.425015899269*^9}, {3.7796171636138706`*^9, 
  3.779617196572511*^9}, {3.7814261913592467`*^9, 
  3.7814262106886764`*^9}},ExpressionUUID->"a1540c5f-93d5-4382-b93c-\
dc87ff0c1db4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other useful functions", "Section",
 CellChangeTimes->{{3.781426766523149*^9, 
  3.781426768709963*^9}},ExpressionUUID->"49326b3f-205b-4ff1-85f5-\
a0a8a6ea114d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"machineStateForCluster", "[", "clusterName_", "]"}], ":=", 
  RowBox[{"NETBlock", "[", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"uid", ",", "dblock"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"uid", "=", 
       RowBox[{
        RowBox[{"uidsForCluster", "[", "clusterName", "]"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dblock", "=", 
       RowBox[{"getDBlock", "[", "uid", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"dblock", "@", 
         RowBox[{"Config", "@", 
          RowBox[{"Settings", "[", "\"\<eState\>\"", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"dblock", "@", 
         RowBox[{"Config", "@", 
          RowBox[{"Settings", "[", "\"\<bState\>\"", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"dblock", "@", 
         RowBox[{"Config", "@", 
          RowBox[{"Settings", "[", "\"\<rfState\>\"", "]"}]}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"dblock", "@", 
         RowBox[{"Config", "@", 
          RowBox[{"Settings", "[", "\"\<mwState\>\"", "]"}]}]}]}], 
       "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}], 
   "]"}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"32381c38-17e6-4a4c-9bfd-e8f9f31f762e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"timeStampToDateList", "[", "ts_", "]"}], ":=", 
  RowBox[{"DateList", "[", 
   RowBox[{
    RowBox[{
     FractionBox["ts", 
      SuperscriptBox["10", "7"]], "+", 
     RowBox[{"AbsoluteTime", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}],
       "]"}]}], "//", "N"}], "]"}]}]], "Input",
 InitializationCell->
  True,ExpressionUUID->"4c539288-2642-46ff-9055-5368dbb0de42"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Package ends", "Section",
 CellChangeTimes->{{3.781424910653989*^9, 
  3.781424911975524*^9}},ExpressionUUID->"89565a30-9da6-4bf4-bf4a-\
79777d0597ad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[57]:=",ExpressionUUID->"4ba8d83d-eb61-4615-bda4-a4c5c6d8e515"]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1036, 768},
WindowMargins->{{Automatic, 153}, {Automatic, 66}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 184, 4, 96, "Title",ExpressionUUID->"dc36c61a-eeef-49a2-b2a5-274dc56a3b93"],
Cell[754, 28, 302, 6, 34, "Text",ExpressionUUID->"9d0c4c2d-3586-40e8-8538-10f7a7df1bdb"],
Cell[CellGroupData[{
Cell[1081, 38, 88, 0, 67, "Section",ExpressionUUID->"c5123353-2635-493b-8a26-4bbe75027a75"],
Cell[1172, 40, 570, 11, 44, "Input",ExpressionUUID->"22b9d45a-e62b-4456-a086-6db664255b8f",
 InitializationCell->True],
Cell[1745, 53, 9539, 188, 1394, "Input",ExpressionUUID->"2cff1154-664e-4ede-b223-36ce2c1b09e6",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[11309, 245, 102, 0, 53, "Subsection",ExpressionUUID->"260bc92a-f29e-4b59-931c-43e766aae8d6"],
Cell[11414, 247, 293, 6, 44, "Input",ExpressionUUID->"9d2e6e59-4049-4931-80ca-bd965e7275c9",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11756, 259, 81, 0, 67, "Section",ExpressionUUID->"1cbb711d-6b30-465d-9833-653838340f95"],
Cell[11840, 261, 198, 4, 44, "Input",ExpressionUUID->"75bd5d32-56ee-4187-b5a6-af68e8038d26",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[12063, 269, 92, 0, 53, "Subsection",ExpressionUUID->"c652528f-e36b-466c-8e54-5111fc8dfabe"],
Cell[12158, 271, 587, 11, 44, "Input",ExpressionUUID->"144e215d-eb71-4be7-8499-5e3176acf7f5",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[12782, 287, 85, 0, 53, "Subsection",ExpressionUUID->"7966702e-63e1-43dc-950a-8ca080322be3"],
Cell[12870, 289, 391, 10, 44, "Input",ExpressionUUID->"59a4232d-3b11-4c10-b21b-50ee73ebe2c8",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13310, 305, 99, 0, 67, "Section",ExpressionUUID->"5a034fc7-7700-4400-a896-6ac9b9f872b2"],
Cell[13412, 307, 704, 13, 44, "Input",ExpressionUUID->"289f0eff-b0b7-4290-a79d-2faea5fff293",
 InitializationCell->True],
Cell[14119, 322, 1921, 41, 335, "Input",ExpressionUUID->"6397ac66-8bd0-4c9f-95e4-6293cb04697a",
 InitializationCell->True],
Cell[16043, 365, 509, 10, 44, "Input",ExpressionUUID->"c56258a3-1bcf-412c-9bcd-1d49dab4d630",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[16589, 380, 81, 0, 67, "Section",ExpressionUUID->"9f5a73a0-afe0-4167-9cba-8d3769f56772"],
Cell[16673, 382, 522, 11, 44, "Input",ExpressionUUID->"c1945b0b-6c77-4bd6-90c1-dd0469ed0242",
 InitializationCell->True],
Cell[17198, 395, 563, 12, 44, "Input",ExpressionUUID->"7c6f5e62-d263-4cfb-9580-adff7e1fa336",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[17798, 412, 98, 0, 67, "Section",ExpressionUUID->"42a2679b-0c28-46a0-8512-75b58c834a6f"],
Cell[17899, 414, 730, 15, 44, "Input",ExpressionUUID->"e8127140-d069-45fe-bfac-390f8b1cf39c",
 InitializationCell->True],
Cell[18632, 431, 1268, 32, 102, "Input",ExpressionUUID->"d107c1f4-7d5f-47cc-9f51-62d52933fd70",
 InitializationCell->True],
Cell[19903, 465, 570, 14, 44, "Input",ExpressionUUID->"7d9b1ba2-2e9d-4966-b818-c0b9a5e9c50d",
 InitializationCell->True],
Cell[20476, 481, 3070, 73, 216, "Input",ExpressionUUID->"5011010b-a77c-40cc-add7-9d80f9df5fa3",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[23583, 559, 180, 3, 67, "Section",ExpressionUUID->"a5ba69c8-f876-4fc2-a2a2-f2edf768f15f"],
Cell[23766, 564, 2565, 66, 235, "Input",ExpressionUUID->"c5ab5d8e-940b-4f0d-a8ce-03f3c7c60af8",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[26368, 635, 181, 3, 67, "Section",ExpressionUUID->"2d647475-897c-4507-b672-acc90075c6eb"],
Cell[26552, 640, 473, 12, 64, "Input",ExpressionUUID->"799bada9-b7b8-4c58-8351-b89d337a49fe",
 InitializationCell->True],
Cell[27028, 654, 1499, 37, 235, "Input",ExpressionUUID->"3845ebbf-6118-40a1-8ac4-dd94365533bd",
 InitializationCell->True],
Cell[28530, 693, 2956, 71, 444, "Input",ExpressionUUID->"a1540c5f-93d5-4382-b93c-dc87ff0c1db4",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[31523, 769, 167, 3, 67, "Section",ExpressionUUID->"49326b3f-205b-4ff1-85f5-a0a8a6ea114d"],
Cell[31693, 774, 1480, 36, 235, "Input",ExpressionUUID->"32381c38-17e6-4a4c-9bfd-e8f9f31f762e",
 InitializationCell->True],
Cell[33176, 812, 466, 13, 62, "Input",ExpressionUUID->"4c539288-2642-46ff-9055-5368dbb0de42",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[33679, 830, 157, 3, 67, "Section",ExpressionUUID->"89565a30-9da6-4bf4-bf4a-79777d0597ad"],
Cell[33839, 835, 254, 6, 64, "Input",ExpressionUUID->"4ba8d83d-eb61-4615-bda4-a4c5c6d8e515",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}
]
*)

