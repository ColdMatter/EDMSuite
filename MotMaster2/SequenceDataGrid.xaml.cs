using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MOTMaster2.SequenceData;
using System.Dynamic;


namespace MOTMaster2
{
    /// <summary>
    /// Interaction logic for SequenceDataGrid.xaml
    /// </summary>
    public partial class SequenceDataGrid : UserControl
    {
        public SequenceDataGrid()
        {
            InitializeComponent();
            sequenceDataGrid.DataContext = new SequenceStepViewModel();
            
        }

        private void sequenceDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            var dg = sender as DataGrid;
            //These hide the columns that by default display the dictionaries corresponding to the analog and digital channel types
            dg.Columns[5].Visibility = Visibility.Collapsed;
            dg.Columns[6].Visibility = Visibility.Collapsed;

            var first = dg.ItemsSource.Cast<object>().FirstOrDefault() as SequenceStep;
            if (first == null) return;
            var names = first.AnalogValueTypes.Keys;
            Style analogStyle = new Style(typeof(ComboBox));
     
            analogStyle.Setters.Add(new EventSetter() { Event = ComboBox.SelectionChangedEvent, Handler = new SelectionChangedEventHandler(this.sequenceDataGrid_AnalogValueChanged)});
            foreach (var name in names)
            {
                DataGridComboBoxColumn col = new DataGridComboBoxColumn { Header = name,EditingElementStyle = analogStyle};
  
                var resource = this.FindResource("analogProvider");
                BindingOperations.SetBinding(col, DataGridComboBoxColumn.ItemsSourceProperty, new Binding() {Source = resource });
                col.SelectedItemBinding = new Binding("AnalogValueTypes[" + name + "]");
                dg.Columns.Add(col);
                
       
            }
            var dignames = first.DigitalValueTypes.Keys;
            foreach (var name in dignames)
            {
                DataGridComboBoxColumn col = new DataGridComboBoxColumn { Header = name };
                var resource = this.FindResource("digitalProvider");
                
                BindingOperations.SetBinding(col, DataGridComboBoxColumn.ItemsSourceProperty, new Binding() { Source = resource });
                col.SelectedItemBinding = new Binding("DigitalValueTypes[" + name + "]");
                dg.Columns.Add(col);
            }
        }

        private void sequenceDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            var dg = sender as DataGrid;
            var first = dg.ItemsSource as List<SequenceStep>;
            SequenceStepViewModel model = (SequenceStepViewModel)sequenceDataGrid.DataContext;
            model.SelectedSequenceStep = (SequenceStep)dg.CurrentItem;
        }

        private void sequenceDataGrid_CurrentCellChanged(object sender, EventArgs e)
        {
            
        }
        private void sequenceDataGrid_AnalogValueChanged(object sender, SelectionChangedEventArgs e)
        {
            var combo = sender as ComboBox;
            if (sequenceDataGrid.CurrentColumn == null) return;
            string channelName = (string)sequenceDataGrid.CurrentColumn.Header;
            if (e.AddedItems != null && e.AddedItems.Count > 0)
            {
                AnalogChannelSelector c = (AnalogChannelSelector)e.AddedItems[0];
                if (c != AnalogChannelSelector.Continue)
                {
                    //Only raises an event if the analog channel is being changed to something other than continue
                    SequenceStepViewModel model = (SequenceStepViewModel)sequenceDataGrid.DataContext;
                    model.SelectedAnalogChannel = new KeyValuePair<string, AnalogChannelSelector>(channelName, c);
                    RoutedEventArgs analogArgs = new RoutedEventArgs(SequenceDataGrid.ChangedAnalogChannelCellEvent);
                    RaiseEvent(analogArgs);
                }
            }
        }
        public static readonly RoutedEvent ChangedAnalogChannelCellEvent = EventManager.RegisterRoutedEvent("ChangedAnalogChannelCellEvent", RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(ComboBox));
        
        public event RoutedEventHandler ChangedAnalogCell
        {
            add { AddHandler(ChangedAnalogChannelCellEvent, value); }
            remove { RemoveHandler(ChangedAnalogChannelCellEvent, value); }
        }
    }
}
